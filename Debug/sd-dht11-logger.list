
sd-dht11-logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cc0  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08008e7c  08008e7c  00018e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008eec  08008eec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08008eec  08008eec  00018eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ef4  08008ef4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ef4  08008ef4  00018ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ef8  08008ef8  00018ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08008efc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008dc  2000000c  08008f08  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008e8  08008f08  000208e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021d20  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d13  00000000  00000000  00041d9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e28  00000000  00000000  00045ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000017b5  00000000  00000000  000478e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000342e3  00000000  00000000  00049095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025619  00000000  00000000  0007d378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00137f20  00000000  00000000  000a2991  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008344  00000000  00000000  001da8b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  001e2bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08008e64 	.word	0x08008e64

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08008e64 	.word	0x08008e64

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b970 	b.w	80004f4 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	460d      	mov	r5, r1
 8000234:	4604      	mov	r4, r0
 8000236:	460f      	mov	r7, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4694      	mov	ip, r2
 8000240:	d965      	bls.n	800030e <__udivmoddi4+0xe2>
 8000242:	fab2 f382 	clz	r3, r2
 8000246:	b143      	cbz	r3, 800025a <__udivmoddi4+0x2e>
 8000248:	fa02 fc03 	lsl.w	ip, r2, r3
 800024c:	f1c3 0220 	rsb	r2, r3, #32
 8000250:	409f      	lsls	r7, r3
 8000252:	fa20 f202 	lsr.w	r2, r0, r2
 8000256:	4317      	orrs	r7, r2
 8000258:	409c      	lsls	r4, r3
 800025a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800025e:	fa1f f58c 	uxth.w	r5, ip
 8000262:	fbb7 f1fe 	udiv	r1, r7, lr
 8000266:	0c22      	lsrs	r2, r4, #16
 8000268:	fb0e 7711 	mls	r7, lr, r1, r7
 800026c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000270:	fb01 f005 	mul.w	r0, r1, r5
 8000274:	4290      	cmp	r0, r2
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x62>
 8000278:	eb1c 0202 	adds.w	r2, ip, r2
 800027c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000280:	f080 811c 	bcs.w	80004bc <__udivmoddi4+0x290>
 8000284:	4290      	cmp	r0, r2
 8000286:	f240 8119 	bls.w	80004bc <__udivmoddi4+0x290>
 800028a:	3902      	subs	r1, #2
 800028c:	4462      	add	r2, ip
 800028e:	1a12      	subs	r2, r2, r0
 8000290:	b2a4      	uxth	r4, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800029e:	fb00 f505 	mul.w	r5, r0, r5
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x90>
 80002a6:	eb1c 0404 	adds.w	r4, ip, r4
 80002aa:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x294>
 80002b2:	42a5      	cmp	r5, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x294>
 80002b8:	4464      	add	r4, ip
 80002ba:	3802      	subs	r0, #2
 80002bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c0:	1b64      	subs	r4, r4, r5
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11e      	cbz	r6, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40dc      	lsrs	r4, r3
 80002c8:	2300      	movs	r3, #0
 80002ca:	e9c6 4300 	strd	r4, r3, [r6]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0xbc>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80ed 	beq.w	80004b6 <__udivmoddi4+0x28a>
 80002dc:	2100      	movs	r1, #0
 80002de:	e9c6 0500 	strd	r0, r5, [r6]
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	d149      	bne.n	8000384 <__udivmoddi4+0x158>
 80002f0:	42ab      	cmp	r3, r5
 80002f2:	d302      	bcc.n	80002fa <__udivmoddi4+0xce>
 80002f4:	4282      	cmp	r2, r0
 80002f6:	f200 80f8 	bhi.w	80004ea <__udivmoddi4+0x2be>
 80002fa:	1a84      	subs	r4, r0, r2
 80002fc:	eb65 0203 	sbc.w	r2, r5, r3
 8000300:	2001      	movs	r0, #1
 8000302:	4617      	mov	r7, r2
 8000304:	2e00      	cmp	r6, #0
 8000306:	d0e2      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000308:	e9c6 4700 	strd	r4, r7, [r6]
 800030c:	e7df      	b.n	80002ce <__udivmoddi4+0xa2>
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xe6>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f382 	clz	r3, r2
 8000316:	2b00      	cmp	r3, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x210>
 800031c:	1a8a      	subs	r2, r1, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	2101      	movs	r1, #1
 8000328:	fbb2 f5f7 	udiv	r5, r2, r7
 800032c:	fb07 2015 	mls	r0, r7, r5, r2
 8000330:	0c22      	lsrs	r2, r4, #16
 8000332:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000336:	fb0e f005 	mul.w	r0, lr, r5
 800033a:	4290      	cmp	r0, r2
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x124>
 800033e:	eb1c 0202 	adds.w	r2, ip, r2
 8000342:	f105 38ff 	add.w	r8, r5, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4290      	cmp	r0, r2
 800034a:	f200 80cb 	bhi.w	80004e4 <__udivmoddi4+0x2b8>
 800034e:	4645      	mov	r5, r8
 8000350:	1a12      	subs	r2, r2, r0
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb2 f0f7 	udiv	r0, r2, r7
 8000358:	fb07 2210 	mls	r2, r7, r0, r2
 800035c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000360:	fb0e fe00 	mul.w	lr, lr, r0
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x14e>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x14c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80bb 	bhi.w	80004ee <__udivmoddi4+0x2c2>
 8000378:	4610      	mov	r0, r2
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000382:	e79f      	b.n	80002c4 <__udivmoddi4+0x98>
 8000384:	f1c1 0720 	rsb	r7, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa05 f401 	lsl.w	r4, r5, r1
 8000396:	fa20 f307 	lsr.w	r3, r0, r7
 800039a:	40fd      	lsrs	r5, r7
 800039c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a0:	4323      	orrs	r3, r4
 80003a2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	fb09 5518 	mls	r5, r9, r8, r5
 80003ae:	0c1c      	lsrs	r4, r3, #16
 80003b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b4:	fb08 f50e 	mul.w	r5, r8, lr
 80003b8:	42a5      	cmp	r5, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	fa00 f001 	lsl.w	r0, r0, r1
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2b4>
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2b4>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4464      	add	r4, ip
 80003dc:	1b64      	subs	r4, r4, r5
 80003de:	b29d      	uxth	r5, r3
 80003e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e4:	fb09 4413 	mls	r4, r9, r3, r4
 80003e8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003ec:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2ac>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2ac>
 8000402:	3b02      	subs	r3, #2
 8000404:	4464      	add	r4, ip
 8000406:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040a:	fba3 9502 	umull	r9, r5, r3, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	42ac      	cmp	r4, r5
 8000414:	46c8      	mov	r8, r9
 8000416:	46ae      	mov	lr, r5
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x29c>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x298>
 800041c:	b156      	cbz	r6, 8000434 <__udivmoddi4+0x208>
 800041e:	ebb0 0208 	subs.w	r2, r0, r8
 8000422:	eb64 040e 	sbc.w	r4, r4, lr
 8000426:	fa04 f707 	lsl.w	r7, r4, r7
 800042a:	40ca      	lsrs	r2, r1
 800042c:	40cc      	lsrs	r4, r1
 800042e:	4317      	orrs	r7, r2
 8000430:	e9c6 7400 	strd	r7, r4, [r6]
 8000434:	4618      	mov	r0, r3
 8000436:	2100      	movs	r1, #0
 8000438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043c:	f1c3 0120 	rsb	r1, r3, #32
 8000440:	fa02 fc03 	lsl.w	ip, r2, r3
 8000444:	fa20 f201 	lsr.w	r2, r0, r1
 8000448:	fa25 f101 	lsr.w	r1, r5, r1
 800044c:	409d      	lsls	r5, r3
 800044e:	432a      	orrs	r2, r5
 8000450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fbb1 f0f7 	udiv	r0, r1, r7
 800045c:	fb07 1510 	mls	r5, r7, r0, r1
 8000460:	0c11      	lsrs	r1, r2, #16
 8000462:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000466:	fb00 f50e 	mul.w	r5, r0, lr
 800046a:	428d      	cmp	r5, r1
 800046c:	fa04 f403 	lsl.w	r4, r4, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x258>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 38ff 	add.w	r8, r0, #4294967295
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 800047c:	428d      	cmp	r5, r1
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b0>
 8000480:	3802      	subs	r0, #2
 8000482:	4461      	add	r1, ip
 8000484:	1b49      	subs	r1, r1, r5
 8000486:	b292      	uxth	r2, r2
 8000488:	fbb1 f5f7 	udiv	r5, r1, r7
 800048c:	fb07 1115 	mls	r1, r7, r5, r1
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	fb05 f10e 	mul.w	r1, r5, lr
 8000498:	4291      	cmp	r1, r2
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x282>
 800049c:	eb1c 0202 	adds.w	r2, ip, r2
 80004a0:	f105 38ff 	add.w	r8, r5, #4294967295
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 80004a6:	4291      	cmp	r1, r2
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 80004aa:	3d02      	subs	r5, #2
 80004ac:	4462      	add	r2, ip
 80004ae:	1a52      	subs	r2, r2, r1
 80004b0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0xfc>
 80004b6:	4631      	mov	r1, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e708      	b.n	80002ce <__udivmoddi4+0xa2>
 80004bc:	4639      	mov	r1, r7
 80004be:	e6e6      	b.n	800028e <__udivmoddi4+0x62>
 80004c0:	4610      	mov	r0, r2
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x90>
 80004c4:	4548      	cmp	r0, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d0:	3b01      	subs	r3, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d4:	4645      	mov	r5, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x282>
 80004d8:	462b      	mov	r3, r5
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1da>
 80004dc:	4640      	mov	r0, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x258>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e4:	3d02      	subs	r5, #2
 80004e6:	4462      	add	r2, ip
 80004e8:	e732      	b.n	8000350 <__udivmoddi4+0x124>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e70a      	b.n	8000304 <__udivmoddi4+0xd8>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e742      	b.n	800037a <__udivmoddi4+0x14e>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fc:	f001 fae7 	bl	8001ace <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000500:	f000 f870 	bl	80005e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000504:	f000 fb4e 	bl	8000ba4 <MX_GPIO_Init>
  MX_FMC_Init();
 8000508:	f000 fae6 	bl	8000ad8 <MX_FMC_Init>
  MX_I2C1_Init();
 800050c:	f000 f8be 	bl	800068c <MX_I2C1_Init>
  MX_SAI1_Init();
 8000510:	f000 f8fc 	bl	800070c <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 8000514:	f000 f962 	bl	80007dc <MX_SDMMC1_SD_Init>
  MX_SPI2_Init();
 8000518:	f000 f986 	bl	8000828 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 800051c:	f000 fa16 	bl	800094c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000520:	f000 fa60 	bl	80009e4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000524:	f000 faaa 	bl	8000a7c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 8000528:	f000 f9bc 	bl	80008a4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);			// Start TIM1 for microsecond delay function
 800052c:	4822      	ldr	r0, [pc, #136]	; (80005b8 <main+0xc0>)
 800052e:	f006 fa31 	bl	8006994 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  dht11Start();
 8000532:	f000 fdbf 	bl	80010b4 <dht11Start>
	  Presence = dht11CheckResponse();
 8000536:	f000 fde1 	bl	80010fc <dht11CheckResponse>
 800053a:	4603      	mov	r3, r0
 800053c:	461a      	mov	r2, r3
 800053e:	4b1f      	ldr	r3, [pc, #124]	; (80005bc <main+0xc4>)
 8000540:	701a      	strb	r2, [r3, #0]
	  Rh_byte1 = dht11Read();
 8000542:	f000 fe0b 	bl	800115c <dht11Read>
 8000546:	4603      	mov	r3, r0
 8000548:	461a      	mov	r2, r3
 800054a:	4b1d      	ldr	r3, [pc, #116]	; (80005c0 <main+0xc8>)
 800054c:	701a      	strb	r2, [r3, #0]
	  Rh_byte2 = dht11Read();
 800054e:	f000 fe05 	bl	800115c <dht11Read>
 8000552:	4603      	mov	r3, r0
 8000554:	461a      	mov	r2, r3
 8000556:	4b1b      	ldr	r3, [pc, #108]	; (80005c4 <main+0xcc>)
 8000558:	701a      	strb	r2, [r3, #0]
	  Temp_byte1 = dht11Read();
 800055a:	f000 fdff 	bl	800115c <dht11Read>
 800055e:	4603      	mov	r3, r0
 8000560:	461a      	mov	r2, r3
 8000562:	4b19      	ldr	r3, [pc, #100]	; (80005c8 <main+0xd0>)
 8000564:	701a      	strb	r2, [r3, #0]
	  Temp_byte2 = dht11Read();
 8000566:	f000 fdf9 	bl	800115c <dht11Read>
 800056a:	4603      	mov	r3, r0
 800056c:	461a      	mov	r2, r3
 800056e:	4b17      	ldr	r3, [pc, #92]	; (80005cc <main+0xd4>)
 8000570:	701a      	strb	r2, [r3, #0]
	  SUM = dht11Read();
 8000572:	f000 fdf3 	bl	800115c <dht11Read>
 8000576:	4603      	mov	r3, r0
 8000578:	b29a      	uxth	r2, r3
 800057a:	4b15      	ldr	r3, [pc, #84]	; (80005d0 <main+0xd8>)
 800057c:	801a      	strh	r2, [r3, #0]

	  TEMP = Temp_byte1;
 800057e:	4b12      	ldr	r3, [pc, #72]	; (80005c8 <main+0xd0>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	b29a      	uxth	r2, r3
 8000584:	4b13      	ldr	r3, [pc, #76]	; (80005d4 <main+0xdc>)
 8000586:	801a      	strh	r2, [r3, #0]
	  RH = Rh_byte1;
 8000588:	4b0d      	ldr	r3, [pc, #52]	; (80005c0 <main+0xc8>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	b29a      	uxth	r2, r3
 800058e:	4b12      	ldr	r3, [pc, #72]	; (80005d8 <main+0xe0>)
 8000590:	801a      	strh	r2, [r3, #0]

	  Temperature = (float) TEMP;
 8000592:	4b10      	ldr	r3, [pc, #64]	; (80005d4 <main+0xdc>)
 8000594:	881b      	ldrh	r3, [r3, #0]
 8000596:	ee07 3a90 	vmov	s15, r3
 800059a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800059e:	4b0f      	ldr	r3, [pc, #60]	; (80005dc <main+0xe4>)
 80005a0:	edc3 7a00 	vstr	s15, [r3]
	  Humidity = (float) RH;
 80005a4:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <main+0xe0>)
 80005a6:	881b      	ldrh	r3, [r3, #0]
 80005a8:	ee07 3a90 	vmov	s15, r3
 80005ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80005b0:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <main+0xe8>)
 80005b2:	edc3 7a00 	vstr	s15, [r3]
	  dht11Start();
 80005b6:	e7bc      	b.n	8000532 <main+0x3a>
 80005b8:	200001f4 	.word	0x200001f4
 80005bc:	200008d8 	.word	0x200008d8
 80005c0:	200008c4 	.word	0x200008c4
 80005c4:	200008c5 	.word	0x200008c5
 80005c8:	200008c6 	.word	0x200008c6
 80005cc:	200008c7 	.word	0x200008c7
 80005d0:	200008c8 	.word	0x200008c8
 80005d4:	200008cc 	.word	0x200008cc
 80005d8:	200008ca 	.word	0x200008ca
 80005dc:	200008d0 	.word	0x200008d0
 80005e0:	200008d4 	.word	0x200008d4

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b096      	sub	sp, #88	; 0x58
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 0314 	add.w	r3, r7, #20
 80005ee:	2244      	movs	r2, #68	; 0x44
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f008 fc0a 	bl	8008e0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	463b      	mov	r3, r7
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
 8000604:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000606:	2000      	movs	r0, #0
 8000608:	f002 f83c 	bl	8002684 <HAL_PWREx_ControlVoltageScaling>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000612:	f000 fded 	bl	80011f0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI;
 8000616:	2330      	movs	r3, #48	; 0x30
 8000618:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800061a:	2301      	movs	r3, #1
 800061c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800061e:	2301      	movs	r3, #1
 8000620:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000622:	2300      	movs	r3, #0
 8000624:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000626:	2360      	movs	r3, #96	; 0x60
 8000628:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062a:	2302      	movs	r3, #2
 800062c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800062e:	2301      	movs	r3, #1
 8000630:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000632:	2301      	movs	r3, #1
 8000634:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000636:	233c      	movs	r3, #60	; 0x3c
 8000638:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 800063a:	2305      	movs	r3, #5
 800063c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800063e:	2302      	movs	r3, #2
 8000640:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000642:	2302      	movs	r3, #2
 8000644:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000646:	f107 0314 	add.w	r3, r7, #20
 800064a:	4618      	mov	r0, r3
 800064c:	f002 f8de 	bl	800280c <HAL_RCC_OscConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000656:	f000 fdcb 	bl	80011f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065a:	230f      	movs	r3, #15
 800065c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065e:	2303      	movs	r3, #3
 8000660:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800066e:	463b      	mov	r3, r7
 8000670:	2105      	movs	r1, #5
 8000672:	4618      	mov	r0, r3
 8000674:	f002 fce4 	bl	8003040 <HAL_RCC_ClockConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800067e:	f000 fdb7 	bl	80011f0 <Error_Handler>
  }
}
 8000682:	bf00      	nop
 8000684:	3758      	adds	r7, #88	; 0x58
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
	...

0800068c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000690:	4b1b      	ldr	r3, [pc, #108]	; (8000700 <MX_I2C1_Init+0x74>)
 8000692:	4a1c      	ldr	r2, [pc, #112]	; (8000704 <MX_I2C1_Init+0x78>)
 8000694:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000696:	4b1a      	ldr	r3, [pc, #104]	; (8000700 <MX_I2C1_Init+0x74>)
 8000698:	4a1b      	ldr	r2, [pc, #108]	; (8000708 <MX_I2C1_Init+0x7c>)
 800069a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800069c:	4b18      	ldr	r3, [pc, #96]	; (8000700 <MX_I2C1_Init+0x74>)
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006a2:	4b17      	ldr	r3, [pc, #92]	; (8000700 <MX_I2C1_Init+0x74>)
 80006a4:	2201      	movs	r2, #1
 80006a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006a8:	4b15      	ldr	r3, [pc, #84]	; (8000700 <MX_I2C1_Init+0x74>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006ae:	4b14      	ldr	r3, [pc, #80]	; (8000700 <MX_I2C1_Init+0x74>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006b4:	4b12      	ldr	r3, [pc, #72]	; (8000700 <MX_I2C1_Init+0x74>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <MX_I2C1_Init+0x74>)
 80006bc:	2200      	movs	r2, #0
 80006be:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <MX_I2C1_Init+0x74>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006c6:	480e      	ldr	r0, [pc, #56]	; (8000700 <MX_I2C1_Init+0x74>)
 80006c8:	f001 fd42 	bl	8002150 <HAL_I2C_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006d2:	f000 fd8d 	bl	80011f0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006d6:	2100      	movs	r1, #0
 80006d8:	4809      	ldr	r0, [pc, #36]	; (8000700 <MX_I2C1_Init+0x74>)
 80006da:	f001 fdd4 	bl	8002286 <HAL_I2CEx_ConfigAnalogFilter>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006e4:	f000 fd84 	bl	80011f0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006e8:	2100      	movs	r1, #0
 80006ea:	4805      	ldr	r0, [pc, #20]	; (8000700 <MX_I2C1_Init+0x74>)
 80006ec:	f001 fe16 	bl	800231c <HAL_I2CEx_ConfigDigitalFilter>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006f6:	f000 fd7b 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20000028 	.word	0x20000028
 8000704:	40005400 	.word	0x40005400
 8000708:	307075b1 	.word	0x307075b1

0800070c <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000710:	4b2f      	ldr	r3, [pc, #188]	; (80007d0 <MX_SAI1_Init+0xc4>)
 8000712:	4a30      	ldr	r2, [pc, #192]	; (80007d4 <MX_SAI1_Init+0xc8>)
 8000714:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000716:	4b2e      	ldr	r3, [pc, #184]	; (80007d0 <MX_SAI1_Init+0xc4>)
 8000718:	2200      	movs	r2, #0
 800071a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 800071c:	4b2c      	ldr	r3, [pc, #176]	; (80007d0 <MX_SAI1_Init+0xc4>)
 800071e:	2200      	movs	r2, #0
 8000720:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8000722:	4b2b      	ldr	r3, [pc, #172]	; (80007d0 <MX_SAI1_Init+0xc4>)
 8000724:	2240      	movs	r2, #64	; 0x40
 8000726:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000728:	4b29      	ldr	r3, [pc, #164]	; (80007d0 <MX_SAI1_Init+0xc4>)
 800072a:	2200      	movs	r2, #0
 800072c:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800072e:	4b28      	ldr	r3, [pc, #160]	; (80007d0 <MX_SAI1_Init+0xc4>)
 8000730:	2200      	movs	r2, #0
 8000732:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000734:	4b26      	ldr	r3, [pc, #152]	; (80007d0 <MX_SAI1_Init+0xc4>)
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800073a:	4b25      	ldr	r3, [pc, #148]	; (80007d0 <MX_SAI1_Init+0xc4>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000740:	4b23      	ldr	r3, [pc, #140]	; (80007d0 <MX_SAI1_Init+0xc4>)
 8000742:	2200      	movs	r2, #0
 8000744:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8000746:	4b22      	ldr	r3, [pc, #136]	; (80007d0 <MX_SAI1_Init+0xc4>)
 8000748:	2200      	movs	r2, #0
 800074a:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800074c:	4b20      	ldr	r3, [pc, #128]	; (80007d0 <MX_SAI1_Init+0xc4>)
 800074e:	2200      	movs	r2, #0
 8000750:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000752:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <MX_SAI1_Init+0xc4>)
 8000754:	4a20      	ldr	r2, [pc, #128]	; (80007d8 <MX_SAI1_Init+0xcc>)
 8000756:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000758:	4b1d      	ldr	r3, [pc, #116]	; (80007d0 <MX_SAI1_Init+0xc4>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800075e:	4b1c      	ldr	r3, [pc, #112]	; (80007d0 <MX_SAI1_Init+0xc4>)
 8000760:	2200      	movs	r2, #0
 8000762:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000764:	4b1a      	ldr	r3, [pc, #104]	; (80007d0 <MX_SAI1_Init+0xc4>)
 8000766:	2200      	movs	r2, #0
 8000768:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800076a:	4b19      	ldr	r3, [pc, #100]	; (80007d0 <MX_SAI1_Init+0xc4>)
 800076c:	2200      	movs	r2, #0
 800076e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 8000770:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <MX_SAI1_Init+0xc4>)
 8000772:	2200      	movs	r2, #0
 8000774:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 0;
 8000778:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <MX_SAI1_Init+0xc4>)
 800077a:	2200      	movs	r2, #0
 800077c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 800077e:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <MX_SAI1_Init+0xc4>)
 8000780:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000784:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8000786:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <MX_SAI1_Init+0xc4>)
 8000788:	2208      	movs	r2, #8
 800078a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 800078c:	4b10      	ldr	r3, [pc, #64]	; (80007d0 <MX_SAI1_Init+0xc4>)
 800078e:	2201      	movs	r2, #1
 8000790:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000792:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <MX_SAI1_Init+0xc4>)
 8000794:	2200      	movs	r2, #0
 8000796:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000798:	4b0d      	ldr	r3, [pc, #52]	; (80007d0 <MX_SAI1_Init+0xc4>)
 800079a:	2200      	movs	r2, #0
 800079c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800079e:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <MX_SAI1_Init+0xc4>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 80007a4:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <MX_SAI1_Init+0xc4>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80007aa:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MX_SAI1_Init+0xc4>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 80007b0:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <MX_SAI1_Init+0xc4>)
 80007b2:	2201      	movs	r2, #1
 80007b4:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <MX_SAI1_Init+0xc4>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 80007bc:	4804      	ldr	r0, [pc, #16]	; (80007d0 <MX_SAI1_Init+0xc4>)
 80007be:	f004 fca3 	bl	8005108 <HAL_SAI_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 80007c8:	f000 fd12 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	2000007c 	.word	0x2000007c
 80007d4:	40015404 	.word	0x40015404
 80007d8:	0002ee00 	.word	0x0002ee00

080007dc <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <MX_SDMMC1_SD_Init+0x44>)
 80007e2:	4a10      	ldr	r2, [pc, #64]	; (8000824 <MX_SDMMC1_SD_Init+0x48>)
 80007e4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <MX_SDMMC1_SD_Init+0x44>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <MX_SDMMC1_SD_Init+0x44>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <MX_SDMMC1_SD_Init+0x44>)
 80007f4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007f8:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80007fa:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_SDMMC1_SD_Init+0x44>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000800:	4b07      	ldr	r3, [pc, #28]	; (8000820 <MX_SDMMC1_SD_Init+0x44>)
 8000802:	2200      	movs	r2, #0
 8000804:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <MX_SDMMC1_SD_Init+0x44>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 800080c:	4804      	ldr	r0, [pc, #16]	; (8000820 <MX_SDMMC1_SD_Init+0x44>)
 800080e:	f004 fe93 	bl	8005538 <HAL_SD_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_SDMMC1_SD_Init+0x40>
  {
    Error_Handler();
 8000818:	f000 fcea 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20000110 	.word	0x20000110
 8000824:	50062400 	.word	0x50062400

08000828 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800082c:	4b1b      	ldr	r3, [pc, #108]	; (800089c <MX_SPI2_Init+0x74>)
 800082e:	4a1c      	ldr	r2, [pc, #112]	; (80008a0 <MX_SPI2_Init+0x78>)
 8000830:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000832:	4b1a      	ldr	r3, [pc, #104]	; (800089c <MX_SPI2_Init+0x74>)
 8000834:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000838:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800083a:	4b18      	ldr	r3, [pc, #96]	; (800089c <MX_SPI2_Init+0x74>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000840:	4b16      	ldr	r3, [pc, #88]	; (800089c <MX_SPI2_Init+0x74>)
 8000842:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000846:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000848:	4b14      	ldr	r3, [pc, #80]	; (800089c <MX_SPI2_Init+0x74>)
 800084a:	2200      	movs	r2, #0
 800084c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800084e:	4b13      	ldr	r3, [pc, #76]	; (800089c <MX_SPI2_Init+0x74>)
 8000850:	2200      	movs	r2, #0
 8000852:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000854:	4b11      	ldr	r3, [pc, #68]	; (800089c <MX_SPI2_Init+0x74>)
 8000856:	f44f 7200 	mov.w	r2, #512	; 0x200
 800085a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800085c:	4b0f      	ldr	r3, [pc, #60]	; (800089c <MX_SPI2_Init+0x74>)
 800085e:	2208      	movs	r2, #8
 8000860:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <MX_SPI2_Init+0x74>)
 8000864:	2200      	movs	r2, #0
 8000866:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <MX_SPI2_Init+0x74>)
 800086a:	2200      	movs	r2, #0
 800086c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <MX_SPI2_Init+0x74>)
 8000870:	2200      	movs	r2, #0
 8000872:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000874:	4b09      	ldr	r3, [pc, #36]	; (800089c <MX_SPI2_Init+0x74>)
 8000876:	2207      	movs	r2, #7
 8000878:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800087a:	4b08      	ldr	r3, [pc, #32]	; (800089c <MX_SPI2_Init+0x74>)
 800087c:	2200      	movs	r2, #0
 800087e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <MX_SPI2_Init+0x74>)
 8000882:	2208      	movs	r2, #8
 8000884:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000886:	4805      	ldr	r0, [pc, #20]	; (800089c <MX_SPI2_Init+0x74>)
 8000888:	f005 ff41 	bl	800670e <HAL_SPI_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000892:	f000 fcad 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000190 	.word	0x20000190
 80008a0:	40003800 	.word	0x40003800

080008a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b088      	sub	sp, #32
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008aa:	f107 0310 	add.w	r3, r7, #16
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008c2:	4b20      	ldr	r3, [pc, #128]	; (8000944 <MX_TIM1_Init+0xa0>)
 80008c4:	4a20      	ldr	r2, [pc, #128]	; (8000948 <MX_TIM1_Init+0xa4>)
 80008c6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 120-1;
 80008c8:	4b1e      	ldr	r3, [pc, #120]	; (8000944 <MX_TIM1_Init+0xa0>)
 80008ca:	2277      	movs	r2, #119	; 0x77
 80008cc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ce:	4b1d      	ldr	r3, [pc, #116]	; (8000944 <MX_TIM1_Init+0xa0>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80008d4:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <MX_TIM1_Init+0xa0>)
 80008d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008da:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008dc:	4b19      	ldr	r3, [pc, #100]	; (8000944 <MX_TIM1_Init+0xa0>)
 80008de:	2200      	movs	r2, #0
 80008e0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008e2:	4b18      	ldr	r3, [pc, #96]	; (8000944 <MX_TIM1_Init+0xa0>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008e8:	4b16      	ldr	r3, [pc, #88]	; (8000944 <MX_TIM1_Init+0xa0>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008ee:	4815      	ldr	r0, [pc, #84]	; (8000944 <MX_TIM1_Init+0xa0>)
 80008f0:	f005 fff8 	bl	80068e4 <HAL_TIM_Base_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80008fa:	f000 fc79 	bl	80011f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000902:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000904:	f107 0310 	add.w	r3, r7, #16
 8000908:	4619      	mov	r1, r3
 800090a:	480e      	ldr	r0, [pc, #56]	; (8000944 <MX_TIM1_Init+0xa0>)
 800090c:	f006 f8aa 	bl	8006a64 <HAL_TIM_ConfigClockSource>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000916:	f000 fc6b 	bl	80011f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800091a:	2300      	movs	r3, #0
 800091c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800091e:	2300      	movs	r3, #0
 8000920:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000922:	2300      	movs	r3, #0
 8000924:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	4619      	mov	r1, r3
 800092a:	4806      	ldr	r0, [pc, #24]	; (8000944 <MX_TIM1_Init+0xa0>)
 800092c:	f006 fa98 	bl	8006e60 <HAL_TIMEx_MasterConfigSynchronization>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000936:	f000 fc5b 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	3720      	adds	r7, #32
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	200001f4 	.word	0x200001f4
 8000948:	40012c00 	.word	0x40012c00

0800094c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000950:	4b22      	ldr	r3, [pc, #136]	; (80009dc <MX_USART2_UART_Init+0x90>)
 8000952:	4a23      	ldr	r2, [pc, #140]	; (80009e0 <MX_USART2_UART_Init+0x94>)
 8000954:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000956:	4b21      	ldr	r3, [pc, #132]	; (80009dc <MX_USART2_UART_Init+0x90>)
 8000958:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800095c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800095e:	4b1f      	ldr	r3, [pc, #124]	; (80009dc <MX_USART2_UART_Init+0x90>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000964:	4b1d      	ldr	r3, [pc, #116]	; (80009dc <MX_USART2_UART_Init+0x90>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800096a:	4b1c      	ldr	r3, [pc, #112]	; (80009dc <MX_USART2_UART_Init+0x90>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000970:	4b1a      	ldr	r3, [pc, #104]	; (80009dc <MX_USART2_UART_Init+0x90>)
 8000972:	220c      	movs	r2, #12
 8000974:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000976:	4b19      	ldr	r3, [pc, #100]	; (80009dc <MX_USART2_UART_Init+0x90>)
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800097c:	4b17      	ldr	r3, [pc, #92]	; (80009dc <MX_USART2_UART_Init+0x90>)
 800097e:	2200      	movs	r2, #0
 8000980:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000982:	4b16      	ldr	r3, [pc, #88]	; (80009dc <MX_USART2_UART_Init+0x90>)
 8000984:	2200      	movs	r2, #0
 8000986:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000988:	4b14      	ldr	r3, [pc, #80]	; (80009dc <MX_USART2_UART_Init+0x90>)
 800098a:	2200      	movs	r2, #0
 800098c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800098e:	4b13      	ldr	r3, [pc, #76]	; (80009dc <MX_USART2_UART_Init+0x90>)
 8000990:	2200      	movs	r2, #0
 8000992:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000994:	4811      	ldr	r0, [pc, #68]	; (80009dc <MX_USART2_UART_Init+0x90>)
 8000996:	f006 faeb 	bl	8006f70 <HAL_UART_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80009a0:	f000 fc26 	bl	80011f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009a4:	2100      	movs	r1, #0
 80009a6:	480d      	ldr	r0, [pc, #52]	; (80009dc <MX_USART2_UART_Init+0x90>)
 80009a8:	f007 f880 	bl	8007aac <HAL_UARTEx_SetTxFifoThreshold>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80009b2:	f000 fc1d 	bl	80011f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009b6:	2100      	movs	r1, #0
 80009b8:	4808      	ldr	r0, [pc, #32]	; (80009dc <MX_USART2_UART_Init+0x90>)
 80009ba:	f007 f8b5 	bl	8007b28 <HAL_UARTEx_SetRxFifoThreshold>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80009c4:	f000 fc14 	bl	80011f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80009c8:	4804      	ldr	r0, [pc, #16]	; (80009dc <MX_USART2_UART_Init+0x90>)
 80009ca:	f007 f836 	bl	8007a3a <HAL_UARTEx_DisableFifoMode>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80009d4:	f000 fc0c 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20000240 	.word	0x20000240
 80009e0:	40004400 	.word	0x40004400

080009e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009e8:	4b22      	ldr	r3, [pc, #136]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 80009ea:	4a23      	ldr	r2, [pc, #140]	; (8000a78 <MX_USART3_UART_Init+0x94>)
 80009ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009ee:	4b21      	ldr	r3, [pc, #132]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 80009f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009f6:	4b1f      	ldr	r3, [pc, #124]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009fc:	4b1d      	ldr	r3, [pc, #116]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a02:	4b1c      	ldr	r3, [pc, #112]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a08:	4b1a      	ldr	r3, [pc, #104]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 8000a0a:	220c      	movs	r2, #12
 8000a0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0e:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a14:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a1a:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a20:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a26:	4b13      	ldr	r3, [pc, #76]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a2c:	4811      	ldr	r0, [pc, #68]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 8000a2e:	f006 fa9f 	bl	8006f70 <HAL_UART_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a38:	f000 fbda 	bl	80011f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	480d      	ldr	r0, [pc, #52]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 8000a40:	f007 f834 	bl	8007aac <HAL_UARTEx_SetTxFifoThreshold>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a4a:	f000 fbd1 	bl	80011f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a4e:	2100      	movs	r1, #0
 8000a50:	4808      	ldr	r0, [pc, #32]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 8000a52:	f007 f869 	bl	8007b28 <HAL_UARTEx_SetRxFifoThreshold>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a5c:	f000 fbc8 	bl	80011f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a60:	4804      	ldr	r0, [pc, #16]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 8000a62:	f006 ffea 	bl	8007a3a <HAL_UARTEx_DisableFifoMode>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a6c:	f000 fbc0 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	200002d4 	.word	0x200002d4
 8000a78:	40004800 	.word	0x40004800

08000a7c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a80:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a82:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a86:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a88:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a8a:	2206      	movs	r2, #6
 8000a8c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a8e:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a90:	2202      	movs	r2, #2
 8000a92:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a94:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a96:	2202      	movs	r2, #2
 8000a98:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000aac:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ab2:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000abe:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ac0:	f001 fc78 	bl	80023b4 <HAL_PCD_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000aca:	f000 fb91 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000368 	.word	0x20000368

08000ad8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b088      	sub	sp, #32
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000ade:	463b      	mov	r3, r7
 8000ae0:	2220      	movs	r2, #32
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f008 f991 	bl	8008e0c <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000aea:	4b2c      	ldr	r3, [pc, #176]	; (8000b9c <MX_FMC_Init+0xc4>)
 8000aec:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000af0:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000af2:	4b2a      	ldr	r3, [pc, #168]	; (8000b9c <MX_FMC_Init+0xc4>)
 8000af4:	4a2a      	ldr	r2, [pc, #168]	; (8000ba0 <MX_FMC_Init+0xc8>)
 8000af6:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000af8:	4b28      	ldr	r3, [pc, #160]	; (8000b9c <MX_FMC_Init+0xc4>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000afe:	4b27      	ldr	r3, [pc, #156]	; (8000b9c <MX_FMC_Init+0xc4>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_PSRAM;
 8000b04:	4b25      	ldr	r3, [pc, #148]	; (8000b9c <MX_FMC_Init+0xc4>)
 8000b06:	2204      	movs	r2, #4
 8000b08:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000b0a:	4b24      	ldr	r3, [pc, #144]	; (8000b9c <MX_FMC_Init+0xc4>)
 8000b0c:	2210      	movs	r2, #16
 8000b0e:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_ENABLE;
 8000b10:	4b22      	ldr	r3, [pc, #136]	; (8000b9c <MX_FMC_Init+0xc4>)
 8000b12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b16:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000b18:	4b20      	ldr	r3, [pc, #128]	; (8000b9c <MX_FMC_Init+0xc4>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000b1e:	4b1f      	ldr	r3, [pc, #124]	; (8000b9c <MX_FMC_Init+0xc4>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8000b24:	4b1d      	ldr	r3, [pc, #116]	; (8000b9c <MX_FMC_Init+0xc4>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_ENABLE;
 8000b2a:	4b1c      	ldr	r3, [pc, #112]	; (8000b9c <MX_FMC_Init+0xc4>)
 8000b2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b30:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000b32:	4b1a      	ldr	r3, [pc, #104]	; (8000b9c <MX_FMC_Init+0xc4>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000b38:	4b18      	ldr	r3, [pc, #96]	; (8000b9c <MX_FMC_Init+0xc4>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_ENABLE;
 8000b3e:	4b17      	ldr	r3, [pc, #92]	; (8000b9c <MX_FMC_Init+0xc4>)
 8000b40:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000b44:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000b46:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <MX_FMC_Init+0xc4>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000b4c:	4b13      	ldr	r3, [pc, #76]	; (8000b9c <MX_FMC_Init+0xc4>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.NBLSetupTime = 0;
 8000b52:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <MX_FMC_Init+0xc4>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	645a      	str	r2, [r3, #68]	; 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000b58:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <MX_FMC_Init+0xc4>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000b5e:	230f      	movs	r3, #15
 8000b60:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8000b62:	230f      	movs	r3, #15
 8000b64:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8000b66:	23ff      	movs	r3, #255	; 0xff
 8000b68:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000b6e:	230f      	movs	r3, #15
 8000b70:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000b72:	2310      	movs	r3, #16
 8000b74:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 2;
 8000b76:	2302      	movs	r3, #2
 8000b78:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000b7e:	463b      	mov	r3, r7
 8000b80:	2200      	movs	r2, #0
 8000b82:	4619      	mov	r1, r3
 8000b84:	4805      	ldr	r0, [pc, #20]	; (8000b9c <MX_FMC_Init+0xc4>)
 8000b86:	f005 fe65 	bl	8006854 <HAL_SRAM_Init>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_FMC_Init+0xbc>
  {
    Error_Handler( );
 8000b90:	f000 fb2e 	bl	80011f0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000b94:	bf00      	nop
 8000b96:	3720      	adds	r7, #32
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20000874 	.word	0x20000874
 8000ba0:	a0000104 	.word	0xa0000104

08000ba4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08e      	sub	sp, #56	; 0x38
 8000ba8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000baa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
 8000bb8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000bba:	4bb2      	ldr	r3, [pc, #712]	; (8000e84 <MX_GPIO_Init+0x2e0>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bbe:	4ab1      	ldr	r2, [pc, #708]	; (8000e84 <MX_GPIO_Init+0x2e0>)
 8000bc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bc6:	4baf      	ldr	r3, [pc, #700]	; (8000e84 <MX_GPIO_Init+0x2e0>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bce:	623b      	str	r3, [r7, #32]
 8000bd0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bd2:	4bac      	ldr	r3, [pc, #688]	; (8000e84 <MX_GPIO_Init+0x2e0>)
 8000bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd6:	4aab      	ldr	r2, [pc, #684]	; (8000e84 <MX_GPIO_Init+0x2e0>)
 8000bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bde:	4ba9      	ldr	r3, [pc, #676]	; (8000e84 <MX_GPIO_Init+0x2e0>)
 8000be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000be6:	61fb      	str	r3, [r7, #28]
 8000be8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bea:	4ba6      	ldr	r3, [pc, #664]	; (8000e84 <MX_GPIO_Init+0x2e0>)
 8000bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bee:	4aa5      	ldr	r2, [pc, #660]	; (8000e84 <MX_GPIO_Init+0x2e0>)
 8000bf0:	f043 0310 	orr.w	r3, r3, #16
 8000bf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bf6:	4ba3      	ldr	r3, [pc, #652]	; (8000e84 <MX_GPIO_Init+0x2e0>)
 8000bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfa:	f003 0310 	and.w	r3, r3, #16
 8000bfe:	61bb      	str	r3, [r7, #24]
 8000c00:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c02:	4ba0      	ldr	r3, [pc, #640]	; (8000e84 <MX_GPIO_Init+0x2e0>)
 8000c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c06:	4a9f      	ldr	r2, [pc, #636]	; (8000e84 <MX_GPIO_Init+0x2e0>)
 8000c08:	f043 0302 	orr.w	r3, r3, #2
 8000c0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c0e:	4b9d      	ldr	r3, [pc, #628]	; (8000e84 <MX_GPIO_Init+0x2e0>)
 8000c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c12:	f003 0302 	and.w	r3, r3, #2
 8000c16:	617b      	str	r3, [r7, #20]
 8000c18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1a:	4b9a      	ldr	r3, [pc, #616]	; (8000e84 <MX_GPIO_Init+0x2e0>)
 8000c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1e:	4a99      	ldr	r2, [pc, #612]	; (8000e84 <MX_GPIO_Init+0x2e0>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c26:	4b97      	ldr	r3, [pc, #604]	; (8000e84 <MX_GPIO_Init+0x2e0>)
 8000c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c32:	4b94      	ldr	r3, [pc, #592]	; (8000e84 <MX_GPIO_Init+0x2e0>)
 8000c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c36:	4a93      	ldr	r2, [pc, #588]	; (8000e84 <MX_GPIO_Init+0x2e0>)
 8000c38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c3e:	4b91      	ldr	r3, [pc, #580]	; (8000e84 <MX_GPIO_Init+0x2e0>)
 8000c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 8000c4a:	f001 fdcf 	bl	80027ec <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c4e:	4b8d      	ldr	r3, [pc, #564]	; (8000e84 <MX_GPIO_Init+0x2e0>)
 8000c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c52:	4a8c      	ldr	r2, [pc, #560]	; (8000e84 <MX_GPIO_Init+0x2e0>)
 8000c54:	f043 0308 	orr.w	r3, r3, #8
 8000c58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c5a:	4b8a      	ldr	r3, [pc, #552]	; (8000e84 <MX_GPIO_Init+0x2e0>)
 8000c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5e:	f003 0308 	and.w	r3, r3, #8
 8000c62:	60bb      	str	r3, [r7, #8]
 8000c64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c66:	4b87      	ldr	r3, [pc, #540]	; (8000e84 <MX_GPIO_Init+0x2e0>)
 8000c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6a:	4a86      	ldr	r2, [pc, #536]	; (8000e84 <MX_GPIO_Init+0x2e0>)
 8000c6c:	f043 0304 	orr.w	r3, r3, #4
 8000c70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c72:	4b84      	ldr	r3, [pc, #528]	; (8000e84 <MX_GPIO_Init+0x2e0>)
 8000c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c76:	f003 0304 	and.w	r3, r3, #4
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c7e:	4b81      	ldr	r3, [pc, #516]	; (8000e84 <MX_GPIO_Init+0x2e0>)
 8000c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c82:	4a80      	ldr	r2, [pc, #512]	; (8000e84 <MX_GPIO_Init+0x2e0>)
 8000c84:	f043 0320 	orr.w	r3, r3, #32
 8000c88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c8a:	4b7e      	ldr	r3, [pc, #504]	; (8000e84 <MX_GPIO_Init+0x2e0>)
 8000c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8e:	f003 0320 	and.w	r3, r3, #32
 8000c92:	603b      	str	r3, [r7, #0]
 8000c94:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8000c96:	2200      	movs	r2, #0
 8000c98:	f244 0114 	movw	r1, #16404	; 0x4014
 8000c9c:	487a      	ldr	r0, [pc, #488]	; (8000e88 <MX_GPIO_Init+0x2e4>)
 8000c9e:	f001 fa3f 	bl	8002120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(JOY_SEL_GPIO_Port, JOY_SEL_Pin, GPIO_PIN_RESET);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ca8:	4878      	ldr	r0, [pc, #480]	; (8000e8c <MX_GPIO_Init+0x2e8>)
 8000caa:	f001 fa39 	bl	8002120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT_SIGNAL_GPIO_Port, DHT_SIGNAL_Pin, GPIO_PIN_RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cb4:	4876      	ldr	r0, [pc, #472]	; (8000e90 <MX_GPIO_Init+0x2ec>)
 8000cb6:	f001 fa33 	bl	8002120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2140      	movs	r1, #64	; 0x40
 8000cbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc2:	f001 fa2d 	bl	8002120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_Port, MFX_WAKEUP_Pin, GPIO_PIN_RESET);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2104      	movs	r1, #4
 8000cca:	4872      	ldr	r0, [pc, #456]	; (8000e94 <MX_GPIO_Init+0x2f0>)
 8000ccc:	f001 fa28 	bl	8002120 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OCTOSPIM_P2_IO1_Pin OCTOSPIM_P2_IO2_Pin OCTOSPIM_P2_CLK_Pin OCTOSPIM_P2_IO0_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO1_Pin|OCTOSPIM_P2_IO2_Pin|OCTOSPIM_P2_CLK_Pin|OCTOSPIM_P2_IO0_Pin;
 8000cd0:	f44f 6364 	mov.w	r3, #3648	; 0xe40
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000ce2:	2305      	movs	r3, #5
 8000ce4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ce6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cea:	4619      	mov	r1, r3
 8000cec:	486a      	ldr	r0, [pc, #424]	; (8000e98 <MX_GPIO_Init+0x2f4>)
 8000cee:	f001 f86d 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : MIC_VDD_Pin DSI_SPI_USART_CS_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin;
 8000cf2:	f244 0314 	movw	r3, #16404	; 0x4014
 8000cf6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d00:	2300      	movs	r3, #0
 8000d02:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d08:	4619      	mov	r1, r3
 8000d0a:	485f      	ldr	r0, [pc, #380]	; (8000e88 <MX_GPIO_Init+0x2e4>)
 8000d0c:	f001 f85e 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000d10:	2310      	movs	r3, #16
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d14:	2302      	movs	r3, #2
 8000d16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d20:	2302      	movs	r3, #2
 8000d22:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000d24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d28:	4619      	mov	r1, r3
 8000d2a:	485a      	ldr	r0, [pc, #360]	; (8000e94 <MX_GPIO_Init+0x2f0>)
 8000d2c:	f001 f84e 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D7_Pin DCMI_D5_Pin DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 8000d30:	23b0      	movs	r3, #176	; 0xb0
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d34:	2302      	movs	r3, #2
 8000d36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000d40:	230a      	movs	r3, #10
 8000d42:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000d44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4853      	ldr	r0, [pc, #332]	; (8000e98 <MX_GPIO_Init+0x2f4>)
 8000d4c:	f001 f83e 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOSPIM_P2_IO6_Pin OCTOSPIM_P2_DQS_Pin OCTOSPIM_P2_IO7_Pin OCTOSPIM_P2_CS_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO6_Pin|OCTOSPIM_P2_DQS_Pin|OCTOSPIM_P2_IO7_Pin|OCTOSPIM_P2_CS_Pin;
 8000d50:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d56:	2302      	movs	r3, #2
 8000d58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000d62:	2305      	movs	r3, #5
 8000d64:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4848      	ldr	r0, [pc, #288]	; (8000e90 <MX_GPIO_Init+0x2ec>)
 8000d6e:	f001 f82d 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 8000d72:	2302      	movs	r3, #2
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d76:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8000d80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d84:	4619      	mov	r1, r3
 8000d86:	4844      	ldr	r0, [pc, #272]	; (8000e98 <MX_GPIO_Init+0x2f4>)
 8000d88:	f001 f820 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D3_Pin DCMI_PIXCLK_Pin DCMI_D2_Pin */
  GPIO_InitStruct.Pin = DCMI_D3_Pin|DCMI_PIXCLK_Pin|DCMI_D2_Pin;
 8000d8c:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	2302      	movs	r3, #2
 8000d94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000d9e:	230a      	movs	r3, #10
 8000da0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000da2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da6:	4619      	mov	r1, r3
 8000da8:	4837      	ldr	r0, [pc, #220]	; (8000e88 <MX_GPIO_Init+0x2e4>)
 8000daa:	f001 f80f 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 8000dae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000db2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db4:	2302      	movs	r3, #2
 8000db6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8000dc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc8:	4619      	mov	r1, r3
 8000dca:	482f      	ldr	r0, [pc, #188]	; (8000e88 <MX_GPIO_Init+0x2e4>)
 8000dcc:	f000 fffe 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOPSIM_P2_IO4_Pin OCTOSPIM_P2_IO5_Pin OCTOSPI_P2_IO3_Pin */
  GPIO_InitStruct.Pin = OCTOPSIM_P2_IO4_Pin|OCTOSPIM_P2_IO5_Pin|OCTOSPI_P2_IO3_Pin;
 8000dd0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dde:	2303      	movs	r3, #3
 8000de0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000de2:	2305      	movs	r3, #5
 8000de4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000de6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dea:	4619      	mov	r1, r3
 8000dec:	4826      	ldr	r0, [pc, #152]	; (8000e88 <MX_GPIO_Init+0x2e4>)
 8000dee:	f000 ffed 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_SEL_Pin */
  GPIO_InitStruct.Pin = JOY_SEL_Pin;
 8000df2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000df6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e00:	2300      	movs	r3, #0
 8000e02:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(JOY_SEL_GPIO_Port, &GPIO_InitStruct);
 8000e04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4820      	ldr	r0, [pc, #128]	; (8000e8c <MX_GPIO_Init+0x2e8>)
 8000e0c:	f000 ffde 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT_SIGNAL_Pin */
  GPIO_InitStruct.Pin = DHT_SIGNAL_Pin;
 8000e10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e16:	2301      	movs	r3, #1
 8000e18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DHT_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 8000e22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e26:	4619      	mov	r1, r3
 8000e28:	4819      	ldr	r0, [pc, #100]	; (8000e90 <MX_GPIO_Init+0x2ec>)
 8000e2a:	f000 ffcf 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_14_Pin ARD_15_Pin */
  GPIO_InitStruct.Pin = ARD_14_Pin|ARD_15_Pin;
 8000e2e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000e32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e34:	2312      	movs	r3, #18
 8000e36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e40:	2304      	movs	r3, #4
 8000e42:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4811      	ldr	r0, [pc, #68]	; (8000e90 <MX_GPIO_Init+0x2ec>)
 8000e4c:	f000 ffbe 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_INT_Pin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
 8000e50:	2340      	movs	r3, #64	; 0x40
 8000e52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e54:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 8000e5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e62:	4619      	mov	r1, r3
 8000e64:	4809      	ldr	r0, [pc, #36]	; (8000e8c <MX_GPIO_Init+0x2e8>)
 8000e66:	f000 ffb1 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : DFDATIN3_Pin DF_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFDATIN3_Pin|DF_CKOUT_Pin;
 8000e6a:	2384      	movs	r3, #132	; 0x84
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e76:	2300      	movs	r3, #0
 8000e78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000e7a:	2306      	movs	r3, #6
 8000e7c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e82:	e00b      	b.n	8000e9c <MX_GPIO_Init+0x2f8>
 8000e84:	40021000 	.word	0x40021000
 8000e88:	48001c00 	.word	0x48001c00
 8000e8c:	48000800 	.word	0x48000800
 8000e90:	48001800 	.word	0x48001800
 8000e94:	48000400 	.word	0x48000400
 8000e98:	48002000 	.word	0x48002000
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4857      	ldr	r0, [pc, #348]	; (8000ffc <MX_GPIO_Init+0x458>)
 8000ea0:	f000 ff94 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D0_Pin ARD_D1_Pin */
  GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000eb4:	2308      	movs	r3, #8
 8000eb6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	484f      	ldr	r0, [pc, #316]	; (8000ffc <MX_GPIO_Init+0x458>)
 8000ec0:	f000 ff84 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A2_Pin ARD_A1_Pin */
  GPIO_InitStruct.Pin = ARD_A2_Pin|ARD_A1_Pin;
 8000ec4:	2318      	movs	r3, #24
 8000ec6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ec8:	230b      	movs	r3, #11
 8000eca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4849      	ldr	r0, [pc, #292]	; (8000ffc <MX_GPIO_Init+0x458>)
 8000ed8:	f000 ff78 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A4_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A4_Pin|ARD_A0_Pin;
 8000edc:	2381      	movs	r3, #129	; 0x81
 8000ede:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ee0:	230b      	movs	r3, #11
 8000ee2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eec:	4619      	mov	r1, r3
 8000eee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef2:	f000 ff6b 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_PWM_Pin */
  GPIO_InitStruct.Pin = STMOD_PWM_Pin;
 8000ef6:	2320      	movs	r3, #32
 8000ef8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efa:	2302      	movs	r3, #2
 8000efc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f02:	2300      	movs	r3, #0
 8000f04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f06:	2301      	movs	r3, #1
 8000f08:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(STMOD_PWM_GPIO_Port, &GPIO_InitStruct);
 8000f0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f0e:	4619      	mov	r1, r3
 8000f10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f14:	f000 ff5a 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8000f18:	2340      	movs	r3, #64	; 0x40
 8000f1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f24:	2300      	movs	r3, #0
 8000f26:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8000f28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f32:	f000 ff4b 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8000f36:	2302      	movs	r3, #2
 8000f38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f42:	2300      	movs	r3, #0
 8000f44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000f46:	2302      	movs	r3, #2
 8000f48:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8000f4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f4e:	4619      	mov	r1, r3
 8000f50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f54:	f000 ff3a 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_TE_Pin */
  GPIO_InitStruct.Pin = DSI_TE_Pin;
 8000f58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f66:	2300      	movs	r3, #0
 8000f68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_DSI;
 8000f6a:	230b      	movs	r3, #11
 8000f6c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 8000f6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f72:	4619      	mov	r1, r3
 8000f74:	4822      	ldr	r0, [pc, #136]	; (8001000 <MX_GPIO_Init+0x45c>)
 8000f76:	f000 ff29 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_HSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin;
 8000f7a:	2310      	movs	r3, #16
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	2300      	movs	r3, #0
 8000f88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000f8a:	230a      	movs	r3, #10
 8000f8c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DCMI_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8000f8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f92:	4619      	mov	r1, r3
 8000f94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f98:	f000 ff18 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_A3_Pin */
  GPIO_InitStruct.Pin = ARD_A3_Pin;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000fa0:	230b      	movs	r3, #11
 8000fa2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 8000fa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fac:	4619      	mov	r1, r3
 8000fae:	4815      	ldr	r0, [pc, #84]	; (8001004 <MX_GPIO_Init+0x460>)
 8000fb0:	f000 ff0c 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_WAKEUP_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8000fb4:	2304      	movs	r3, #4
 8000fb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000fc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc8:	4619      	mov	r1, r3
 8000fca:	480e      	ldr	r0, [pc, #56]	; (8001004 <MX_GPIO_Init+0x460>)
 8000fcc:	f000 fefe 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : DFDATIN1_Pin */
  GPIO_InitStruct.Pin = DFDATIN1_Pin;
 8000fd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000fe2:	2306      	movs	r3, #6
 8000fe4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 8000fe6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fea:	4619      	mov	r1, r3
 8000fec:	4805      	ldr	r0, [pc, #20]	; (8001004 <MX_GPIO_Init+0x460>)
 8000fee:	f000 feed 	bl	8001dcc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ff2:	bf00      	nop
 8000ff4:	3738      	adds	r7, #56	; 0x38
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	48000800 	.word	0x48000800
 8001000:	48001400 	.word	0x48001400
 8001004:	48000400 	.word	0x48000400

08001008 <delay_us>:

/* USER CODE BEGIN 4 */

void delay_us (uint16_t us){
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  			 // set the counter value a 0
 8001012:	4b09      	ldr	r3, [pc, #36]	; (8001038 <delay_us+0x30>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2200      	movs	r2, #0
 8001018:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the microsecond (us) input
 800101a:	bf00      	nop
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <delay_us+0x30>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001022:	88fb      	ldrh	r3, [r7, #6]
 8001024:	429a      	cmp	r2, r3
 8001026:	d3f9      	bcc.n	800101c <delay_us+0x14>
}
 8001028:	bf00      	nop
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	200001f4 	.word	0x200001f4

0800103c <setPinOutput>:

void setPinOutput(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 800103c:	b580      	push	{r7, lr}
 800103e:	b088      	sub	sp, #32
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	460b      	mov	r3, r1
 8001046:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	f107 030c 	add.w	r3, r7, #12
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001058:	887b      	ldrh	r3, [r7, #2]
 800105a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105c:	2301      	movs	r3, #1
 800105e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001060:	2300      	movs	r3, #0
 8001062:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001064:	f107 030c 	add.w	r3, r7, #12
 8001068:	4619      	mov	r1, r3
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f000 feae 	bl	8001dcc <HAL_GPIO_Init>
}
 8001070:	bf00      	nop
 8001072:	3720      	adds	r7, #32
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <setPinInput>:

void setPinInput(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8001078:	b580      	push	{r7, lr}
 800107a:	b088      	sub	sp, #32
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	460b      	mov	r3, r1
 8001082:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 030c 	add.w	r3, r7, #12
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001094:	887b      	ldrh	r3, [r7, #2]
 8001096:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001098:	2300      	movs	r3, #0
 800109a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800109c:	2301      	movs	r3, #1
 800109e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80010a0:	f107 030c 	add.w	r3, r7, #12
 80010a4:	4619      	mov	r1, r3
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f000 fe90 	bl	8001dcc <HAL_GPIO_Init>
}
 80010ac:	bf00      	nop
 80010ae:	3720      	adds	r7, #32
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <dht11Start>:

void dht11Start(void){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
	setPinOutput(DHT_SIGNAL_GPIO_Port, DHT_SIGNAL_Pin);
 80010b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010bc:	480e      	ldr	r0, [pc, #56]	; (80010f8 <dht11Start+0x44>)
 80010be:	f7ff ffbd 	bl	800103c <setPinOutput>
	HAL_GPIO_WritePin(DHT_SIGNAL_GPIO_Port, DHT_SIGNAL_Pin, 0);   // Pull pin low
 80010c2:	2200      	movs	r2, #0
 80010c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010c8:	480b      	ldr	r0, [pc, #44]	; (80010f8 <dht11Start+0x44>)
 80010ca:	f001 f829 	bl	8002120 <HAL_GPIO_WritePin>
	delay_us(18000);	// 18 ms
 80010ce:	f244 6050 	movw	r0, #18000	; 0x4650
 80010d2:	f7ff ff99 	bl	8001008 <delay_us>
	HAL_GPIO_WritePin(DHT_SIGNAL_GPIO_Port, DHT_SIGNAL_Pin, 1);   // Pull pin high
 80010d6:	2201      	movs	r2, #1
 80010d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010dc:	4806      	ldr	r0, [pc, #24]	; (80010f8 <dht11Start+0x44>)
 80010de:	f001 f81f 	bl	8002120 <HAL_GPIO_WritePin>
	delay_us(20);		// 20 us
 80010e2:	2014      	movs	r0, #20
 80010e4:	f7ff ff90 	bl	8001008 <delay_us>
	setPinInput(DHT_SIGNAL_GPIO_Port, DHT_SIGNAL_Pin);
 80010e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010ec:	4802      	ldr	r0, [pc, #8]	; (80010f8 <dht11Start+0x44>)
 80010ee:	f7ff ffc3 	bl	8001078 <setPinInput>
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	48001800 	.word	0x48001800

080010fc <dht11CheckResponse>:

uint8_t dht11CheckResponse(void){
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	71fb      	strb	r3, [r7, #7]
	delay_us(40);		// 40 us
 8001106:	2028      	movs	r0, #40	; 0x28
 8001108:	f7ff ff7e 	bl	8001008 <delay_us>
	if (!(HAL_GPIO_ReadPin(DHT_SIGNAL_GPIO_Port, DHT_SIGNAL_Pin))){
 800110c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001110:	4811      	ldr	r0, [pc, #68]	; (8001158 <dht11CheckResponse+0x5c>)
 8001112:	f000 ffed 	bl	80020f0 <HAL_GPIO_ReadPin>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d10f      	bne.n	800113c <dht11CheckResponse+0x40>
		delay_us(80);
 800111c:	2050      	movs	r0, #80	; 0x50
 800111e:	f7ff ff73 	bl	8001008 <delay_us>
		if ((HAL_GPIO_ReadPin(DHT_SIGNAL_GPIO_Port, DHT_SIGNAL_Pin))) Response = 1;
 8001122:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001126:	480c      	ldr	r0, [pc, #48]	; (8001158 <dht11CheckResponse+0x5c>)
 8001128:	f000 ffe2 	bl	80020f0 <HAL_GPIO_ReadPin>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d002      	beq.n	8001138 <dht11CheckResponse+0x3c>
 8001132:	2301      	movs	r3, #1
 8001134:	71fb      	strb	r3, [r7, #7]
 8001136:	e001      	b.n	800113c <dht11CheckResponse+0x40>
		else Response = -1;
 8001138:	23ff      	movs	r3, #255	; 0xff
 800113a:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin(DHT_SIGNAL_GPIO_Port, DHT_SIGNAL_Pin)));   // Wait for pin to go low
 800113c:	bf00      	nop
 800113e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001142:	4805      	ldr	r0, [pc, #20]	; (8001158 <dht11CheckResponse+0x5c>)
 8001144:	f000 ffd4 	bl	80020f0 <HAL_GPIO_ReadPin>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d1f7      	bne.n	800113e <dht11CheckResponse+0x42>
	return Response;
 800114e:	79fb      	ldrb	r3, [r7, #7]
}
 8001150:	4618      	mov	r0, r3
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	48001800 	.word	0x48001800

0800115c <dht11Read>:

uint8_t dht11Read(void){
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++){
 8001162:	2300      	movs	r3, #0
 8001164:	71bb      	strb	r3, [r7, #6]
 8001166:	bf00      	nop
 8001168:	79bb      	ldrb	r3, [r7, #6]
 800116a:	2b07      	cmp	r3, #7
 800116c:	d839      	bhi.n	80011e2 <dht11Read+0x86>
		while (!(HAL_GPIO_ReadPin(DHT_SIGNAL_GPIO_Port, DHT_SIGNAL_Pin)));   // wait for pin to go high
 800116e:	bf00      	nop
 8001170:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001174:	481d      	ldr	r0, [pc, #116]	; (80011ec <dht11Read+0x90>)
 8001176:	f000 ffbb 	bl	80020f0 <HAL_GPIO_ReadPin>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d0f7      	beq.n	8001170 <dht11Read+0x14>
		delay_us(40);		   // 40 us
 8001180:	2028      	movs	r0, #40	; 0x28
 8001182:	f7ff ff41 	bl	8001008 <delay_us>
		if (!(HAL_GPIO_ReadPin(DHT_SIGNAL_GPIO_Port, DHT_SIGNAL_Pin))){		 // if the pin is low
 8001186:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800118a:	4818      	ldr	r0, [pc, #96]	; (80011ec <dht11Read+0x90>)
 800118c:	f000 ffb0 	bl	80020f0 <HAL_GPIO_ReadPin>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d10e      	bne.n	80011b4 <dht11Read+0x58>
			i&= ~(1<<(7-j));   // write 0
 8001196:	79bb      	ldrb	r3, [r7, #6]
 8001198:	f1c3 0307 	rsb	r3, r3, #7
 800119c:	2201      	movs	r2, #1
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	b25b      	sxtb	r3, r3
 80011a4:	43db      	mvns	r3, r3
 80011a6:	b25a      	sxtb	r2, r3
 80011a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ac:	4013      	ands	r3, r2
 80011ae:	b25b      	sxtb	r3, r3
 80011b0:	71fb      	strb	r3, [r7, #7]
 80011b2:	e014      	b.n	80011de <dht11Read+0x82>
		} else {
			i|= (1<<(7-j));    // write 1
 80011b4:	79bb      	ldrb	r3, [r7, #6]
 80011b6:	f1c3 0307 	rsb	r3, r3, #7
 80011ba:	2201      	movs	r2, #1
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	b25a      	sxtb	r2, r3
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	b25b      	sxtb	r3, r3
 80011ca:	71fb      	strb	r3, [r7, #7]
			while ((HAL_GPIO_ReadPin (DHT_SIGNAL_GPIO_Port, DHT_SIGNAL_Pin)));  // wait for  pin to go low
 80011cc:	bf00      	nop
 80011ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011d2:	4806      	ldr	r0, [pc, #24]	; (80011ec <dht11Read+0x90>)
 80011d4:	f000 ff8c 	bl	80020f0 <HAL_GPIO_ReadPin>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d1f7      	bne.n	80011ce <dht11Read+0x72>
		}
		return i;
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	e7ff      	b.n	80011e2 <dht11Read+0x86>
	}
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	48001800 	.word	0x48001800

080011f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f4:	b672      	cpsid	i
}
 80011f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <Error_Handler+0x8>
	...

080011fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001202:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <HAL_MspInit+0x44>)
 8001204:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001206:	4a0e      	ldr	r2, [pc, #56]	; (8001240 <HAL_MspInit+0x44>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	6613      	str	r3, [r2, #96]	; 0x60
 800120e:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <HAL_MspInit+0x44>)
 8001210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800121a:	4b09      	ldr	r3, [pc, #36]	; (8001240 <HAL_MspInit+0x44>)
 800121c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800121e:	4a08      	ldr	r2, [pc, #32]	; (8001240 <HAL_MspInit+0x44>)
 8001220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001224:	6593      	str	r3, [r2, #88]	; 0x58
 8001226:	4b06      	ldr	r3, [pc, #24]	; (8001240 <HAL_MspInit+0x44>)
 8001228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800122a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122e:	603b      	str	r3, [r7, #0]
 8001230:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	40021000 	.word	0x40021000

08001244 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b0b2      	sub	sp, #200	; 0xc8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800125c:	f107 0318 	add.w	r3, r7, #24
 8001260:	229c      	movs	r2, #156	; 0x9c
 8001262:	2100      	movs	r1, #0
 8001264:	4618      	mov	r0, r3
 8001266:	f007 fdd1 	bl	8008e0c <memset>
  if(hi2c->Instance==I2C1)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a33      	ldr	r2, [pc, #204]	; (800133c <HAL_I2C_MspInit+0xf8>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d15e      	bne.n	8001332 <HAL_I2C_MspInit+0xee>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001274:	2340      	movs	r3, #64	; 0x40
 8001276:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001278:	2300      	movs	r3, #0
 800127a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800127c:	f107 0318 	add.w	r3, r7, #24
 8001280:	4618      	mov	r0, r3
 8001282:	f002 f997 	bl	80035b4 <HAL_RCCEx_PeriphCLKConfig>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800128c:	f7ff ffb0 	bl	80011f0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001290:	4b2b      	ldr	r3, [pc, #172]	; (8001340 <HAL_I2C_MspInit+0xfc>)
 8001292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001294:	4a2a      	ldr	r2, [pc, #168]	; (8001340 <HAL_I2C_MspInit+0xfc>)
 8001296:	f043 0302 	orr.w	r3, r3, #2
 800129a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800129c:	4b28      	ldr	r3, [pc, #160]	; (8001340 <HAL_I2C_MspInit+0xfc>)
 800129e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	617b      	str	r3, [r7, #20]
 80012a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80012a8:	4b25      	ldr	r3, [pc, #148]	; (8001340 <HAL_I2C_MspInit+0xfc>)
 80012aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ac:	4a24      	ldr	r2, [pc, #144]	; (8001340 <HAL_I2C_MspInit+0xfc>)
 80012ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012b4:	4b22      	ldr	r3, [pc, #136]	; (8001340 <HAL_I2C_MspInit+0xfc>)
 80012b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012bc:	613b      	str	r3, [r7, #16]
 80012be:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 80012c0:	f001 fa94 	bl	80027ec <HAL_PWREx_EnableVddIO2>
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PG13     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin;
 80012c4:	2340      	movs	r3, #64	; 0x40
 80012c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ca:	2312      	movs	r3, #18
 80012cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012d0:	2301      	movs	r3, #1
 80012d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d6:	2303      	movs	r3, #3
 80012d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012dc:	2304      	movs	r3, #4
 80012de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(I2C1_SCL_GPIO_Port, &GPIO_InitStruct);
 80012e2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80012e6:	4619      	mov	r1, r3
 80012e8:	4816      	ldr	r0, [pc, #88]	; (8001344 <HAL_I2C_MspInit+0x100>)
 80012ea:	f000 fd6f 	bl	8001dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C1_SDA_Pin;
 80012ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012f6:	2312      	movs	r3, #18
 80012f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012fc:	2301      	movs	r3, #1
 80012fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001302:	2303      	movs	r3, #3
 8001304:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001308:	2304      	movs	r3, #4
 800130a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(I2C1_SDA_GPIO_Port, &GPIO_InitStruct);
 800130e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001312:	4619      	mov	r1, r3
 8001314:	480c      	ldr	r0, [pc, #48]	; (8001348 <HAL_I2C_MspInit+0x104>)
 8001316:	f000 fd59 	bl	8001dcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800131a:	4b09      	ldr	r3, [pc, #36]	; (8001340 <HAL_I2C_MspInit+0xfc>)
 800131c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800131e:	4a08      	ldr	r2, [pc, #32]	; (8001340 <HAL_I2C_MspInit+0xfc>)
 8001320:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001324:	6593      	str	r3, [r2, #88]	; 0x58
 8001326:	4b06      	ldr	r3, [pc, #24]	; (8001340 <HAL_I2C_MspInit+0xfc>)
 8001328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800132a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001332:	bf00      	nop
 8001334:	37c8      	adds	r7, #200	; 0xc8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40005400 	.word	0x40005400
 8001340:	40021000 	.word	0x40021000
 8001344:	48000400 	.word	0x48000400
 8001348:	48001800 	.word	0x48001800

0800134c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b0b2      	sub	sp, #200	; 0xc8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001364:	f107 0318 	add.w	r3, r7, #24
 8001368:	229c      	movs	r2, #156	; 0x9c
 800136a:	2100      	movs	r1, #0
 800136c:	4618      	mov	r0, r3
 800136e:	f007 fd4d 	bl	8008e0c <memset>
  if(hsd->Instance==SDMMC1)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a33      	ldr	r2, [pc, #204]	; (8001444 <HAL_SD_MspInit+0xf8>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d15f      	bne.n	800143c <HAL_SD_MspInit+0xf0>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 800137c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001380:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 8001382:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001386:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800138a:	f107 0318 	add.w	r3, r7, #24
 800138e:	4618      	mov	r0, r3
 8001390:	f002 f910 	bl	80035b4 <HAL_RCCEx_PeriphCLKConfig>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 800139a:	f7ff ff29 	bl	80011f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800139e:	4b2a      	ldr	r3, [pc, #168]	; (8001448 <HAL_SD_MspInit+0xfc>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a2:	4a29      	ldr	r2, [pc, #164]	; (8001448 <HAL_SD_MspInit+0xfc>)
 80013a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013aa:	4b27      	ldr	r3, [pc, #156]	; (8001448 <HAL_SD_MspInit+0xfc>)
 80013ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013b2:	617b      	str	r3, [r7, #20]
 80013b4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013b6:	4b24      	ldr	r3, [pc, #144]	; (8001448 <HAL_SD_MspInit+0xfc>)
 80013b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ba:	4a23      	ldr	r2, [pc, #140]	; (8001448 <HAL_SD_MspInit+0xfc>)
 80013bc:	f043 0308 	orr.w	r3, r3, #8
 80013c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c2:	4b21      	ldr	r3, [pc, #132]	; (8001448 <HAL_SD_MspInit+0xfc>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c6:	f003 0308 	and.w	r3, r3, #8
 80013ca:	613b      	str	r3, [r7, #16]
 80013cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ce:	4b1e      	ldr	r3, [pc, #120]	; (8001448 <HAL_SD_MspInit+0xfc>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d2:	4a1d      	ldr	r2, [pc, #116]	; (8001448 <HAL_SD_MspInit+0xfc>)
 80013d4:	f043 0304 	orr.w	r3, r3, #4
 80013d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013da:	4b1b      	ldr	r3, [pc, #108]	; (8001448 <HAL_SD_MspInit+0xfc>)
 80013dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013de:	f003 0304 	and.w	r3, r3, #4
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 80013e6:	2304      	movs	r3, #4
 80013e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ec:	2302      	movs	r3, #2
 80013ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f8:	2303      	movs	r3, #3
 80013fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80013fe:	230c      	movs	r3, #12
 8001400:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8001404:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001408:	4619      	mov	r1, r3
 800140a:	4810      	ldr	r0, [pc, #64]	; (800144c <HAL_SD_MspInit+0x100>)
 800140c:	f000 fcde 	bl	8001dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D0_Pin
 8001410:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001414:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                          |uSD_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001418:	2302      	movs	r3, #2
 800141a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001424:	2303      	movs	r3, #3
 8001426:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800142a:	230c      	movs	r3, #12
 800142c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001430:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001434:	4619      	mov	r1, r3
 8001436:	4806      	ldr	r0, [pc, #24]	; (8001450 <HAL_SD_MspInit+0x104>)
 8001438:	f000 fcc8 	bl	8001dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800143c:	bf00      	nop
 800143e:	37c8      	adds	r7, #200	; 0xc8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	50062400 	.word	0x50062400
 8001448:	40021000 	.word	0x40021000
 800144c:	48000c00 	.word	0x48000c00
 8001450:	48000800 	.word	0x48000800

08001454 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08a      	sub	sp, #40	; 0x28
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145c:	f107 0314 	add.w	r3, r7, #20
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a25      	ldr	r2, [pc, #148]	; (8001508 <HAL_SPI_MspInit+0xb4>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d144      	bne.n	8001500 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001476:	4b25      	ldr	r3, [pc, #148]	; (800150c <HAL_SPI_MspInit+0xb8>)
 8001478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800147a:	4a24      	ldr	r2, [pc, #144]	; (800150c <HAL_SPI_MspInit+0xb8>)
 800147c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001480:	6593      	str	r3, [r2, #88]	; 0x58
 8001482:	4b22      	ldr	r3, [pc, #136]	; (800150c <HAL_SPI_MspInit+0xb8>)
 8001484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800148e:	4b1f      	ldr	r3, [pc, #124]	; (800150c <HAL_SPI_MspInit+0xb8>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001492:	4a1e      	ldr	r2, [pc, #120]	; (800150c <HAL_SPI_MspInit+0xb8>)
 8001494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001498:	64d3      	str	r3, [r2, #76]	; 0x4c
 800149a:	4b1c      	ldr	r3, [pc, #112]	; (800150c <HAL_SPI_MspInit+0xb8>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a6:	4b19      	ldr	r3, [pc, #100]	; (800150c <HAL_SPI_MspInit+0xb8>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014aa:	4a18      	ldr	r2, [pc, #96]	; (800150c <HAL_SPI_MspInit+0xb8>)
 80014ac:	f043 0302 	orr.w	r3, r3, #2
 80014b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b2:	4b16      	ldr	r3, [pc, #88]	; (800150c <HAL_SPI_MspInit+0xb8>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	68bb      	ldr	r3, [r7, #8]
    PI0     ------> SPI2_NSS
    PB15     ------> SPI2_MOSI
    PB14     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = ARD_10_Pin;
 80014be:	2301      	movs	r3, #1
 80014c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ca:	2303      	movs	r3, #3
 80014cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014ce:	2305      	movs	r3, #5
 80014d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_10_GPIO_Port, &GPIO_InitStruct);
 80014d2:	f107 0314 	add.w	r3, r7, #20
 80014d6:	4619      	mov	r1, r3
 80014d8:	480d      	ldr	r0, [pc, #52]	; (8001510 <HAL_SPI_MspInit+0xbc>)
 80014da:	f000 fc77 	bl	8001dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_MOSI_Pin|SPI2_MISO_Pin|SPI2_CLK_Pin;
 80014de:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80014e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e4:	2302      	movs	r3, #2
 80014e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ec:	2303      	movs	r3, #3
 80014ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014f0:	2305      	movs	r3, #5
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	4619      	mov	r1, r3
 80014fa:	4806      	ldr	r0, [pc, #24]	; (8001514 <HAL_SPI_MspInit+0xc0>)
 80014fc:	f000 fc66 	bl	8001dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001500:	bf00      	nop
 8001502:	3728      	adds	r7, #40	; 0x28
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40003800 	.word	0x40003800
 800150c:	40021000 	.word	0x40021000
 8001510:	48002000 	.word	0x48002000
 8001514:	48000400 	.word	0x48000400

08001518 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a0a      	ldr	r2, [pc, #40]	; (8001550 <HAL_TIM_Base_MspInit+0x38>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d10b      	bne.n	8001542 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800152a:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <HAL_TIM_Base_MspInit+0x3c>)
 800152c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800152e:	4a09      	ldr	r2, [pc, #36]	; (8001554 <HAL_TIM_Base_MspInit+0x3c>)
 8001530:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001534:	6613      	str	r3, [r2, #96]	; 0x60
 8001536:	4b07      	ldr	r3, [pc, #28]	; (8001554 <HAL_TIM_Base_MspInit+0x3c>)
 8001538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800153a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001542:	bf00      	nop
 8001544:	3714      	adds	r7, #20
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	40012c00 	.word	0x40012c00
 8001554:	40021000 	.word	0x40021000

08001558 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b0b4      	sub	sp, #208	; 0xd0
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001560:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001570:	f107 0320 	add.w	r3, r7, #32
 8001574:	229c      	movs	r2, #156	; 0x9c
 8001576:	2100      	movs	r1, #0
 8001578:	4618      	mov	r0, r3
 800157a:	f007 fc47 	bl	8008e0c <memset>
  if(huart->Instance==USART2)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a54      	ldr	r2, [pc, #336]	; (80016d4 <HAL_UART_MspInit+0x17c>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d13c      	bne.n	8001602 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001588:	2302      	movs	r3, #2
 800158a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800158c:	2300      	movs	r3, #0
 800158e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001590:	f107 0320 	add.w	r3, r7, #32
 8001594:	4618      	mov	r0, r3
 8001596:	f002 f80d 	bl	80035b4 <HAL_RCCEx_PeriphCLKConfig>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80015a0:	f7ff fe26 	bl	80011f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015a4:	4b4c      	ldr	r3, [pc, #304]	; (80016d8 <HAL_UART_MspInit+0x180>)
 80015a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a8:	4a4b      	ldr	r2, [pc, #300]	; (80016d8 <HAL_UART_MspInit+0x180>)
 80015aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ae:	6593      	str	r3, [r2, #88]	; 0x58
 80015b0:	4b49      	ldr	r3, [pc, #292]	; (80016d8 <HAL_UART_MspInit+0x180>)
 80015b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b8:	61fb      	str	r3, [r7, #28]
 80015ba:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015bc:	4b46      	ldr	r3, [pc, #280]	; (80016d8 <HAL_UART_MspInit+0x180>)
 80015be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c0:	4a45      	ldr	r2, [pc, #276]	; (80016d8 <HAL_UART_MspInit+0x180>)
 80015c2:	f043 0301 	orr.w	r3, r3, #1
 80015c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015c8:	4b43      	ldr	r3, [pc, #268]	; (80016d8 <HAL_UART_MspInit+0x180>)
 80015ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015cc:	f003 0301 	and.w	r3, r3, #1
 80015d0:	61bb      	str	r3, [r7, #24]
 80015d2:	69bb      	ldr	r3, [r7, #24]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_TX_Pin;
 80015d4:	230c      	movs	r3, #12
 80015d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015da:	2302      	movs	r3, #2
 80015dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e6:	2303      	movs	r3, #3
 80015e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015ec:	2307      	movs	r3, #7
 80015ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80015f6:	4619      	mov	r1, r3
 80015f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015fc:	f000 fbe6 	bl	8001dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001600:	e063      	b.n	80016ca <HAL_UART_MspInit+0x172>
  else if(huart->Instance==USART3)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a35      	ldr	r2, [pc, #212]	; (80016dc <HAL_UART_MspInit+0x184>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d15e      	bne.n	80016ca <HAL_UART_MspInit+0x172>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800160c:	2304      	movs	r3, #4
 800160e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001610:	2300      	movs	r3, #0
 8001612:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001614:	f107 0320 	add.w	r3, r7, #32
 8001618:	4618      	mov	r0, r3
 800161a:	f001 ffcb 	bl	80035b4 <HAL_RCCEx_PeriphCLKConfig>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8001624:	f7ff fde4 	bl	80011f0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001628:	4b2b      	ldr	r3, [pc, #172]	; (80016d8 <HAL_UART_MspInit+0x180>)
 800162a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800162c:	4a2a      	ldr	r2, [pc, #168]	; (80016d8 <HAL_UART_MspInit+0x180>)
 800162e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001632:	6593      	str	r3, [r2, #88]	; 0x58
 8001634:	4b28      	ldr	r3, [pc, #160]	; (80016d8 <HAL_UART_MspInit+0x180>)
 8001636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001638:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800163c:	617b      	str	r3, [r7, #20]
 800163e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001640:	4b25      	ldr	r3, [pc, #148]	; (80016d8 <HAL_UART_MspInit+0x180>)
 8001642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001644:	4a24      	ldr	r2, [pc, #144]	; (80016d8 <HAL_UART_MspInit+0x180>)
 8001646:	f043 0301 	orr.w	r3, r3, #1
 800164a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800164c:	4b22      	ldr	r3, [pc, #136]	; (80016d8 <HAL_UART_MspInit+0x180>)
 800164e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	613b      	str	r3, [r7, #16]
 8001656:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001658:	4b1f      	ldr	r3, [pc, #124]	; (80016d8 <HAL_UART_MspInit+0x180>)
 800165a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165c:	4a1e      	ldr	r2, [pc, #120]	; (80016d8 <HAL_UART_MspInit+0x180>)
 800165e:	f043 0302 	orr.w	r3, r3, #2
 8001662:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001664:	4b1c      	ldr	r3, [pc, #112]	; (80016d8 <HAL_UART_MspInit+0x180>)
 8001666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART3_RTS_Pin;
 8001670:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001674:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001678:	2302      	movs	r3, #2
 800167a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001684:	2303      	movs	r3, #3
 8001686:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800168a:	2307      	movs	r3, #7
 800168c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(USART3_RTS_GPIO_Port, &GPIO_InitStruct);
 8001690:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001694:	4619      	mov	r1, r3
 8001696:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800169a:	f000 fb97 	bl	8001dcc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART3_RX_Pin|USART3_TX_Pin;
 800169e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80016a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a6:	2302      	movs	r3, #2
 80016a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b2:	2303      	movs	r3, #3
 80016b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016b8:	2307      	movs	r3, #7
 80016ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016be:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80016c2:	4619      	mov	r1, r3
 80016c4:	4806      	ldr	r0, [pc, #24]	; (80016e0 <HAL_UART_MspInit+0x188>)
 80016c6:	f000 fb81 	bl	8001dcc <HAL_GPIO_Init>
}
 80016ca:	bf00      	nop
 80016cc:	37d0      	adds	r7, #208	; 0xd0
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40004400 	.word	0x40004400
 80016d8:	40021000 	.word	0x40021000
 80016dc:	40004800 	.word	0x40004800
 80016e0:	48000400 	.word	0x48000400

080016e4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b0b2      	sub	sp, #200	; 0xc8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ec:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	60da      	str	r2, [r3, #12]
 80016fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016fc:	f107 0318 	add.w	r3, r7, #24
 8001700:	229c      	movs	r2, #156	; 0x9c
 8001702:	2100      	movs	r1, #0
 8001704:	4618      	mov	r0, r3
 8001706:	f007 fb81 	bl	8008e0c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001712:	d16c      	bne.n	80017ee <HAL_PCD_MspInit+0x10a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001714:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001718:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800171a:	2300      	movs	r3, #0
 800171c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001720:	f107 0318 	add.w	r3, r7, #24
 8001724:	4618      	mov	r0, r3
 8001726:	f001 ff45 	bl	80035b4 <HAL_RCCEx_PeriphCLKConfig>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001730:	f7ff fd5e 	bl	80011f0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001734:	4b30      	ldr	r3, [pc, #192]	; (80017f8 <HAL_PCD_MspInit+0x114>)
 8001736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001738:	4a2f      	ldr	r2, [pc, #188]	; (80017f8 <HAL_PCD_MspInit+0x114>)
 800173a:	f043 0301 	orr.w	r3, r3, #1
 800173e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001740:	4b2d      	ldr	r3, [pc, #180]	; (80017f8 <HAL_PCD_MspInit+0x114>)
 8001742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	617b      	str	r3, [r7, #20]
 800174a:	697b      	ldr	r3, [r7, #20]
    PA10     ------> USB_OTG_FS_ID
    PA12     ------> USB_OTG_FS_DP
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = USB_OTGFS_ID_Pin|USB_OTG_FS_DP_Pin|USB_OTGFS_DM_Pin;
 800174c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001750:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001754:	2302      	movs	r3, #2
 8001756:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001760:	2303      	movs	r3, #3
 8001762:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001766:	230a      	movs	r3, #10
 8001768:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001770:	4619      	mov	r1, r3
 8001772:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001776:	f000 fb29 	bl	8001dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTGFS_VBUS_Pin;
 800177a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800177e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001782:	2300      	movs	r3, #0
 8001784:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(USB_OTGFS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800178e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001792:	4619      	mov	r1, r3
 8001794:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001798:	f000 fb18 	bl	8001dcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800179c:	4b16      	ldr	r3, [pc, #88]	; (80017f8 <HAL_PCD_MspInit+0x114>)
 800179e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a0:	4a15      	ldr	r2, [pc, #84]	; (80017f8 <HAL_PCD_MspInit+0x114>)
 80017a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017a8:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <HAL_PCD_MspInit+0x114>)
 80017aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017b0:	613b      	str	r3, [r7, #16]
 80017b2:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017b4:	4b10      	ldr	r3, [pc, #64]	; (80017f8 <HAL_PCD_MspInit+0x114>)
 80017b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d114      	bne.n	80017ea <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017c0:	4b0d      	ldr	r3, [pc, #52]	; (80017f8 <HAL_PCD_MspInit+0x114>)
 80017c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c4:	4a0c      	ldr	r2, [pc, #48]	; (80017f8 <HAL_PCD_MspInit+0x114>)
 80017c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ca:	6593      	str	r3, [r2, #88]	; 0x58
 80017cc:	4b0a      	ldr	r3, [pc, #40]	; (80017f8 <HAL_PCD_MspInit+0x114>)
 80017ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 80017d8:	f000 fff8 	bl	80027cc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80017dc:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <HAL_PCD_MspInit+0x114>)
 80017de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e0:	4a05      	ldr	r2, [pc, #20]	; (80017f8 <HAL_PCD_MspInit+0x114>)
 80017e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017e6:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80017e8:	e001      	b.n	80017ee <HAL_PCD_MspInit+0x10a>
      HAL_PWREx_EnableVddUSB();
 80017ea:	f000 ffef 	bl	80027cc <HAL_PWREx_EnableVddUSB>
}
 80017ee:	bf00      	nop
 80017f0:	37c8      	adds	r7, #200	; 0xc8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40021000 	.word	0x40021000

080017fc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001802:	1d3b      	adds	r3, r7, #4
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001810:	4b32      	ldr	r3, [pc, #200]	; (80018dc <HAL_FMC_MspInit+0xe0>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d15d      	bne.n	80018d4 <HAL_FMC_MspInit+0xd8>
    return;
  }
  FMC_Initialized = 1;
 8001818:	4b30      	ldr	r3, [pc, #192]	; (80018dc <HAL_FMC_MspInit+0xe0>)
 800181a:	2201      	movs	r2, #1
 800181c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800181e:	4b30      	ldr	r3, [pc, #192]	; (80018e0 <HAL_FMC_MspInit+0xe4>)
 8001820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001822:	4a2f      	ldr	r2, [pc, #188]	; (80018e0 <HAL_FMC_MspInit+0xe4>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	6513      	str	r3, [r2, #80]	; 0x50
 800182a:	4b2d      	ldr	r3, [pc, #180]	; (80018e0 <HAL_FMC_MspInit+0xe4>)
 800182c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	603b      	str	r3, [r7, #0]
 8001834:	683b      	ldr	r3, [r7, #0]
  PF13   ------> FMC_A7
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|PSRAM_A20_Pin|PSRAM_A19_Pin
 8001836:	f64f 739b 	movw	r3, #65435	; 0xff9b
 800183a:	607b      	str	r3, [r7, #4]
                          |D7_Pin|D6_Pin|D12_Pin|D5_Pin
                          |D11_Pin|D4_Pin|D10_Pin|D9_Pin
                          |D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183c:	2302      	movs	r3, #2
 800183e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001844:	2303      	movs	r3, #3
 8001846:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001848:	230c      	movs	r3, #12
 800184a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800184c:	1d3b      	adds	r3, r7, #4
 800184e:	4619      	mov	r1, r3
 8001850:	4824      	ldr	r0, [pc, #144]	; (80018e4 <HAL_FMC_MspInit+0xe8>)
 8001852:	f000 fabb 	bl	8001dcc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|PSRAM_OE_Pin|D3_Pin|PSRAM_WE_Pin
 8001856:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 800185a:	607b      	str	r3, [r7, #4]
                          |PSRAM_WAIT_Pin|PSRAM_CLK_Pin|PSRAM_NE1_Pin|PSRAM_A18_Pin
                          |D1_Pin|D0_Pin|PSRAM_A17_Pin|PSRAM_A16_Pin
                          |D15_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185c:	2302      	movs	r3, #2
 800185e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001864:	2303      	movs	r3, #3
 8001866:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001868:	230c      	movs	r3, #12
 800186a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800186c:	1d3b      	adds	r3, r7, #4
 800186e:	4619      	mov	r1, r3
 8001870:	481d      	ldr	r0, [pc, #116]	; (80018e8 <HAL_FMC_MspInit+0xec>)
 8001872:	f000 faab 	bl	8001dcc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_ADV_Pin;
 8001876:	2380      	movs	r3, #128	; 0x80
 8001878:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187a:	2302      	movs	r3, #2
 800187c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001882:	2303      	movs	r3, #3
 8001884:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001886:	230c      	movs	r3, #12
 8001888:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PSRAM_ADV_GPIO_Port, &GPIO_InitStruct);
 800188a:	1d3b      	adds	r3, r7, #4
 800188c:	4619      	mov	r1, r3
 800188e:	4817      	ldr	r0, [pc, #92]	; (80018ec <HAL_FMC_MspInit+0xf0>)
 8001890:	f000 fa9c 	bl	8001dcc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 8001894:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001898:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189a:	2302      	movs	r3, #2
 800189c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a2:	2303      	movs	r3, #3
 80018a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018a6:	230c      	movs	r3, #12
 80018a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	4619      	mov	r1, r3
 80018ae:	4810      	ldr	r0, [pc, #64]	; (80018f0 <HAL_FMC_MspInit+0xf4>)
 80018b0:	f000 fa8c 	bl	8001dcc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A15_Pin|PSRAM_A11_Pin
 80018b4:	233f      	movs	r3, #63	; 0x3f
 80018b6:	607b      	str	r3, [r7, #4]
                          |PSRAM_A12_Pin|PSRAM_A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b8:	2302      	movs	r3, #2
 80018ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c0:	2303      	movs	r3, #3
 80018c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018c4:	230c      	movs	r3, #12
 80018c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018c8:	1d3b      	adds	r3, r7, #4
 80018ca:	4619      	mov	r1, r3
 80018cc:	4809      	ldr	r0, [pc, #36]	; (80018f4 <HAL_FMC_MspInit+0xf8>)
 80018ce:	f000 fa7d 	bl	8001dcc <HAL_GPIO_Init>
 80018d2:	e000      	b.n	80018d6 <HAL_FMC_MspInit+0xda>
    return;
 80018d4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80018d6:	3718      	adds	r7, #24
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	200008dc 	.word	0x200008dc
 80018e0:	40021000 	.word	0x40021000
 80018e4:	48001000 	.word	0x48001000
 80018e8:	48000c00 	.word	0x48000c00
 80018ec:	48000400 	.word	0x48000400
 80018f0:	48001400 	.word	0x48001400
 80018f4:	48001800 	.word	0x48001800

080018f8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001900:	f7ff ff7c 	bl	80017fc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001904:	bf00      	nop
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b0b0      	sub	sp, #192	; 0xc0
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001914:	f107 0310 	add.w	r3, r7, #16
 8001918:	229c      	movs	r2, #156	; 0x9c
 800191a:	2100      	movs	r1, #0
 800191c:	4618      	mov	r0, r3
 800191e:	f007 fa75 	bl	8008e0c <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a32      	ldr	r2, [pc, #200]	; (80019f0 <HAL_SAI_MspInit+0xe4>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d15d      	bne.n	80019e8 <HAL_SAI_MspInit+0xdc>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 800192c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001930:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8001932:	2300      	movs	r3, #0
 8001934:	67fb      	str	r3, [r7, #124]	; 0x7c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001936:	2301      	movs	r3, #1
 8001938:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800193a:	2301      	movs	r3, #1
 800193c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800193e:	2310      	movs	r3, #16
 8001940:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001942:	2302      	movs	r3, #2
 8001944:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001946:	2302      	movs	r3, #2
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800194a:	2302      	movs	r3, #2
 800194c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 800194e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001952:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001954:	f107 0310 	add.w	r3, r7, #16
 8001958:	4618      	mov	r0, r3
 800195a:	f001 fe2b 	bl	80035b4 <HAL_RCCEx_PeriphCLKConfig>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <HAL_SAI_MspInit+0x5c>
    {
      Error_Handler();
 8001964:	f7ff fc44 	bl	80011f0 <Error_Handler>
    }

    if (SAI1_client == 0)
 8001968:	4b22      	ldr	r3, [pc, #136]	; (80019f4 <HAL_SAI_MspInit+0xe8>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d10b      	bne.n	8001988 <HAL_SAI_MspInit+0x7c>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001970:	4b21      	ldr	r3, [pc, #132]	; (80019f8 <HAL_SAI_MspInit+0xec>)
 8001972:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001974:	4a20      	ldr	r2, [pc, #128]	; (80019f8 <HAL_SAI_MspInit+0xec>)
 8001976:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800197a:	6613      	str	r3, [r2, #96]	; 0x60
 800197c:	4b1e      	ldr	r3, [pc, #120]	; (80019f8 <HAL_SAI_MspInit+0xec>)
 800197e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001980:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 8001988:	4b1a      	ldr	r3, [pc, #104]	; (80019f4 <HAL_SAI_MspInit+0xe8>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	3301      	adds	r3, #1
 800198e:	4a19      	ldr	r2, [pc, #100]	; (80019f4 <HAL_SAI_MspInit+0xe8>)
 8001990:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PB9     ------> SAI1_FS_A
    PE6     ------> SAI1_SD_A
    PE5     ------> SAI1_SCK_A
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin|SAI1_FSA_Pin;
 8001992:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001996:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199a:	2302      	movs	r3, #2
 800199c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a6:	2300      	movs	r3, #0
 80019a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80019ac:	230d      	movs	r3, #13
 80019ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80019b6:	4619      	mov	r1, r3
 80019b8:	4810      	ldr	r0, [pc, #64]	; (80019fc <HAL_SAI_MspInit+0xf0>)
 80019ba:	f000 fa07 	bl	8001dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCKA_Pin|SAI1_SDA_Pin|SAI1_SCKA_Pin;
 80019be:	2364      	movs	r3, #100	; 0x64
 80019c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c4:	2302      	movs	r3, #2
 80019c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d0:	2300      	movs	r3, #0
 80019d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80019d6:	230d      	movs	r3, #13
 80019d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019dc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80019e0:	4619      	mov	r1, r3
 80019e2:	4807      	ldr	r0, [pc, #28]	; (8001a00 <HAL_SAI_MspInit+0xf4>)
 80019e4:	f000 f9f2 	bl	8001dcc <HAL_GPIO_Init>

    }
}
 80019e8:	bf00      	nop
 80019ea:	37c0      	adds	r7, #192	; 0xc0
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40015404 	.word	0x40015404
 80019f4:	200008e0 	.word	0x200008e0
 80019f8:	40021000 	.word	0x40021000
 80019fc:	48000400 	.word	0x48000400
 8001a00:	48001000 	.word	0x48001000

08001a04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a08:	e7fe      	b.n	8001a08 <NMI_Handler+0x4>

08001a0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a0e:	e7fe      	b.n	8001a0e <HardFault_Handler+0x4>

08001a10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a14:	e7fe      	b.n	8001a14 <MemManage_Handler+0x4>

08001a16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a16:	b480      	push	{r7}
 8001a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a1a:	e7fe      	b.n	8001a1a <BusFault_Handler+0x4>

08001a1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a20:	e7fe      	b.n	8001a20 <UsageFault_Handler+0x4>

08001a22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a22:	b480      	push	{r7}
 8001a24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a50:	f000 f892 	bl	8001b78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a54:	bf00      	nop
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a5c:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <SystemInit+0x20>)
 8001a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a62:	4a05      	ldr	r2, [pc, #20]	; (8001a78 <SystemInit+0x20>)
 8001a64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ab4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a80:	f7ff ffea 	bl	8001a58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a84:	480c      	ldr	r0, [pc, #48]	; (8001ab8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a86:	490d      	ldr	r1, [pc, #52]	; (8001abc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a88:	4a0d      	ldr	r2, [pc, #52]	; (8001ac0 <LoopForever+0xe>)
  movs r3, #0
 8001a8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a8c:	e002      	b.n	8001a94 <LoopCopyDataInit>

08001a8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a92:	3304      	adds	r3, #4

08001a94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a98:	d3f9      	bcc.n	8001a8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a9a:	4a0a      	ldr	r2, [pc, #40]	; (8001ac4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a9c:	4c0a      	ldr	r4, [pc, #40]	; (8001ac8 <LoopForever+0x16>)
  movs r3, #0
 8001a9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aa0:	e001      	b.n	8001aa6 <LoopFillZerobss>

08001aa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aa4:	3204      	adds	r2, #4

08001aa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aa8:	d3fb      	bcc.n	8001aa2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aaa:	f007 f9b7 	bl	8008e1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001aae:	f7fe fd23 	bl	80004f8 <main>

08001ab2 <LoopForever>:

LoopForever:
    b LoopForever
 8001ab2:	e7fe      	b.n	8001ab2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ab4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001ab8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001abc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001ac0:	08008efc 	.word	0x08008efc
  ldr r2, =_sbss
 8001ac4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001ac8:	200008e8 	.word	0x200008e8

08001acc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001acc:	e7fe      	b.n	8001acc <ADC1_IRQHandler>

08001ace <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b082      	sub	sp, #8
 8001ad2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ad8:	2003      	movs	r0, #3
 8001ada:	f000 f943 	bl	8001d64 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ade:	2000      	movs	r0, #0
 8001ae0:	f000 f80e 	bl	8001b00 <HAL_InitTick>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d002      	beq.n	8001af0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	71fb      	strb	r3, [r7, #7]
 8001aee:	e001      	b.n	8001af4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001af0:	f7ff fb84 	bl	80011fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001af4:	79fb      	ldrb	r3, [r7, #7]
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
	...

08001b00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b0c:	4b17      	ldr	r3, [pc, #92]	; (8001b6c <HAL_InitTick+0x6c>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d023      	beq.n	8001b5c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b14:	4b16      	ldr	r3, [pc, #88]	; (8001b70 <HAL_InitTick+0x70>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	4b14      	ldr	r3, [pc, #80]	; (8001b6c <HAL_InitTick+0x6c>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f000 f941 	bl	8001db2 <HAL_SYSTICK_Config>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d10f      	bne.n	8001b56 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2b0f      	cmp	r3, #15
 8001b3a:	d809      	bhi.n	8001b50 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	6879      	ldr	r1, [r7, #4]
 8001b40:	f04f 30ff 	mov.w	r0, #4294967295
 8001b44:	f000 f919 	bl	8001d7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b48:	4a0a      	ldr	r2, [pc, #40]	; (8001b74 <HAL_InitTick+0x74>)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6013      	str	r3, [r2, #0]
 8001b4e:	e007      	b.n	8001b60 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	73fb      	strb	r3, [r7, #15]
 8001b54:	e004      	b.n	8001b60 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	73fb      	strb	r3, [r7, #15]
 8001b5a:	e001      	b.n	8001b60 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000008 	.word	0x20000008
 8001b70:	20000000 	.word	0x20000000
 8001b74:	20000004 	.word	0x20000004

08001b78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b7c:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <HAL_IncTick+0x20>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	461a      	mov	r2, r3
 8001b82:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <HAL_IncTick+0x24>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4413      	add	r3, r2
 8001b88:	4a04      	ldr	r2, [pc, #16]	; (8001b9c <HAL_IncTick+0x24>)
 8001b8a:	6013      	str	r3, [r2, #0]
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	20000008 	.word	0x20000008
 8001b9c:	200008e4 	.word	0x200008e4

08001ba0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ba4:	4b03      	ldr	r3, [pc, #12]	; (8001bb4 <HAL_GetTick+0x14>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	200008e4 	.word	0x200008e4

08001bb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bc0:	f7ff ffee 	bl	8001ba0 <HAL_GetTick>
 8001bc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd0:	d005      	beq.n	8001bde <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001bd2:	4b0a      	ldr	r3, [pc, #40]	; (8001bfc <HAL_Delay+0x44>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	4413      	add	r3, r2
 8001bdc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bde:	bf00      	nop
 8001be0:	f7ff ffde 	bl	8001ba0 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d8f7      	bhi.n	8001be0 <HAL_Delay+0x28>
  {
  }
}
 8001bf0:	bf00      	nop
 8001bf2:	bf00      	nop
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20000008 	.word	0x20000008

08001c00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c10:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <__NVIC_SetPriorityGrouping+0x44>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c16:	68ba      	ldr	r2, [r7, #8]
 8001c18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c32:	4a04      	ldr	r2, [pc, #16]	; (8001c44 <__NVIC_SetPriorityGrouping+0x44>)
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	60d3      	str	r3, [r2, #12]
}
 8001c38:	bf00      	nop
 8001c3a:	3714      	adds	r7, #20
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	e000ed00 	.word	0xe000ed00

08001c48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c4c:	4b04      	ldr	r3, [pc, #16]	; (8001c60 <__NVIC_GetPriorityGrouping+0x18>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	0a1b      	lsrs	r3, r3, #8
 8001c52:	f003 0307 	and.w	r3, r3, #7
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	6039      	str	r1, [r7, #0]
 8001c6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	db0a      	blt.n	8001c8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	490c      	ldr	r1, [pc, #48]	; (8001cb0 <__NVIC_SetPriority+0x4c>)
 8001c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c82:	0112      	lsls	r2, r2, #4
 8001c84:	b2d2      	uxtb	r2, r2
 8001c86:	440b      	add	r3, r1
 8001c88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c8c:	e00a      	b.n	8001ca4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	4908      	ldr	r1, [pc, #32]	; (8001cb4 <__NVIC_SetPriority+0x50>)
 8001c94:	79fb      	ldrb	r3, [r7, #7]
 8001c96:	f003 030f 	and.w	r3, r3, #15
 8001c9a:	3b04      	subs	r3, #4
 8001c9c:	0112      	lsls	r2, r2, #4
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	440b      	add	r3, r1
 8001ca2:	761a      	strb	r2, [r3, #24]
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	e000e100 	.word	0xe000e100
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b089      	sub	sp, #36	; 0x24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	f1c3 0307 	rsb	r3, r3, #7
 8001cd2:	2b04      	cmp	r3, #4
 8001cd4:	bf28      	it	cs
 8001cd6:	2304      	movcs	r3, #4
 8001cd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	3304      	adds	r3, #4
 8001cde:	2b06      	cmp	r3, #6
 8001ce0:	d902      	bls.n	8001ce8 <NVIC_EncodePriority+0x30>
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	3b03      	subs	r3, #3
 8001ce6:	e000      	b.n	8001cea <NVIC_EncodePriority+0x32>
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cec:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43da      	mvns	r2, r3
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	401a      	ands	r2, r3
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d00:	f04f 31ff 	mov.w	r1, #4294967295
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0a:	43d9      	mvns	r1, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d10:	4313      	orrs	r3, r2
         );
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3724      	adds	r7, #36	; 0x24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
	...

08001d20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d30:	d301      	bcc.n	8001d36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d32:	2301      	movs	r3, #1
 8001d34:	e00f      	b.n	8001d56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d36:	4a0a      	ldr	r2, [pc, #40]	; (8001d60 <SysTick_Config+0x40>)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d3e:	210f      	movs	r1, #15
 8001d40:	f04f 30ff 	mov.w	r0, #4294967295
 8001d44:	f7ff ff8e 	bl	8001c64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d48:	4b05      	ldr	r3, [pc, #20]	; (8001d60 <SysTick_Config+0x40>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d4e:	4b04      	ldr	r3, [pc, #16]	; (8001d60 <SysTick_Config+0x40>)
 8001d50:	2207      	movs	r2, #7
 8001d52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	e000e010 	.word	0xe000e010

08001d64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f7ff ff47 	bl	8001c00 <__NVIC_SetPriorityGrouping>
}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b086      	sub	sp, #24
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	4603      	mov	r3, r0
 8001d82:	60b9      	str	r1, [r7, #8]
 8001d84:	607a      	str	r2, [r7, #4]
 8001d86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d8c:	f7ff ff5c 	bl	8001c48 <__NVIC_GetPriorityGrouping>
 8001d90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	68b9      	ldr	r1, [r7, #8]
 8001d96:	6978      	ldr	r0, [r7, #20]
 8001d98:	f7ff ff8e 	bl	8001cb8 <NVIC_EncodePriority>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001da2:	4611      	mov	r1, r2
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff ff5d 	bl	8001c64 <__NVIC_SetPriority>
}
 8001daa:	bf00      	nop
 8001dac:	3718      	adds	r7, #24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b082      	sub	sp, #8
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7ff ffb0 	bl	8001d20 <SysTick_Config>
 8001dc0:	4603      	mov	r3, r0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
	...

08001dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b087      	sub	sp, #28
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dda:	e166      	b.n	80020aa <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	2101      	movs	r1, #1
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	fa01 f303 	lsl.w	r3, r1, r3
 8001de8:	4013      	ands	r3, r2
 8001dea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f000 8158 	beq.w	80020a4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f003 0303 	and.w	r3, r3, #3
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d005      	beq.n	8001e0c <HAL_GPIO_Init+0x40>
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 0303 	and.w	r3, r3, #3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d130      	bne.n	8001e6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	2203      	movs	r2, #3
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	4013      	ands	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	68da      	ldr	r2, [r3, #12]
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e42:	2201      	movs	r2, #1
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	091b      	lsrs	r3, r3, #4
 8001e58:	f003 0201 	and.w	r2, r3, #1
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f003 0303 	and.w	r3, r3, #3
 8001e76:	2b03      	cmp	r3, #3
 8001e78:	d017      	beq.n	8001eaa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	2203      	movs	r2, #3
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	689a      	ldr	r2, [r3, #8]
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f003 0303 	and.w	r3, r3, #3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d123      	bne.n	8001efe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	08da      	lsrs	r2, r3, #3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	3208      	adds	r2, #8
 8001ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	220f      	movs	r2, #15
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	691a      	ldr	r2, [r3, #16]
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	f003 0307 	and.w	r3, r3, #7
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	08da      	lsrs	r2, r3, #3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3208      	adds	r2, #8
 8001ef8:	6939      	ldr	r1, [r7, #16]
 8001efa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	2203      	movs	r2, #3
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	4013      	ands	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f003 0203 	and.w	r2, r3, #3
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f000 80b2 	beq.w	80020a4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f40:	4b61      	ldr	r3, [pc, #388]	; (80020c8 <HAL_GPIO_Init+0x2fc>)
 8001f42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f44:	4a60      	ldr	r2, [pc, #384]	; (80020c8 <HAL_GPIO_Init+0x2fc>)
 8001f46:	f043 0301 	orr.w	r3, r3, #1
 8001f4a:	6613      	str	r3, [r2, #96]	; 0x60
 8001f4c:	4b5e      	ldr	r3, [pc, #376]	; (80020c8 <HAL_GPIO_Init+0x2fc>)
 8001f4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	60bb      	str	r3, [r7, #8]
 8001f56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f58:	4a5c      	ldr	r2, [pc, #368]	; (80020cc <HAL_GPIO_Init+0x300>)
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	089b      	lsrs	r3, r3, #2
 8001f5e:	3302      	adds	r3, #2
 8001f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	f003 0303 	and.w	r3, r3, #3
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	220f      	movs	r2, #15
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	43db      	mvns	r3, r3
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f82:	d02b      	beq.n	8001fdc <HAL_GPIO_Init+0x210>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a52      	ldr	r2, [pc, #328]	; (80020d0 <HAL_GPIO_Init+0x304>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d025      	beq.n	8001fd8 <HAL_GPIO_Init+0x20c>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a51      	ldr	r2, [pc, #324]	; (80020d4 <HAL_GPIO_Init+0x308>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d01f      	beq.n	8001fd4 <HAL_GPIO_Init+0x208>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a50      	ldr	r2, [pc, #320]	; (80020d8 <HAL_GPIO_Init+0x30c>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d019      	beq.n	8001fd0 <HAL_GPIO_Init+0x204>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a4f      	ldr	r2, [pc, #316]	; (80020dc <HAL_GPIO_Init+0x310>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d013      	beq.n	8001fcc <HAL_GPIO_Init+0x200>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a4e      	ldr	r2, [pc, #312]	; (80020e0 <HAL_GPIO_Init+0x314>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d00d      	beq.n	8001fc8 <HAL_GPIO_Init+0x1fc>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a4d      	ldr	r2, [pc, #308]	; (80020e4 <HAL_GPIO_Init+0x318>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d007      	beq.n	8001fc4 <HAL_GPIO_Init+0x1f8>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a4c      	ldr	r2, [pc, #304]	; (80020e8 <HAL_GPIO_Init+0x31c>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d101      	bne.n	8001fc0 <HAL_GPIO_Init+0x1f4>
 8001fbc:	2307      	movs	r3, #7
 8001fbe:	e00e      	b.n	8001fde <HAL_GPIO_Init+0x212>
 8001fc0:	2308      	movs	r3, #8
 8001fc2:	e00c      	b.n	8001fde <HAL_GPIO_Init+0x212>
 8001fc4:	2306      	movs	r3, #6
 8001fc6:	e00a      	b.n	8001fde <HAL_GPIO_Init+0x212>
 8001fc8:	2305      	movs	r3, #5
 8001fca:	e008      	b.n	8001fde <HAL_GPIO_Init+0x212>
 8001fcc:	2304      	movs	r3, #4
 8001fce:	e006      	b.n	8001fde <HAL_GPIO_Init+0x212>
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e004      	b.n	8001fde <HAL_GPIO_Init+0x212>
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	e002      	b.n	8001fde <HAL_GPIO_Init+0x212>
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e000      	b.n	8001fde <HAL_GPIO_Init+0x212>
 8001fdc:	2300      	movs	r3, #0
 8001fde:	697a      	ldr	r2, [r7, #20]
 8001fe0:	f002 0203 	and.w	r2, r2, #3
 8001fe4:	0092      	lsls	r2, r2, #2
 8001fe6:	4093      	lsls	r3, r2
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fee:	4937      	ldr	r1, [pc, #220]	; (80020cc <HAL_GPIO_Init+0x300>)
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	089b      	lsrs	r3, r3, #2
 8001ff4:	3302      	adds	r3, #2
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ffc:	4b3b      	ldr	r3, [pc, #236]	; (80020ec <HAL_GPIO_Init+0x320>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	43db      	mvns	r3, r3
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	4013      	ands	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d003      	beq.n	8002020 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	4313      	orrs	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002020:	4a32      	ldr	r2, [pc, #200]	; (80020ec <HAL_GPIO_Init+0x320>)
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002026:	4b31      	ldr	r3, [pc, #196]	; (80020ec <HAL_GPIO_Init+0x320>)
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	43db      	mvns	r3, r3
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	4013      	ands	r3, r2
 8002034:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4313      	orrs	r3, r2
 8002048:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800204a:	4a28      	ldr	r2, [pc, #160]	; (80020ec <HAL_GPIO_Init+0x320>)
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002050:	4b26      	ldr	r3, [pc, #152]	; (80020ec <HAL_GPIO_Init+0x320>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	43db      	mvns	r3, r3
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	4013      	ands	r3, r2
 800205e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d003      	beq.n	8002074 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	4313      	orrs	r3, r2
 8002072:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002074:	4a1d      	ldr	r2, [pc, #116]	; (80020ec <HAL_GPIO_Init+0x320>)
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800207a:	4b1c      	ldr	r3, [pc, #112]	; (80020ec <HAL_GPIO_Init+0x320>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	43db      	mvns	r3, r3
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	4013      	ands	r3, r2
 8002088:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	4313      	orrs	r3, r2
 800209c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800209e:	4a13      	ldr	r2, [pc, #76]	; (80020ec <HAL_GPIO_Init+0x320>)
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	3301      	adds	r3, #1
 80020a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	fa22 f303 	lsr.w	r3, r2, r3
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f47f ae91 	bne.w	8001ddc <HAL_GPIO_Init+0x10>
  }
}
 80020ba:	bf00      	nop
 80020bc:	bf00      	nop
 80020be:	371c      	adds	r7, #28
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	40021000 	.word	0x40021000
 80020cc:	40010000 	.word	0x40010000
 80020d0:	48000400 	.word	0x48000400
 80020d4:	48000800 	.word	0x48000800
 80020d8:	48000c00 	.word	0x48000c00
 80020dc:	48001000 	.word	0x48001000
 80020e0:	48001400 	.word	0x48001400
 80020e4:	48001800 	.word	0x48001800
 80020e8:	48001c00 	.word	0x48001c00
 80020ec:	40010400 	.word	0x40010400

080020f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	460b      	mov	r3, r1
 80020fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	691a      	ldr	r2, [r3, #16]
 8002100:	887b      	ldrh	r3, [r7, #2]
 8002102:	4013      	ands	r3, r2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d002      	beq.n	800210e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002108:	2301      	movs	r3, #1
 800210a:	73fb      	strb	r3, [r7, #15]
 800210c:	e001      	b.n	8002112 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800210e:	2300      	movs	r3, #0
 8002110:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002112:	7bfb      	ldrb	r3, [r7, #15]
}
 8002114:	4618      	mov	r0, r3
 8002116:	3714      	adds	r7, #20
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	460b      	mov	r3, r1
 800212a:	807b      	strh	r3, [r7, #2]
 800212c:	4613      	mov	r3, r2
 800212e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002130:	787b      	ldrb	r3, [r7, #1]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002136:	887a      	ldrh	r2, [r7, #2]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800213c:	e002      	b.n	8002144 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800213e:	887a      	ldrh	r2, [r7, #2]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e08d      	b.n	800227e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b00      	cmp	r3, #0
 800216c:	d106      	bne.n	800217c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f7ff f864 	bl	8001244 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2224      	movs	r2, #36	; 0x24
 8002180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f022 0201 	bic.w	r2, r2, #1
 8002192:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021a0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	689a      	ldr	r2, [r3, #8]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021b0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d107      	bne.n	80021ca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	689a      	ldr	r2, [r3, #8]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021c6:	609a      	str	r2, [r3, #8]
 80021c8:	e006      	b.n	80021d8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	689a      	ldr	r2, [r3, #8]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80021d6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d108      	bne.n	80021f2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	685a      	ldr	r2, [r3, #4]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021ee:	605a      	str	r2, [r3, #4]
 80021f0:	e007      	b.n	8002202 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002200:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	6812      	ldr	r2, [r2, #0]
 800220c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002210:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002214:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68da      	ldr	r2, [r3, #12]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002224:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	691a      	ldr	r2, [r3, #16]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	430a      	orrs	r2, r1
 800223e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	69d9      	ldr	r1, [r3, #28]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a1a      	ldr	r2, [r3, #32]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f042 0201 	orr.w	r2, r2, #1
 800225e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2220      	movs	r2, #32
 800226a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002286:	b480      	push	{r7}
 8002288:	b083      	sub	sp, #12
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
 800228e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002296:	b2db      	uxtb	r3, r3
 8002298:	2b20      	cmp	r3, #32
 800229a:	d138      	bne.n	800230e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d101      	bne.n	80022aa <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80022a6:	2302      	movs	r3, #2
 80022a8:	e032      	b.n	8002310 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2201      	movs	r2, #1
 80022ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2224      	movs	r2, #36	; 0x24
 80022b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 0201 	bic.w	r2, r2, #1
 80022c8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80022d8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	6819      	ldr	r1, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f042 0201 	orr.w	r2, r2, #1
 80022f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2220      	movs	r2, #32
 80022fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800230a:	2300      	movs	r3, #0
 800230c:	e000      	b.n	8002310 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800230e:	2302      	movs	r3, #2
  }
}
 8002310:	4618      	mov	r0, r3
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b20      	cmp	r3, #32
 8002330:	d139      	bne.n	80023a6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002338:	2b01      	cmp	r3, #1
 800233a:	d101      	bne.n	8002340 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800233c:	2302      	movs	r3, #2
 800233e:	e033      	b.n	80023a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2224      	movs	r2, #36	; 0x24
 800234c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f022 0201 	bic.w	r2, r2, #1
 800235e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800236e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	021b      	lsls	r3, r3, #8
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	4313      	orrs	r3, r2
 8002378:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f042 0201 	orr.w	r2, r2, #1
 8002390:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2220      	movs	r2, #32
 8002396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80023a2:	2300      	movs	r3, #0
 80023a4:	e000      	b.n	80023a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80023a6:	2302      	movs	r3, #2
  }
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80023b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023b6:	b08f      	sub	sp, #60	; 0x3c
 80023b8:	af0a      	add	r7, sp, #40	; 0x28
 80023ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e116      	b.n	80025f4 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d106      	bne.n	80023e6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f7ff f97f 	bl	80016e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2203      	movs	r2, #3
 80023ea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d102      	bne.n	8002400 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f006 fa81 	bl	800890c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	603b      	str	r3, [r7, #0]
 8002410:	687e      	ldr	r6, [r7, #4]
 8002412:	466d      	mov	r5, sp
 8002414:	f106 0410 	add.w	r4, r6, #16
 8002418:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800241a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800241c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800241e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002420:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002424:	e885 0003 	stmia.w	r5, {r0, r1}
 8002428:	1d33      	adds	r3, r6, #4
 800242a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800242c:	6838      	ldr	r0, [r7, #0]
 800242e:	f006 fa41 	bl	80088b4 <USB_CoreInit>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d005      	beq.n	8002444 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2202      	movs	r2, #2
 800243c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e0d7      	b.n	80025f4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2100      	movs	r1, #0
 800244a:	4618      	mov	r0, r3
 800244c:	f006 fa6f 	bl	800892e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002450:	2300      	movs	r3, #0
 8002452:	73fb      	strb	r3, [r7, #15]
 8002454:	e04a      	b.n	80024ec <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002456:	7bfa      	ldrb	r2, [r7, #15]
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	4613      	mov	r3, r2
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	4413      	add	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	440b      	add	r3, r1
 8002464:	333d      	adds	r3, #61	; 0x3d
 8002466:	2201      	movs	r2, #1
 8002468:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800246a:	7bfa      	ldrb	r2, [r7, #15]
 800246c:	6879      	ldr	r1, [r7, #4]
 800246e:	4613      	mov	r3, r2
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	4413      	add	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	440b      	add	r3, r1
 8002478:	333c      	adds	r3, #60	; 0x3c
 800247a:	7bfa      	ldrb	r2, [r7, #15]
 800247c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800247e:	7bfa      	ldrb	r2, [r7, #15]
 8002480:	7bfb      	ldrb	r3, [r7, #15]
 8002482:	b298      	uxth	r0, r3
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	4613      	mov	r3, r2
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	4413      	add	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	440b      	add	r3, r1
 8002490:	3356      	adds	r3, #86	; 0x56
 8002492:	4602      	mov	r2, r0
 8002494:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002496:	7bfa      	ldrb	r2, [r7, #15]
 8002498:	6879      	ldr	r1, [r7, #4]
 800249a:	4613      	mov	r3, r2
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	4413      	add	r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	440b      	add	r3, r1
 80024a4:	3340      	adds	r3, #64	; 0x40
 80024a6:	2200      	movs	r2, #0
 80024a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80024aa:	7bfa      	ldrb	r2, [r7, #15]
 80024ac:	6879      	ldr	r1, [r7, #4]
 80024ae:	4613      	mov	r3, r2
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	4413      	add	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	440b      	add	r3, r1
 80024b8:	3344      	adds	r3, #68	; 0x44
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80024be:	7bfa      	ldrb	r2, [r7, #15]
 80024c0:	6879      	ldr	r1, [r7, #4]
 80024c2:	4613      	mov	r3, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	4413      	add	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	440b      	add	r3, r1
 80024cc:	3348      	adds	r3, #72	; 0x48
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80024d2:	7bfa      	ldrb	r2, [r7, #15]
 80024d4:	6879      	ldr	r1, [r7, #4]
 80024d6:	4613      	mov	r3, r2
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	4413      	add	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	440b      	add	r3, r1
 80024e0:	334c      	adds	r3, #76	; 0x4c
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024e6:	7bfb      	ldrb	r3, [r7, #15]
 80024e8:	3301      	adds	r3, #1
 80024ea:	73fb      	strb	r3, [r7, #15]
 80024ec:	7bfa      	ldrb	r2, [r7, #15]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d3af      	bcc.n	8002456 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024f6:	2300      	movs	r3, #0
 80024f8:	73fb      	strb	r3, [r7, #15]
 80024fa:	e044      	b.n	8002586 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80024fc:	7bfa      	ldrb	r2, [r7, #15]
 80024fe:	6879      	ldr	r1, [r7, #4]
 8002500:	4613      	mov	r3, r2
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	4413      	add	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	440b      	add	r3, r1
 800250a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800250e:	2200      	movs	r2, #0
 8002510:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002512:	7bfa      	ldrb	r2, [r7, #15]
 8002514:	6879      	ldr	r1, [r7, #4]
 8002516:	4613      	mov	r3, r2
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	4413      	add	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	440b      	add	r3, r1
 8002520:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002524:	7bfa      	ldrb	r2, [r7, #15]
 8002526:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002528:	7bfa      	ldrb	r2, [r7, #15]
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	4613      	mov	r3, r2
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	4413      	add	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	440b      	add	r3, r1
 8002536:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800253a:	2200      	movs	r2, #0
 800253c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800253e:	7bfa      	ldrb	r2, [r7, #15]
 8002540:	6879      	ldr	r1, [r7, #4]
 8002542:	4613      	mov	r3, r2
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	4413      	add	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	440b      	add	r3, r1
 800254c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002554:	7bfa      	ldrb	r2, [r7, #15]
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	4613      	mov	r3, r2
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	4413      	add	r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	440b      	add	r3, r1
 8002562:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002566:	2200      	movs	r2, #0
 8002568:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800256a:	7bfa      	ldrb	r2, [r7, #15]
 800256c:	6879      	ldr	r1, [r7, #4]
 800256e:	4613      	mov	r3, r2
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	4413      	add	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	440b      	add	r3, r1
 8002578:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002580:	7bfb      	ldrb	r3, [r7, #15]
 8002582:	3301      	adds	r3, #1
 8002584:	73fb      	strb	r3, [r7, #15]
 8002586:	7bfa      	ldrb	r2, [r7, #15]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	429a      	cmp	r2, r3
 800258e:	d3b5      	bcc.n	80024fc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	603b      	str	r3, [r7, #0]
 8002596:	687e      	ldr	r6, [r7, #4]
 8002598:	466d      	mov	r5, sp
 800259a:	f106 0410 	add.w	r4, r6, #16
 800259e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80025ae:	1d33      	adds	r3, r6, #4
 80025b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025b2:	6838      	ldr	r0, [r7, #0]
 80025b4:	f006 fa08 	bl	80089c8 <USB_DevInit>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d005      	beq.n	80025ca <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2202      	movs	r2, #2
 80025c2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e014      	b.n	80025f4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d102      	bne.n	80025e8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 f80a 	bl	80025fc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f006 fbaa 	bl	8008d46 <USB_DevDisconnect>

  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3714      	adds	r7, #20
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080025fc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2201      	movs	r2, #1
 800260e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800262a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800262e:	f043 0303 	orr.w	r3, r3, #3
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3714      	adds	r7, #20
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002648:	4b0d      	ldr	r3, [pc, #52]	; (8002680 <HAL_PWREx_GetVoltageRange+0x3c>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002650:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002654:	d102      	bne.n	800265c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002656:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800265a:	e00b      	b.n	8002674 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800265c:	4b08      	ldr	r3, [pc, #32]	; (8002680 <HAL_PWREx_GetVoltageRange+0x3c>)
 800265e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002666:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800266a:	d102      	bne.n	8002672 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800266c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002670:	e000      	b.n	8002674 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002672:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002674:	4618      	mov	r0, r3
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	40007000 	.word	0x40007000

08002684 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d141      	bne.n	8002716 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002692:	4b4b      	ldr	r3, [pc, #300]	; (80027c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800269a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800269e:	d131      	bne.n	8002704 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026a0:	4b47      	ldr	r3, [pc, #284]	; (80027c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026a6:	4a46      	ldr	r2, [pc, #280]	; (80027c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026b0:	4b43      	ldr	r3, [pc, #268]	; (80027c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026b8:	4a41      	ldr	r2, [pc, #260]	; (80027c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80026c0:	4b40      	ldr	r3, [pc, #256]	; (80027c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2232      	movs	r2, #50	; 0x32
 80026c6:	fb02 f303 	mul.w	r3, r2, r3
 80026ca:	4a3f      	ldr	r2, [pc, #252]	; (80027c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80026cc:	fba2 2303 	umull	r2, r3, r2, r3
 80026d0:	0c9b      	lsrs	r3, r3, #18
 80026d2:	3301      	adds	r3, #1
 80026d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026d6:	e002      	b.n	80026de <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	3b01      	subs	r3, #1
 80026dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026de:	4b38      	ldr	r3, [pc, #224]	; (80027c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026ea:	d102      	bne.n	80026f2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1f2      	bne.n	80026d8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026f2:	4b33      	ldr	r3, [pc, #204]	; (80027c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026fe:	d158      	bne.n	80027b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e057      	b.n	80027b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002704:	4b2e      	ldr	r3, [pc, #184]	; (80027c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002706:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800270a:	4a2d      	ldr	r2, [pc, #180]	; (80027c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800270c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002710:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002714:	e04d      	b.n	80027b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800271c:	d141      	bne.n	80027a2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800271e:	4b28      	ldr	r3, [pc, #160]	; (80027c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002726:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800272a:	d131      	bne.n	8002790 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800272c:	4b24      	ldr	r3, [pc, #144]	; (80027c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800272e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002732:	4a23      	ldr	r2, [pc, #140]	; (80027c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002738:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800273c:	4b20      	ldr	r3, [pc, #128]	; (80027c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002744:	4a1e      	ldr	r2, [pc, #120]	; (80027c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002746:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800274a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800274c:	4b1d      	ldr	r3, [pc, #116]	; (80027c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2232      	movs	r2, #50	; 0x32
 8002752:	fb02 f303 	mul.w	r3, r2, r3
 8002756:	4a1c      	ldr	r2, [pc, #112]	; (80027c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002758:	fba2 2303 	umull	r2, r3, r2, r3
 800275c:	0c9b      	lsrs	r3, r3, #18
 800275e:	3301      	adds	r3, #1
 8002760:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002762:	e002      	b.n	800276a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	3b01      	subs	r3, #1
 8002768:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800276a:	4b15      	ldr	r3, [pc, #84]	; (80027c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002776:	d102      	bne.n	800277e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1f2      	bne.n	8002764 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800277e:	4b10      	ldr	r3, [pc, #64]	; (80027c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800278a:	d112      	bne.n	80027b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e011      	b.n	80027b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002790:	4b0b      	ldr	r3, [pc, #44]	; (80027c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002792:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002796:	4a0a      	ldr	r2, [pc, #40]	; (80027c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800279c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80027a0:	e007      	b.n	80027b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80027a2:	4b07      	ldr	r3, [pc, #28]	; (80027c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027aa:	4a05      	ldr	r2, [pc, #20]	; (80027c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027b0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3714      	adds	r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr
 80027c0:	40007000 	.word	0x40007000
 80027c4:	20000000 	.word	0x20000000
 80027c8:	431bde83 	.word	0x431bde83

080027cc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80027d0:	4b05      	ldr	r3, [pc, #20]	; (80027e8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	4a04      	ldr	r2, [pc, #16]	; (80027e8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80027d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027da:	6053      	str	r3, [r2, #4]
}
 80027dc:	bf00      	nop
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	40007000 	.word	0x40007000

080027ec <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80027f0:	4b05      	ldr	r3, [pc, #20]	; (8002808 <HAL_PWREx_EnableVddIO2+0x1c>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	4a04      	ldr	r2, [pc, #16]	; (8002808 <HAL_PWREx_EnableVddIO2+0x1c>)
 80027f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027fa:	6053      	str	r3, [r2, #4]
}
 80027fc:	bf00      	nop
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	40007000 	.word	0x40007000

0800280c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b088      	sub	sp, #32
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d102      	bne.n	8002820 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	f000 bc08 	b.w	8003030 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002820:	4b96      	ldr	r3, [pc, #600]	; (8002a7c <HAL_RCC_OscConfig+0x270>)
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f003 030c 	and.w	r3, r3, #12
 8002828:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800282a:	4b94      	ldr	r3, [pc, #592]	; (8002a7c <HAL_RCC_OscConfig+0x270>)
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	f003 0303 	and.w	r3, r3, #3
 8002832:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0310 	and.w	r3, r3, #16
 800283c:	2b00      	cmp	r3, #0
 800283e:	f000 80e4 	beq.w	8002a0a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d007      	beq.n	8002858 <HAL_RCC_OscConfig+0x4c>
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	2b0c      	cmp	r3, #12
 800284c:	f040 808b 	bne.w	8002966 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	2b01      	cmp	r3, #1
 8002854:	f040 8087 	bne.w	8002966 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002858:	4b88      	ldr	r3, [pc, #544]	; (8002a7c <HAL_RCC_OscConfig+0x270>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d005      	beq.n	8002870 <HAL_RCC_OscConfig+0x64>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d101      	bne.n	8002870 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e3df      	b.n	8003030 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a1a      	ldr	r2, [r3, #32]
 8002874:	4b81      	ldr	r3, [pc, #516]	; (8002a7c <HAL_RCC_OscConfig+0x270>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0308 	and.w	r3, r3, #8
 800287c:	2b00      	cmp	r3, #0
 800287e:	d004      	beq.n	800288a <HAL_RCC_OscConfig+0x7e>
 8002880:	4b7e      	ldr	r3, [pc, #504]	; (8002a7c <HAL_RCC_OscConfig+0x270>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002888:	e005      	b.n	8002896 <HAL_RCC_OscConfig+0x8a>
 800288a:	4b7c      	ldr	r3, [pc, #496]	; (8002a7c <HAL_RCC_OscConfig+0x270>)
 800288c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002890:	091b      	lsrs	r3, r3, #4
 8002892:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002896:	4293      	cmp	r3, r2
 8002898:	d223      	bcs.n	80028e2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	4618      	mov	r0, r3
 80028a0:	f000 fdca 	bl	8003438 <RCC_SetFlashLatencyFromMSIRange>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e3c0      	b.n	8003030 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028ae:	4b73      	ldr	r3, [pc, #460]	; (8002a7c <HAL_RCC_OscConfig+0x270>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a72      	ldr	r2, [pc, #456]	; (8002a7c <HAL_RCC_OscConfig+0x270>)
 80028b4:	f043 0308 	orr.w	r3, r3, #8
 80028b8:	6013      	str	r3, [r2, #0]
 80028ba:	4b70      	ldr	r3, [pc, #448]	; (8002a7c <HAL_RCC_OscConfig+0x270>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	496d      	ldr	r1, [pc, #436]	; (8002a7c <HAL_RCC_OscConfig+0x270>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028cc:	4b6b      	ldr	r3, [pc, #428]	; (8002a7c <HAL_RCC_OscConfig+0x270>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	69db      	ldr	r3, [r3, #28]
 80028d8:	021b      	lsls	r3, r3, #8
 80028da:	4968      	ldr	r1, [pc, #416]	; (8002a7c <HAL_RCC_OscConfig+0x270>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	604b      	str	r3, [r1, #4]
 80028e0:	e025      	b.n	800292e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028e2:	4b66      	ldr	r3, [pc, #408]	; (8002a7c <HAL_RCC_OscConfig+0x270>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a65      	ldr	r2, [pc, #404]	; (8002a7c <HAL_RCC_OscConfig+0x270>)
 80028e8:	f043 0308 	orr.w	r3, r3, #8
 80028ec:	6013      	str	r3, [r2, #0]
 80028ee:	4b63      	ldr	r3, [pc, #396]	; (8002a7c <HAL_RCC_OscConfig+0x270>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	4960      	ldr	r1, [pc, #384]	; (8002a7c <HAL_RCC_OscConfig+0x270>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002900:	4b5e      	ldr	r3, [pc, #376]	; (8002a7c <HAL_RCC_OscConfig+0x270>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	69db      	ldr	r3, [r3, #28]
 800290c:	021b      	lsls	r3, r3, #8
 800290e:	495b      	ldr	r1, [pc, #364]	; (8002a7c <HAL_RCC_OscConfig+0x270>)
 8002910:	4313      	orrs	r3, r2
 8002912:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d109      	bne.n	800292e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	4618      	mov	r0, r3
 8002920:	f000 fd8a 	bl	8003438 <RCC_SetFlashLatencyFromMSIRange>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e380      	b.n	8003030 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800292e:	f000 fcc1 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 8002932:	4602      	mov	r2, r0
 8002934:	4b51      	ldr	r3, [pc, #324]	; (8002a7c <HAL_RCC_OscConfig+0x270>)
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	091b      	lsrs	r3, r3, #4
 800293a:	f003 030f 	and.w	r3, r3, #15
 800293e:	4950      	ldr	r1, [pc, #320]	; (8002a80 <HAL_RCC_OscConfig+0x274>)
 8002940:	5ccb      	ldrb	r3, [r1, r3]
 8002942:	f003 031f 	and.w	r3, r3, #31
 8002946:	fa22 f303 	lsr.w	r3, r2, r3
 800294a:	4a4e      	ldr	r2, [pc, #312]	; (8002a84 <HAL_RCC_OscConfig+0x278>)
 800294c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800294e:	4b4e      	ldr	r3, [pc, #312]	; (8002a88 <HAL_RCC_OscConfig+0x27c>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff f8d4 	bl	8001b00 <HAL_InitTick>
 8002958:	4603      	mov	r3, r0
 800295a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800295c:	7bfb      	ldrb	r3, [r7, #15]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d052      	beq.n	8002a08 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002962:	7bfb      	ldrb	r3, [r7, #15]
 8002964:	e364      	b.n	8003030 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d032      	beq.n	80029d4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800296e:	4b43      	ldr	r3, [pc, #268]	; (8002a7c <HAL_RCC_OscConfig+0x270>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a42      	ldr	r2, [pc, #264]	; (8002a7c <HAL_RCC_OscConfig+0x270>)
 8002974:	f043 0301 	orr.w	r3, r3, #1
 8002978:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800297a:	f7ff f911 	bl	8001ba0 <HAL_GetTick>
 800297e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002980:	e008      	b.n	8002994 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002982:	f7ff f90d 	bl	8001ba0 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d901      	bls.n	8002994 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e34d      	b.n	8003030 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002994:	4b39      	ldr	r3, [pc, #228]	; (8002a7c <HAL_RCC_OscConfig+0x270>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d0f0      	beq.n	8002982 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029a0:	4b36      	ldr	r3, [pc, #216]	; (8002a7c <HAL_RCC_OscConfig+0x270>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a35      	ldr	r2, [pc, #212]	; (8002a7c <HAL_RCC_OscConfig+0x270>)
 80029a6:	f043 0308 	orr.w	r3, r3, #8
 80029aa:	6013      	str	r3, [r2, #0]
 80029ac:	4b33      	ldr	r3, [pc, #204]	; (8002a7c <HAL_RCC_OscConfig+0x270>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	4930      	ldr	r1, [pc, #192]	; (8002a7c <HAL_RCC_OscConfig+0x270>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029be:	4b2f      	ldr	r3, [pc, #188]	; (8002a7c <HAL_RCC_OscConfig+0x270>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	69db      	ldr	r3, [r3, #28]
 80029ca:	021b      	lsls	r3, r3, #8
 80029cc:	492b      	ldr	r1, [pc, #172]	; (8002a7c <HAL_RCC_OscConfig+0x270>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	604b      	str	r3, [r1, #4]
 80029d2:	e01a      	b.n	8002a0a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80029d4:	4b29      	ldr	r3, [pc, #164]	; (8002a7c <HAL_RCC_OscConfig+0x270>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a28      	ldr	r2, [pc, #160]	; (8002a7c <HAL_RCC_OscConfig+0x270>)
 80029da:	f023 0301 	bic.w	r3, r3, #1
 80029de:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029e0:	f7ff f8de 	bl	8001ba0 <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029e8:	f7ff f8da 	bl	8001ba0 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e31a      	b.n	8003030 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029fa:	4b20      	ldr	r3, [pc, #128]	; (8002a7c <HAL_RCC_OscConfig+0x270>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1f0      	bne.n	80029e8 <HAL_RCC_OscConfig+0x1dc>
 8002a06:	e000      	b.n	8002a0a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a08:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d073      	beq.n	8002afe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	2b08      	cmp	r3, #8
 8002a1a:	d005      	beq.n	8002a28 <HAL_RCC_OscConfig+0x21c>
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	2b0c      	cmp	r3, #12
 8002a20:	d10e      	bne.n	8002a40 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	2b03      	cmp	r3, #3
 8002a26:	d10b      	bne.n	8002a40 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a28:	4b14      	ldr	r3, [pc, #80]	; (8002a7c <HAL_RCC_OscConfig+0x270>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d063      	beq.n	8002afc <HAL_RCC_OscConfig+0x2f0>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d15f      	bne.n	8002afc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e2f7      	b.n	8003030 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a48:	d106      	bne.n	8002a58 <HAL_RCC_OscConfig+0x24c>
 8002a4a:	4b0c      	ldr	r3, [pc, #48]	; (8002a7c <HAL_RCC_OscConfig+0x270>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a0b      	ldr	r2, [pc, #44]	; (8002a7c <HAL_RCC_OscConfig+0x270>)
 8002a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a54:	6013      	str	r3, [r2, #0]
 8002a56:	e025      	b.n	8002aa4 <HAL_RCC_OscConfig+0x298>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a60:	d114      	bne.n	8002a8c <HAL_RCC_OscConfig+0x280>
 8002a62:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <HAL_RCC_OscConfig+0x270>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a05      	ldr	r2, [pc, #20]	; (8002a7c <HAL_RCC_OscConfig+0x270>)
 8002a68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a6c:	6013      	str	r3, [r2, #0]
 8002a6e:	4b03      	ldr	r3, [pc, #12]	; (8002a7c <HAL_RCC_OscConfig+0x270>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a02      	ldr	r2, [pc, #8]	; (8002a7c <HAL_RCC_OscConfig+0x270>)
 8002a74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a78:	6013      	str	r3, [r2, #0]
 8002a7a:	e013      	b.n	8002aa4 <HAL_RCC_OscConfig+0x298>
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	08008e7c 	.word	0x08008e7c
 8002a84:	20000000 	.word	0x20000000
 8002a88:	20000004 	.word	0x20000004
 8002a8c:	4ba0      	ldr	r3, [pc, #640]	; (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a9f      	ldr	r2, [pc, #636]	; (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002a92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a96:	6013      	str	r3, [r2, #0]
 8002a98:	4b9d      	ldr	r3, [pc, #628]	; (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a9c      	ldr	r2, [pc, #624]	; (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002a9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aa2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d013      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aac:	f7ff f878 	bl	8001ba0 <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ab4:	f7ff f874 	bl	8001ba0 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b64      	cmp	r3, #100	; 0x64
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e2b4      	b.n	8003030 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ac6:	4b92      	ldr	r3, [pc, #584]	; (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d0f0      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x2a8>
 8002ad2:	e014      	b.n	8002afe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad4:	f7ff f864 	bl	8001ba0 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002adc:	f7ff f860 	bl	8001ba0 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b64      	cmp	r3, #100	; 0x64
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e2a0      	b.n	8003030 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002aee:	4b88      	ldr	r3, [pc, #544]	; (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1f0      	bne.n	8002adc <HAL_RCC_OscConfig+0x2d0>
 8002afa:	e000      	b.n	8002afe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002afc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d060      	beq.n	8002bcc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	2b04      	cmp	r3, #4
 8002b0e:	d005      	beq.n	8002b1c <HAL_RCC_OscConfig+0x310>
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	2b0c      	cmp	r3, #12
 8002b14:	d119      	bne.n	8002b4a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d116      	bne.n	8002b4a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b1c:	4b7c      	ldr	r3, [pc, #496]	; (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d005      	beq.n	8002b34 <HAL_RCC_OscConfig+0x328>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d101      	bne.n	8002b34 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e27d      	b.n	8003030 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b34:	4b76      	ldr	r3, [pc, #472]	; (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	061b      	lsls	r3, r3, #24
 8002b42:	4973      	ldr	r1, [pc, #460]	; (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b48:	e040      	b.n	8002bcc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d023      	beq.n	8002b9a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b52:	4b6f      	ldr	r3, [pc, #444]	; (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a6e      	ldr	r2, [pc, #440]	; (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5e:	f7ff f81f 	bl	8001ba0 <HAL_GetTick>
 8002b62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b64:	e008      	b.n	8002b78 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b66:	f7ff f81b 	bl	8001ba0 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d901      	bls.n	8002b78 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e25b      	b.n	8003030 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b78:	4b65      	ldr	r3, [pc, #404]	; (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d0f0      	beq.n	8002b66 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b84:	4b62      	ldr	r3, [pc, #392]	; (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	061b      	lsls	r3, r3, #24
 8002b92:	495f      	ldr	r1, [pc, #380]	; (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	604b      	str	r3, [r1, #4]
 8002b98:	e018      	b.n	8002bcc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b9a:	4b5d      	ldr	r3, [pc, #372]	; (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a5c      	ldr	r2, [pc, #368]	; (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002ba0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ba4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba6:	f7fe fffb 	bl	8001ba0 <HAL_GetTick>
 8002baa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bac:	e008      	b.n	8002bc0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bae:	f7fe fff7 	bl	8001ba0 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d901      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e237      	b.n	8003030 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bc0:	4b53      	ldr	r3, [pc, #332]	; (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1f0      	bne.n	8002bae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0308 	and.w	r3, r3, #8
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d03c      	beq.n	8002c52 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	695b      	ldr	r3, [r3, #20]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d01c      	beq.n	8002c1a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002be0:	4b4b      	ldr	r3, [pc, #300]	; (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002be2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002be6:	4a4a      	ldr	r2, [pc, #296]	; (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002be8:	f043 0301 	orr.w	r3, r3, #1
 8002bec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf0:	f7fe ffd6 	bl	8001ba0 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bf8:	f7fe ffd2 	bl	8001ba0 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e212      	b.n	8003030 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c0a:	4b41      	ldr	r3, [pc, #260]	; (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002c0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d0ef      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x3ec>
 8002c18:	e01b      	b.n	8002c52 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c1a:	4b3d      	ldr	r3, [pc, #244]	; (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002c1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c20:	4a3b      	ldr	r2, [pc, #236]	; (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002c22:	f023 0301 	bic.w	r3, r3, #1
 8002c26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c2a:	f7fe ffb9 	bl	8001ba0 <HAL_GetTick>
 8002c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c30:	e008      	b.n	8002c44 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c32:	f7fe ffb5 	bl	8001ba0 <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e1f5      	b.n	8003030 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c44:	4b32      	ldr	r3, [pc, #200]	; (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1ef      	bne.n	8002c32 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0304 	and.w	r3, r3, #4
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f000 80a6 	beq.w	8002dac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c60:	2300      	movs	r3, #0
 8002c62:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002c64:	4b2a      	ldr	r3, [pc, #168]	; (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d10d      	bne.n	8002c8c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c70:	4b27      	ldr	r3, [pc, #156]	; (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c74:	4a26      	ldr	r2, [pc, #152]	; (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002c76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c7a:	6593      	str	r3, [r2, #88]	; 0x58
 8002c7c:	4b24      	ldr	r3, [pc, #144]	; (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c84:	60bb      	str	r3, [r7, #8]
 8002c86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c8c:	4b21      	ldr	r3, [pc, #132]	; (8002d14 <HAL_RCC_OscConfig+0x508>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d118      	bne.n	8002cca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c98:	4b1e      	ldr	r3, [pc, #120]	; (8002d14 <HAL_RCC_OscConfig+0x508>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a1d      	ldr	r2, [pc, #116]	; (8002d14 <HAL_RCC_OscConfig+0x508>)
 8002c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ca4:	f7fe ff7c 	bl	8001ba0 <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cac:	f7fe ff78 	bl	8001ba0 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e1b8      	b.n	8003030 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cbe:	4b15      	ldr	r3, [pc, #84]	; (8002d14 <HAL_RCC_OscConfig+0x508>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d0f0      	beq.n	8002cac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d108      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x4d8>
 8002cd2:	4b0f      	ldr	r3, [pc, #60]	; (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd8:	4a0d      	ldr	r2, [pc, #52]	; (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002cda:	f043 0301 	orr.w	r3, r3, #1
 8002cde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ce2:	e029      	b.n	8002d38 <HAL_RCC_OscConfig+0x52c>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	2b05      	cmp	r3, #5
 8002cea:	d115      	bne.n	8002d18 <HAL_RCC_OscConfig+0x50c>
 8002cec:	4b08      	ldr	r3, [pc, #32]	; (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf2:	4a07      	ldr	r2, [pc, #28]	; (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002cf4:	f043 0304 	orr.w	r3, r3, #4
 8002cf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cfc:	4b04      	ldr	r3, [pc, #16]	; (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d02:	4a03      	ldr	r2, [pc, #12]	; (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002d04:	f043 0301 	orr.w	r3, r3, #1
 8002d08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d0c:	e014      	b.n	8002d38 <HAL_RCC_OscConfig+0x52c>
 8002d0e:	bf00      	nop
 8002d10:	40021000 	.word	0x40021000
 8002d14:	40007000 	.word	0x40007000
 8002d18:	4b9d      	ldr	r3, [pc, #628]	; (8002f90 <HAL_RCC_OscConfig+0x784>)
 8002d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d1e:	4a9c      	ldr	r2, [pc, #624]	; (8002f90 <HAL_RCC_OscConfig+0x784>)
 8002d20:	f023 0301 	bic.w	r3, r3, #1
 8002d24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d28:	4b99      	ldr	r3, [pc, #612]	; (8002f90 <HAL_RCC_OscConfig+0x784>)
 8002d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d2e:	4a98      	ldr	r2, [pc, #608]	; (8002f90 <HAL_RCC_OscConfig+0x784>)
 8002d30:	f023 0304 	bic.w	r3, r3, #4
 8002d34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d016      	beq.n	8002d6e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d40:	f7fe ff2e 	bl	8001ba0 <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d46:	e00a      	b.n	8002d5e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d48:	f7fe ff2a 	bl	8001ba0 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e168      	b.n	8003030 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d5e:	4b8c      	ldr	r3, [pc, #560]	; (8002f90 <HAL_RCC_OscConfig+0x784>)
 8002d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d0ed      	beq.n	8002d48 <HAL_RCC_OscConfig+0x53c>
 8002d6c:	e015      	b.n	8002d9a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d6e:	f7fe ff17 	bl	8001ba0 <HAL_GetTick>
 8002d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d74:	e00a      	b.n	8002d8c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d76:	f7fe ff13 	bl	8001ba0 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e151      	b.n	8003030 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d8c:	4b80      	ldr	r3, [pc, #512]	; (8002f90 <HAL_RCC_OscConfig+0x784>)
 8002d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1ed      	bne.n	8002d76 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d9a:	7ffb      	ldrb	r3, [r7, #31]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d105      	bne.n	8002dac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002da0:	4b7b      	ldr	r3, [pc, #492]	; (8002f90 <HAL_RCC_OscConfig+0x784>)
 8002da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da4:	4a7a      	ldr	r2, [pc, #488]	; (8002f90 <HAL_RCC_OscConfig+0x784>)
 8002da6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002daa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0320 	and.w	r3, r3, #32
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d03c      	beq.n	8002e32 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d01c      	beq.n	8002dfa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002dc0:	4b73      	ldr	r3, [pc, #460]	; (8002f90 <HAL_RCC_OscConfig+0x784>)
 8002dc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002dc6:	4a72      	ldr	r2, [pc, #456]	; (8002f90 <HAL_RCC_OscConfig+0x784>)
 8002dc8:	f043 0301 	orr.w	r3, r3, #1
 8002dcc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd0:	f7fe fee6 	bl	8001ba0 <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002dd8:	f7fe fee2 	bl	8001ba0 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e122      	b.n	8003030 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002dea:	4b69      	ldr	r3, [pc, #420]	; (8002f90 <HAL_RCC_OscConfig+0x784>)
 8002dec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d0ef      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x5cc>
 8002df8:	e01b      	b.n	8002e32 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002dfa:	4b65      	ldr	r3, [pc, #404]	; (8002f90 <HAL_RCC_OscConfig+0x784>)
 8002dfc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e00:	4a63      	ldr	r2, [pc, #396]	; (8002f90 <HAL_RCC_OscConfig+0x784>)
 8002e02:	f023 0301 	bic.w	r3, r3, #1
 8002e06:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e0a:	f7fe fec9 	bl	8001ba0 <HAL_GetTick>
 8002e0e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e10:	e008      	b.n	8002e24 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e12:	f7fe fec5 	bl	8001ba0 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e105      	b.n	8003030 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e24:	4b5a      	ldr	r3, [pc, #360]	; (8002f90 <HAL_RCC_OscConfig+0x784>)
 8002e26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1ef      	bne.n	8002e12 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f000 80f9 	beq.w	800302e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	f040 80cf 	bne.w	8002fe4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002e46:	4b52      	ldr	r3, [pc, #328]	; (8002f90 <HAL_RCC_OscConfig+0x784>)
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	f003 0203 	and.w	r2, r3, #3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d12c      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e64:	3b01      	subs	r3, #1
 8002e66:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d123      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e76:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d11b      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e86:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d113      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e96:	085b      	lsrs	r3, r3, #1
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d109      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	085b      	lsrs	r3, r3, #1
 8002eac:	3b01      	subs	r3, #1
 8002eae:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d071      	beq.n	8002f98 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	2b0c      	cmp	r3, #12
 8002eb8:	d068      	beq.n	8002f8c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002eba:	4b35      	ldr	r3, [pc, #212]	; (8002f90 <HAL_RCC_OscConfig+0x784>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d105      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002ec6:	4b32      	ldr	r3, [pc, #200]	; (8002f90 <HAL_RCC_OscConfig+0x784>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e0ac      	b.n	8003030 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ed6:	4b2e      	ldr	r3, [pc, #184]	; (8002f90 <HAL_RCC_OscConfig+0x784>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a2d      	ldr	r2, [pc, #180]	; (8002f90 <HAL_RCC_OscConfig+0x784>)
 8002edc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ee0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ee2:	f7fe fe5d 	bl	8001ba0 <HAL_GetTick>
 8002ee6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ee8:	e008      	b.n	8002efc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eea:	f7fe fe59 	bl	8001ba0 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d901      	bls.n	8002efc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e099      	b.n	8003030 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002efc:	4b24      	ldr	r3, [pc, #144]	; (8002f90 <HAL_RCC_OscConfig+0x784>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1f0      	bne.n	8002eea <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f08:	4b21      	ldr	r3, [pc, #132]	; (8002f90 <HAL_RCC_OscConfig+0x784>)
 8002f0a:	68da      	ldr	r2, [r3, #12]
 8002f0c:	4b21      	ldr	r3, [pc, #132]	; (8002f94 <HAL_RCC_OscConfig+0x788>)
 8002f0e:	4013      	ands	r3, r2
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002f18:	3a01      	subs	r2, #1
 8002f1a:	0112      	lsls	r2, r2, #4
 8002f1c:	4311      	orrs	r1, r2
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f22:	0212      	lsls	r2, r2, #8
 8002f24:	4311      	orrs	r1, r2
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f2a:	0852      	lsrs	r2, r2, #1
 8002f2c:	3a01      	subs	r2, #1
 8002f2e:	0552      	lsls	r2, r2, #21
 8002f30:	4311      	orrs	r1, r2
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002f36:	0852      	lsrs	r2, r2, #1
 8002f38:	3a01      	subs	r2, #1
 8002f3a:	0652      	lsls	r2, r2, #25
 8002f3c:	4311      	orrs	r1, r2
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f42:	06d2      	lsls	r2, r2, #27
 8002f44:	430a      	orrs	r2, r1
 8002f46:	4912      	ldr	r1, [pc, #72]	; (8002f90 <HAL_RCC_OscConfig+0x784>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002f4c:	4b10      	ldr	r3, [pc, #64]	; (8002f90 <HAL_RCC_OscConfig+0x784>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a0f      	ldr	r2, [pc, #60]	; (8002f90 <HAL_RCC_OscConfig+0x784>)
 8002f52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f56:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f58:	4b0d      	ldr	r3, [pc, #52]	; (8002f90 <HAL_RCC_OscConfig+0x784>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	4a0c      	ldr	r2, [pc, #48]	; (8002f90 <HAL_RCC_OscConfig+0x784>)
 8002f5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f62:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f64:	f7fe fe1c 	bl	8001ba0 <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f6c:	f7fe fe18 	bl	8001ba0 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e058      	b.n	8003030 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f7e:	4b04      	ldr	r3, [pc, #16]	; (8002f90 <HAL_RCC_OscConfig+0x784>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d0f0      	beq.n	8002f6c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f8a:	e050      	b.n	800302e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e04f      	b.n	8003030 <HAL_RCC_OscConfig+0x824>
 8002f90:	40021000 	.word	0x40021000
 8002f94:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f98:	4b27      	ldr	r3, [pc, #156]	; (8003038 <HAL_RCC_OscConfig+0x82c>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d144      	bne.n	800302e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002fa4:	4b24      	ldr	r3, [pc, #144]	; (8003038 <HAL_RCC_OscConfig+0x82c>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a23      	ldr	r2, [pc, #140]	; (8003038 <HAL_RCC_OscConfig+0x82c>)
 8002faa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fb0:	4b21      	ldr	r3, [pc, #132]	; (8003038 <HAL_RCC_OscConfig+0x82c>)
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	4a20      	ldr	r2, [pc, #128]	; (8003038 <HAL_RCC_OscConfig+0x82c>)
 8002fb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002fbc:	f7fe fdf0 	bl	8001ba0 <HAL_GetTick>
 8002fc0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fc2:	e008      	b.n	8002fd6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fc4:	f7fe fdec 	bl	8001ba0 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e02c      	b.n	8003030 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fd6:	4b18      	ldr	r3, [pc, #96]	; (8003038 <HAL_RCC_OscConfig+0x82c>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d0f0      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x7b8>
 8002fe2:	e024      	b.n	800302e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	2b0c      	cmp	r3, #12
 8002fe8:	d01f      	beq.n	800302a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fea:	4b13      	ldr	r3, [pc, #76]	; (8003038 <HAL_RCC_OscConfig+0x82c>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a12      	ldr	r2, [pc, #72]	; (8003038 <HAL_RCC_OscConfig+0x82c>)
 8002ff0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ff4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff6:	f7fe fdd3 	bl	8001ba0 <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ffc:	e008      	b.n	8003010 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ffe:	f7fe fdcf 	bl	8001ba0 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e00f      	b.n	8003030 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003010:	4b09      	ldr	r3, [pc, #36]	; (8003038 <HAL_RCC_OscConfig+0x82c>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1f0      	bne.n	8002ffe <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800301c:	4b06      	ldr	r3, [pc, #24]	; (8003038 <HAL_RCC_OscConfig+0x82c>)
 800301e:	68da      	ldr	r2, [r3, #12]
 8003020:	4905      	ldr	r1, [pc, #20]	; (8003038 <HAL_RCC_OscConfig+0x82c>)
 8003022:	4b06      	ldr	r3, [pc, #24]	; (800303c <HAL_RCC_OscConfig+0x830>)
 8003024:	4013      	ands	r3, r2
 8003026:	60cb      	str	r3, [r1, #12]
 8003028:	e001      	b.n	800302e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e000      	b.n	8003030 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3720      	adds	r7, #32
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40021000 	.word	0x40021000
 800303c:	feeefffc 	.word	0xfeeefffc

08003040 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800304a:	2300      	movs	r3, #0
 800304c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d101      	bne.n	8003058 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e11d      	b.n	8003294 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003058:	4b90      	ldr	r3, [pc, #576]	; (800329c <HAL_RCC_ClockConfig+0x25c>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 030f 	and.w	r3, r3, #15
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	429a      	cmp	r2, r3
 8003064:	d910      	bls.n	8003088 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003066:	4b8d      	ldr	r3, [pc, #564]	; (800329c <HAL_RCC_ClockConfig+0x25c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f023 020f 	bic.w	r2, r3, #15
 800306e:	498b      	ldr	r1, [pc, #556]	; (800329c <HAL_RCC_ClockConfig+0x25c>)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	4313      	orrs	r3, r2
 8003074:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003076:	4b89      	ldr	r3, [pc, #548]	; (800329c <HAL_RCC_ClockConfig+0x25c>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 030f 	and.w	r3, r3, #15
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	429a      	cmp	r2, r3
 8003082:	d001      	beq.n	8003088 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e105      	b.n	8003294 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d010      	beq.n	80030b6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689a      	ldr	r2, [r3, #8]
 8003098:	4b81      	ldr	r3, [pc, #516]	; (80032a0 <HAL_RCC_ClockConfig+0x260>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d908      	bls.n	80030b6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030a4:	4b7e      	ldr	r3, [pc, #504]	; (80032a0 <HAL_RCC_ClockConfig+0x260>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	497b      	ldr	r1, [pc, #492]	; (80032a0 <HAL_RCC_ClockConfig+0x260>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d079      	beq.n	80031b6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	2b03      	cmp	r3, #3
 80030c8:	d11e      	bne.n	8003108 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ca:	4b75      	ldr	r3, [pc, #468]	; (80032a0 <HAL_RCC_ClockConfig+0x260>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e0dc      	b.n	8003294 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80030da:	f000 fa07 	bl	80034ec <RCC_GetSysClockFreqFromPLLSource>
 80030de:	4603      	mov	r3, r0
 80030e0:	4a70      	ldr	r2, [pc, #448]	; (80032a4 <HAL_RCC_ClockConfig+0x264>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d946      	bls.n	8003174 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80030e6:	4b6e      	ldr	r3, [pc, #440]	; (80032a0 <HAL_RCC_ClockConfig+0x260>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d140      	bne.n	8003174 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80030f2:	4b6b      	ldr	r3, [pc, #428]	; (80032a0 <HAL_RCC_ClockConfig+0x260>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030fa:	4a69      	ldr	r2, [pc, #420]	; (80032a0 <HAL_RCC_ClockConfig+0x260>)
 80030fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003100:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003102:	2380      	movs	r3, #128	; 0x80
 8003104:	617b      	str	r3, [r7, #20]
 8003106:	e035      	b.n	8003174 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	2b02      	cmp	r3, #2
 800310e:	d107      	bne.n	8003120 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003110:	4b63      	ldr	r3, [pc, #396]	; (80032a0 <HAL_RCC_ClockConfig+0x260>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d115      	bne.n	8003148 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e0b9      	b.n	8003294 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d107      	bne.n	8003138 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003128:	4b5d      	ldr	r3, [pc, #372]	; (80032a0 <HAL_RCC_ClockConfig+0x260>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d109      	bne.n	8003148 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e0ad      	b.n	8003294 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003138:	4b59      	ldr	r3, [pc, #356]	; (80032a0 <HAL_RCC_ClockConfig+0x260>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003140:	2b00      	cmp	r3, #0
 8003142:	d101      	bne.n	8003148 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e0a5      	b.n	8003294 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003148:	f000 f8b4 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 800314c:	4603      	mov	r3, r0
 800314e:	4a55      	ldr	r2, [pc, #340]	; (80032a4 <HAL_RCC_ClockConfig+0x264>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d90f      	bls.n	8003174 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003154:	4b52      	ldr	r3, [pc, #328]	; (80032a0 <HAL_RCC_ClockConfig+0x260>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d109      	bne.n	8003174 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003160:	4b4f      	ldr	r3, [pc, #316]	; (80032a0 <HAL_RCC_ClockConfig+0x260>)
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003168:	4a4d      	ldr	r2, [pc, #308]	; (80032a0 <HAL_RCC_ClockConfig+0x260>)
 800316a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800316e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003170:	2380      	movs	r3, #128	; 0x80
 8003172:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003174:	4b4a      	ldr	r3, [pc, #296]	; (80032a0 <HAL_RCC_ClockConfig+0x260>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f023 0203 	bic.w	r2, r3, #3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	4947      	ldr	r1, [pc, #284]	; (80032a0 <HAL_RCC_ClockConfig+0x260>)
 8003182:	4313      	orrs	r3, r2
 8003184:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003186:	f7fe fd0b 	bl	8001ba0 <HAL_GetTick>
 800318a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800318c:	e00a      	b.n	80031a4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800318e:	f7fe fd07 	bl	8001ba0 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	f241 3288 	movw	r2, #5000	; 0x1388
 800319c:	4293      	cmp	r3, r2
 800319e:	d901      	bls.n	80031a4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e077      	b.n	8003294 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031a4:	4b3e      	ldr	r3, [pc, #248]	; (80032a0 <HAL_RCC_ClockConfig+0x260>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f003 020c 	and.w	r2, r3, #12
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d1eb      	bne.n	800318e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	2b80      	cmp	r3, #128	; 0x80
 80031ba:	d105      	bne.n	80031c8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80031bc:	4b38      	ldr	r3, [pc, #224]	; (80032a0 <HAL_RCC_ClockConfig+0x260>)
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	4a37      	ldr	r2, [pc, #220]	; (80032a0 <HAL_RCC_ClockConfig+0x260>)
 80031c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031c6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d010      	beq.n	80031f6 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	4b31      	ldr	r3, [pc, #196]	; (80032a0 <HAL_RCC_ClockConfig+0x260>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d208      	bcs.n	80031f6 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031e4:	4b2e      	ldr	r3, [pc, #184]	; (80032a0 <HAL_RCC_ClockConfig+0x260>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	492b      	ldr	r1, [pc, #172]	; (80032a0 <HAL_RCC_ClockConfig+0x260>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031f6:	4b29      	ldr	r3, [pc, #164]	; (800329c <HAL_RCC_ClockConfig+0x25c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 030f 	and.w	r3, r3, #15
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	429a      	cmp	r2, r3
 8003202:	d210      	bcs.n	8003226 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003204:	4b25      	ldr	r3, [pc, #148]	; (800329c <HAL_RCC_ClockConfig+0x25c>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f023 020f 	bic.w	r2, r3, #15
 800320c:	4923      	ldr	r1, [pc, #140]	; (800329c <HAL_RCC_ClockConfig+0x25c>)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	4313      	orrs	r3, r2
 8003212:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003214:	4b21      	ldr	r3, [pc, #132]	; (800329c <HAL_RCC_ClockConfig+0x25c>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 030f 	and.w	r3, r3, #15
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	429a      	cmp	r2, r3
 8003220:	d001      	beq.n	8003226 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e036      	b.n	8003294 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0304 	and.w	r3, r3, #4
 800322e:	2b00      	cmp	r3, #0
 8003230:	d008      	beq.n	8003244 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003232:	4b1b      	ldr	r3, [pc, #108]	; (80032a0 <HAL_RCC_ClockConfig+0x260>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	4918      	ldr	r1, [pc, #96]	; (80032a0 <HAL_RCC_ClockConfig+0x260>)
 8003240:	4313      	orrs	r3, r2
 8003242:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0308 	and.w	r3, r3, #8
 800324c:	2b00      	cmp	r3, #0
 800324e:	d009      	beq.n	8003264 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003250:	4b13      	ldr	r3, [pc, #76]	; (80032a0 <HAL_RCC_ClockConfig+0x260>)
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	4910      	ldr	r1, [pc, #64]	; (80032a0 <HAL_RCC_ClockConfig+0x260>)
 8003260:	4313      	orrs	r3, r2
 8003262:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003264:	f000 f826 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 8003268:	4602      	mov	r2, r0
 800326a:	4b0d      	ldr	r3, [pc, #52]	; (80032a0 <HAL_RCC_ClockConfig+0x260>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	091b      	lsrs	r3, r3, #4
 8003270:	f003 030f 	and.w	r3, r3, #15
 8003274:	490c      	ldr	r1, [pc, #48]	; (80032a8 <HAL_RCC_ClockConfig+0x268>)
 8003276:	5ccb      	ldrb	r3, [r1, r3]
 8003278:	f003 031f 	and.w	r3, r3, #31
 800327c:	fa22 f303 	lsr.w	r3, r2, r3
 8003280:	4a0a      	ldr	r2, [pc, #40]	; (80032ac <HAL_RCC_ClockConfig+0x26c>)
 8003282:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003284:	4b0a      	ldr	r3, [pc, #40]	; (80032b0 <HAL_RCC_ClockConfig+0x270>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4618      	mov	r0, r3
 800328a:	f7fe fc39 	bl	8001b00 <HAL_InitTick>
 800328e:	4603      	mov	r3, r0
 8003290:	73fb      	strb	r3, [r7, #15]

  return status;
 8003292:	7bfb      	ldrb	r3, [r7, #15]
}
 8003294:	4618      	mov	r0, r3
 8003296:	3718      	adds	r7, #24
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	40022000 	.word	0x40022000
 80032a0:	40021000 	.word	0x40021000
 80032a4:	04c4b400 	.word	0x04c4b400
 80032a8:	08008e7c 	.word	0x08008e7c
 80032ac:	20000000 	.word	0x20000000
 80032b0:	20000004 	.word	0x20000004

080032b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b089      	sub	sp, #36	; 0x24
 80032b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80032ba:	2300      	movs	r3, #0
 80032bc:	61fb      	str	r3, [r7, #28]
 80032be:	2300      	movs	r3, #0
 80032c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032c2:	4b3e      	ldr	r3, [pc, #248]	; (80033bc <HAL_RCC_GetSysClockFreq+0x108>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 030c 	and.w	r3, r3, #12
 80032ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032cc:	4b3b      	ldr	r3, [pc, #236]	; (80033bc <HAL_RCC_GetSysClockFreq+0x108>)
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	f003 0303 	and.w	r3, r3, #3
 80032d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d005      	beq.n	80032e8 <HAL_RCC_GetSysClockFreq+0x34>
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	2b0c      	cmp	r3, #12
 80032e0:	d121      	bne.n	8003326 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d11e      	bne.n	8003326 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80032e8:	4b34      	ldr	r3, [pc, #208]	; (80033bc <HAL_RCC_GetSysClockFreq+0x108>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0308 	and.w	r3, r3, #8
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d107      	bne.n	8003304 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80032f4:	4b31      	ldr	r3, [pc, #196]	; (80033bc <HAL_RCC_GetSysClockFreq+0x108>)
 80032f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032fa:	0a1b      	lsrs	r3, r3, #8
 80032fc:	f003 030f 	and.w	r3, r3, #15
 8003300:	61fb      	str	r3, [r7, #28]
 8003302:	e005      	b.n	8003310 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003304:	4b2d      	ldr	r3, [pc, #180]	; (80033bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	091b      	lsrs	r3, r3, #4
 800330a:	f003 030f 	and.w	r3, r3, #15
 800330e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003310:	4a2b      	ldr	r2, [pc, #172]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003318:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d10d      	bne.n	800333c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003324:	e00a      	b.n	800333c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	2b04      	cmp	r3, #4
 800332a:	d102      	bne.n	8003332 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800332c:	4b25      	ldr	r3, [pc, #148]	; (80033c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800332e:	61bb      	str	r3, [r7, #24]
 8003330:	e004      	b.n	800333c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	2b08      	cmp	r3, #8
 8003336:	d101      	bne.n	800333c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003338:	4b22      	ldr	r3, [pc, #136]	; (80033c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800333a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	2b0c      	cmp	r3, #12
 8003340:	d134      	bne.n	80033ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003342:	4b1e      	ldr	r3, [pc, #120]	; (80033bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	f003 0303 	and.w	r3, r3, #3
 800334a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	2b02      	cmp	r3, #2
 8003350:	d003      	beq.n	800335a <HAL_RCC_GetSysClockFreq+0xa6>
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	2b03      	cmp	r3, #3
 8003356:	d003      	beq.n	8003360 <HAL_RCC_GetSysClockFreq+0xac>
 8003358:	e005      	b.n	8003366 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800335a:	4b1a      	ldr	r3, [pc, #104]	; (80033c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800335c:	617b      	str	r3, [r7, #20]
      break;
 800335e:	e005      	b.n	800336c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003360:	4b18      	ldr	r3, [pc, #96]	; (80033c4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003362:	617b      	str	r3, [r7, #20]
      break;
 8003364:	e002      	b.n	800336c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	617b      	str	r3, [r7, #20]
      break;
 800336a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800336c:	4b13      	ldr	r3, [pc, #76]	; (80033bc <HAL_RCC_GetSysClockFreq+0x108>)
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	091b      	lsrs	r3, r3, #4
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	3301      	adds	r3, #1
 8003378:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800337a:	4b10      	ldr	r3, [pc, #64]	; (80033bc <HAL_RCC_GetSysClockFreq+0x108>)
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	0a1b      	lsrs	r3, r3, #8
 8003380:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003384:	697a      	ldr	r2, [r7, #20]
 8003386:	fb03 f202 	mul.w	r2, r3, r2
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003390:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003392:	4b0a      	ldr	r3, [pc, #40]	; (80033bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	0e5b      	lsrs	r3, r3, #25
 8003398:	f003 0303 	and.w	r3, r3, #3
 800339c:	3301      	adds	r3, #1
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80033ac:	69bb      	ldr	r3, [r7, #24]
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3724      	adds	r7, #36	; 0x24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	40021000 	.word	0x40021000
 80033c0:	08008e94 	.word	0x08008e94
 80033c4:	00f42400 	.word	0x00f42400

080033c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033cc:	4b03      	ldr	r3, [pc, #12]	; (80033dc <HAL_RCC_GetHCLKFreq+0x14>)
 80033ce:	681b      	ldr	r3, [r3, #0]
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	20000000 	.word	0x20000000

080033e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80033e4:	f7ff fff0 	bl	80033c8 <HAL_RCC_GetHCLKFreq>
 80033e8:	4602      	mov	r2, r0
 80033ea:	4b06      	ldr	r3, [pc, #24]	; (8003404 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	0a1b      	lsrs	r3, r3, #8
 80033f0:	f003 0307 	and.w	r3, r3, #7
 80033f4:	4904      	ldr	r1, [pc, #16]	; (8003408 <HAL_RCC_GetPCLK1Freq+0x28>)
 80033f6:	5ccb      	ldrb	r3, [r1, r3]
 80033f8:	f003 031f 	and.w	r3, r3, #31
 80033fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003400:	4618      	mov	r0, r3
 8003402:	bd80      	pop	{r7, pc}
 8003404:	40021000 	.word	0x40021000
 8003408:	08008e8c 	.word	0x08008e8c

0800340c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003410:	f7ff ffda 	bl	80033c8 <HAL_RCC_GetHCLKFreq>
 8003414:	4602      	mov	r2, r0
 8003416:	4b06      	ldr	r3, [pc, #24]	; (8003430 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	0adb      	lsrs	r3, r3, #11
 800341c:	f003 0307 	and.w	r3, r3, #7
 8003420:	4904      	ldr	r1, [pc, #16]	; (8003434 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003422:	5ccb      	ldrb	r3, [r1, r3]
 8003424:	f003 031f 	and.w	r3, r3, #31
 8003428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800342c:	4618      	mov	r0, r3
 800342e:	bd80      	pop	{r7, pc}
 8003430:	40021000 	.word	0x40021000
 8003434:	08008e8c 	.word	0x08008e8c

08003438 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003440:	2300      	movs	r3, #0
 8003442:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003444:	4b27      	ldr	r3, [pc, #156]	; (80034e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d003      	beq.n	8003458 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003450:	f7ff f8f8 	bl	8002644 <HAL_PWREx_GetVoltageRange>
 8003454:	6178      	str	r0, [r7, #20]
 8003456:	e014      	b.n	8003482 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003458:	4b22      	ldr	r3, [pc, #136]	; (80034e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800345a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345c:	4a21      	ldr	r2, [pc, #132]	; (80034e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800345e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003462:	6593      	str	r3, [r2, #88]	; 0x58
 8003464:	4b1f      	ldr	r3, [pc, #124]	; (80034e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800346c:	60fb      	str	r3, [r7, #12]
 800346e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003470:	f7ff f8e8 	bl	8002644 <HAL_PWREx_GetVoltageRange>
 8003474:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003476:	4b1b      	ldr	r3, [pc, #108]	; (80034e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800347a:	4a1a      	ldr	r2, [pc, #104]	; (80034e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800347c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003480:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003488:	d10b      	bne.n	80034a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2b80      	cmp	r3, #128	; 0x80
 800348e:	d913      	bls.n	80034b8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2ba0      	cmp	r3, #160	; 0xa0
 8003494:	d902      	bls.n	800349c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003496:	2302      	movs	r3, #2
 8003498:	613b      	str	r3, [r7, #16]
 800349a:	e00d      	b.n	80034b8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800349c:	2301      	movs	r3, #1
 800349e:	613b      	str	r3, [r7, #16]
 80034a0:	e00a      	b.n	80034b8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2b7f      	cmp	r3, #127	; 0x7f
 80034a6:	d902      	bls.n	80034ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80034a8:	2302      	movs	r3, #2
 80034aa:	613b      	str	r3, [r7, #16]
 80034ac:	e004      	b.n	80034b8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b70      	cmp	r3, #112	; 0x70
 80034b2:	d101      	bne.n	80034b8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034b4:	2301      	movs	r3, #1
 80034b6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80034b8:	4b0b      	ldr	r3, [pc, #44]	; (80034e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f023 020f 	bic.w	r2, r3, #15
 80034c0:	4909      	ldr	r1, [pc, #36]	; (80034e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80034c8:	4b07      	ldr	r3, [pc, #28]	; (80034e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 030f 	and.w	r3, r3, #15
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d001      	beq.n	80034da <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e000      	b.n	80034dc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3718      	adds	r7, #24
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	40021000 	.word	0x40021000
 80034e8:	40022000 	.word	0x40022000

080034ec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b087      	sub	sp, #28
 80034f0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034f2:	4b2d      	ldr	r3, [pc, #180]	; (80035a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	f003 0303 	and.w	r3, r3, #3
 80034fa:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2b03      	cmp	r3, #3
 8003500:	d00b      	beq.n	800351a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2b03      	cmp	r3, #3
 8003506:	d825      	bhi.n	8003554 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2b01      	cmp	r3, #1
 800350c:	d008      	beq.n	8003520 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2b02      	cmp	r3, #2
 8003512:	d11f      	bne.n	8003554 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003514:	4b25      	ldr	r3, [pc, #148]	; (80035ac <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003516:	613b      	str	r3, [r7, #16]
    break;
 8003518:	e01f      	b.n	800355a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800351a:	4b24      	ldr	r3, [pc, #144]	; (80035ac <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800351c:	613b      	str	r3, [r7, #16]
    break;
 800351e:	e01c      	b.n	800355a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003520:	4b21      	ldr	r3, [pc, #132]	; (80035a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0308 	and.w	r3, r3, #8
 8003528:	2b00      	cmp	r3, #0
 800352a:	d107      	bne.n	800353c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800352c:	4b1e      	ldr	r3, [pc, #120]	; (80035a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800352e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003532:	0a1b      	lsrs	r3, r3, #8
 8003534:	f003 030f 	and.w	r3, r3, #15
 8003538:	617b      	str	r3, [r7, #20]
 800353a:	e005      	b.n	8003548 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800353c:	4b1a      	ldr	r3, [pc, #104]	; (80035a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	091b      	lsrs	r3, r3, #4
 8003542:	f003 030f 	and.w	r3, r3, #15
 8003546:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003548:	4a19      	ldr	r2, [pc, #100]	; (80035b0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003550:	613b      	str	r3, [r7, #16]
    break;
 8003552:	e002      	b.n	800355a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003554:	2300      	movs	r3, #0
 8003556:	613b      	str	r3, [r7, #16]
    break;
 8003558:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800355a:	4b13      	ldr	r3, [pc, #76]	; (80035a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	091b      	lsrs	r3, r3, #4
 8003560:	f003 030f 	and.w	r3, r3, #15
 8003564:	3301      	adds	r3, #1
 8003566:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003568:	4b0f      	ldr	r3, [pc, #60]	; (80035a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	0a1b      	lsrs	r3, r3, #8
 800356e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	fb03 f202 	mul.w	r2, r3, r2
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	fbb2 f3f3 	udiv	r3, r2, r3
 800357e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003580:	4b09      	ldr	r3, [pc, #36]	; (80035a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	0e5b      	lsrs	r3, r3, #25
 8003586:	f003 0303 	and.w	r3, r3, #3
 800358a:	3301      	adds	r3, #1
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	fbb2 f3f3 	udiv	r3, r2, r3
 8003598:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800359a:	683b      	ldr	r3, [r7, #0]
}
 800359c:	4618      	mov	r0, r3
 800359e:	371c      	adds	r7, #28
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr
 80035a8:	40021000 	.word	0x40021000
 80035ac:	00f42400 	.word	0x00f42400
 80035b0:	08008e94 	.word	0x08008e94

080035b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b086      	sub	sp, #24
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035bc:	2300      	movs	r3, #0
 80035be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035c0:	2300      	movs	r3, #0
 80035c2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d040      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035d4:	2b80      	cmp	r3, #128	; 0x80
 80035d6:	d02a      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80035d8:	2b80      	cmp	r3, #128	; 0x80
 80035da:	d825      	bhi.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80035dc:	2b60      	cmp	r3, #96	; 0x60
 80035de:	d026      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80035e0:	2b60      	cmp	r3, #96	; 0x60
 80035e2:	d821      	bhi.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80035e4:	2b40      	cmp	r3, #64	; 0x40
 80035e6:	d006      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80035e8:	2b40      	cmp	r3, #64	; 0x40
 80035ea:	d81d      	bhi.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d009      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80035f0:	2b20      	cmp	r3, #32
 80035f2:	d010      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80035f4:	e018      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80035f6:	4b89      	ldr	r3, [pc, #548]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	4a88      	ldr	r2, [pc, #544]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80035fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003600:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003602:	e015      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3304      	adds	r3, #4
 8003608:	2100      	movs	r1, #0
 800360a:	4618      	mov	r0, r3
 800360c:	f001 fa82 	bl	8004b14 <RCCEx_PLLSAI1_Config>
 8003610:	4603      	mov	r3, r0
 8003612:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003614:	e00c      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	3320      	adds	r3, #32
 800361a:	2100      	movs	r1, #0
 800361c:	4618      	mov	r0, r3
 800361e:	f001 fb6d 	bl	8004cfc <RCCEx_PLLSAI2_Config>
 8003622:	4603      	mov	r3, r0
 8003624:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003626:	e003      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	74fb      	strb	r3, [r7, #19]
      break;
 800362c:	e000      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800362e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003630:	7cfb      	ldrb	r3, [r7, #19]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10b      	bne.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003636:	4b79      	ldr	r3, [pc, #484]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003638:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800363c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003644:	4975      	ldr	r1, [pc, #468]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003646:	4313      	orrs	r3, r2
 8003648:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800364c:	e001      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800364e:	7cfb      	ldrb	r3, [r7, #19]
 8003650:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d047      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003666:	d030      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003668:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800366c:	d82a      	bhi.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800366e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003672:	d02a      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003674:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003678:	d824      	bhi.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800367a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800367e:	d008      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003680:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003684:	d81e      	bhi.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00a      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800368a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800368e:	d010      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003690:	e018      	b.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003692:	4b62      	ldr	r3, [pc, #392]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	4a61      	ldr	r2, [pc, #388]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800369c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800369e:	e015      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	3304      	adds	r3, #4
 80036a4:	2100      	movs	r1, #0
 80036a6:	4618      	mov	r0, r3
 80036a8:	f001 fa34 	bl	8004b14 <RCCEx_PLLSAI1_Config>
 80036ac:	4603      	mov	r3, r0
 80036ae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036b0:	e00c      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	3320      	adds	r3, #32
 80036b6:	2100      	movs	r1, #0
 80036b8:	4618      	mov	r0, r3
 80036ba:	f001 fb1f 	bl	8004cfc <RCCEx_PLLSAI2_Config>
 80036be:	4603      	mov	r3, r0
 80036c0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036c2:	e003      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	74fb      	strb	r3, [r7, #19]
      break;
 80036c8:	e000      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80036ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036cc:	7cfb      	ldrb	r3, [r7, #19]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10b      	bne.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80036d2:	4b52      	ldr	r3, [pc, #328]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80036d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e0:	494e      	ldr	r1, [pc, #312]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80036e8:	e001      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ea:	7cfb      	ldrb	r3, [r7, #19]
 80036ec:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	f000 809f 	beq.w	800383a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036fc:	2300      	movs	r3, #0
 80036fe:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003700:	4b46      	ldr	r3, [pc, #280]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d101      	bne.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800370c:	2301      	movs	r3, #1
 800370e:	e000      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003710:	2300      	movs	r3, #0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00d      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003716:	4b41      	ldr	r3, [pc, #260]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800371a:	4a40      	ldr	r2, [pc, #256]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800371c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003720:	6593      	str	r3, [r2, #88]	; 0x58
 8003722:	4b3e      	ldr	r3, [pc, #248]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800372a:	60bb      	str	r3, [r7, #8]
 800372c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800372e:	2301      	movs	r3, #1
 8003730:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003732:	4b3b      	ldr	r3, [pc, #236]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a3a      	ldr	r2, [pc, #232]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800373c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800373e:	f7fe fa2f 	bl	8001ba0 <HAL_GetTick>
 8003742:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003744:	e009      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003746:	f7fe fa2b 	bl	8001ba0 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	2b02      	cmp	r3, #2
 8003752:	d902      	bls.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	74fb      	strb	r3, [r7, #19]
        break;
 8003758:	e005      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800375a:	4b31      	ldr	r3, [pc, #196]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003762:	2b00      	cmp	r3, #0
 8003764:	d0ef      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003766:	7cfb      	ldrb	r3, [r7, #19]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d15b      	bne.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800376c:	4b2b      	ldr	r3, [pc, #172]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800376e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003776:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d01f      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	429a      	cmp	r2, r3
 8003788:	d019      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800378a:	4b24      	ldr	r3, [pc, #144]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800378c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003790:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003794:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003796:	4b21      	ldr	r3, [pc, #132]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800379c:	4a1f      	ldr	r2, [pc, #124]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800379e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037a6:	4b1d      	ldr	r3, [pc, #116]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80037a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ac:	4a1b      	ldr	r2, [pc, #108]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80037ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80037b6:	4a19      	ldr	r2, [pc, #100]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d016      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c8:	f7fe f9ea 	bl	8001ba0 <HAL_GetTick>
 80037cc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037ce:	e00b      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037d0:	f7fe f9e6 	bl	8001ba0 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	f241 3288 	movw	r2, #5000	; 0x1388
 80037de:	4293      	cmp	r3, r2
 80037e0:	d902      	bls.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	74fb      	strb	r3, [r7, #19]
            break;
 80037e6:	e006      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037e8:	4b0c      	ldr	r3, [pc, #48]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80037ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d0ec      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80037f6:	7cfb      	ldrb	r3, [r7, #19]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d10c      	bne.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037fc:	4b07      	ldr	r3, [pc, #28]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80037fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003802:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800380c:	4903      	ldr	r1, [pc, #12]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800380e:	4313      	orrs	r3, r2
 8003810:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003814:	e008      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003816:	7cfb      	ldrb	r3, [r7, #19]
 8003818:	74bb      	strb	r3, [r7, #18]
 800381a:	e005      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800381c:	40021000 	.word	0x40021000
 8003820:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003824:	7cfb      	ldrb	r3, [r7, #19]
 8003826:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003828:	7c7b      	ldrb	r3, [r7, #17]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d105      	bne.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800382e:	4ba0      	ldr	r3, [pc, #640]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003832:	4a9f      	ldr	r2, [pc, #636]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003834:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003838:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00a      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003846:	4b9a      	ldr	r3, [pc, #616]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384c:	f023 0203 	bic.w	r2, r3, #3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003854:	4996      	ldr	r1, [pc, #600]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003856:	4313      	orrs	r3, r2
 8003858:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0302 	and.w	r3, r3, #2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00a      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003868:	4b91      	ldr	r3, [pc, #580]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800386a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386e:	f023 020c 	bic.w	r2, r3, #12
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003876:	498e      	ldr	r1, [pc, #568]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003878:	4313      	orrs	r3, r2
 800387a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0304 	and.w	r3, r3, #4
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00a      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800388a:	4b89      	ldr	r3, [pc, #548]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800388c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003890:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003898:	4985      	ldr	r1, [pc, #532]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800389a:	4313      	orrs	r3, r2
 800389c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0308 	and.w	r3, r3, #8
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00a      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038ac:	4b80      	ldr	r3, [pc, #512]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038ba:	497d      	ldr	r1, [pc, #500]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0310 	and.w	r3, r3, #16
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00a      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038ce:	4b78      	ldr	r3, [pc, #480]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038dc:	4974      	ldr	r1, [pc, #464]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0320 	and.w	r3, r3, #32
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00a      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80038f0:	4b6f      	ldr	r3, [pc, #444]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038fe:	496c      	ldr	r1, [pc, #432]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003900:	4313      	orrs	r3, r2
 8003902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00a      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003912:	4b67      	ldr	r3, [pc, #412]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003918:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003920:	4963      	ldr	r1, [pc, #396]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003922:	4313      	orrs	r3, r2
 8003924:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00a      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003934:	4b5e      	ldr	r3, [pc, #376]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800393a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003942:	495b      	ldr	r1, [pc, #364]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003944:	4313      	orrs	r3, r2
 8003946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00a      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003956:	4b56      	ldr	r3, [pc, #344]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800395c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003964:	4952      	ldr	r1, [pc, #328]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003966:	4313      	orrs	r3, r2
 8003968:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00a      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003978:	4b4d      	ldr	r3, [pc, #308]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800397a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800397e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003986:	494a      	ldr	r1, [pc, #296]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003988:	4313      	orrs	r3, r2
 800398a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00a      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800399a:	4b45      	ldr	r3, [pc, #276]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800399c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a8:	4941      	ldr	r1, [pc, #260]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00a      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80039bc:	4b3c      	ldr	r3, [pc, #240]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039c2:	f023 0203 	bic.w	r2, r3, #3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ca:	4939      	ldr	r1, [pc, #228]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d028      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039de:	4b34      	ldr	r3, [pc, #208]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039ec:	4930      	ldr	r1, [pc, #192]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039fc:	d106      	bne.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039fe:	4b2c      	ldr	r3, [pc, #176]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	4a2b      	ldr	r2, [pc, #172]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a08:	60d3      	str	r3, [r2, #12]
 8003a0a:	e011      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a14:	d10c      	bne.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	3304      	adds	r3, #4
 8003a1a:	2101      	movs	r1, #1
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f001 f879 	bl	8004b14 <RCCEx_PLLSAI1_Config>
 8003a22:	4603      	mov	r3, r0
 8003a24:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003a26:	7cfb      	ldrb	r3, [r7, #19]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d001      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003a2c:	7cfb      	ldrb	r3, [r7, #19]
 8003a2e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d04d      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a44:	d108      	bne.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003a46:	4b1a      	ldr	r3, [pc, #104]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a4c:	4a18      	ldr	r2, [pc, #96]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a52:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003a56:	e012      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003a58:	4b15      	ldr	r3, [pc, #84]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a5e:	4a14      	ldr	r2, [pc, #80]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a64:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003a68:	4b11      	ldr	r3, [pc, #68]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a6e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a76:	490e      	ldr	r1, [pc, #56]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a86:	d106      	bne.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a88:	4b09      	ldr	r3, [pc, #36]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	4a08      	ldr	r2, [pc, #32]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a92:	60d3      	str	r3, [r2, #12]
 8003a94:	e020      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a9e:	d109      	bne.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003aa0:	4b03      	ldr	r3, [pc, #12]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	4a02      	ldr	r2, [pc, #8]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003aa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aaa:	60d3      	str	r3, [r2, #12]
 8003aac:	e014      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003aae:	bf00      	nop
 8003ab0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ab8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003abc:	d10c      	bne.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	3304      	adds	r3, #4
 8003ac2:	2101      	movs	r1, #1
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f001 f825 	bl	8004b14 <RCCEx_PLLSAI1_Config>
 8003aca:	4603      	mov	r3, r0
 8003acc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ace:	7cfb      	ldrb	r3, [r7, #19]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d001      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003ad4:	7cfb      	ldrb	r3, [r7, #19]
 8003ad6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d028      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ae4:	4b7a      	ldr	r3, [pc, #488]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003af2:	4977      	ldr	r1, [pc, #476]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003afe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b02:	d106      	bne.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b04:	4b72      	ldr	r3, [pc, #456]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	4a71      	ldr	r2, [pc, #452]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003b0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b0e:	60d3      	str	r3, [r2, #12]
 8003b10:	e011      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b16:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b1a:	d10c      	bne.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	3304      	adds	r3, #4
 8003b20:	2101      	movs	r1, #1
 8003b22:	4618      	mov	r0, r3
 8003b24:	f000 fff6 	bl	8004b14 <RCCEx_PLLSAI1_Config>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b2c:	7cfb      	ldrb	r3, [r7, #19]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003b32:	7cfb      	ldrb	r3, [r7, #19]
 8003b34:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d01e      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b42:	4b63      	ldr	r3, [pc, #396]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b48:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b52:	495f      	ldr	r1, [pc, #380]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b64:	d10c      	bne.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	3304      	adds	r3, #4
 8003b6a:	2102      	movs	r1, #2
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f000 ffd1 	bl	8004b14 <RCCEx_PLLSAI1_Config>
 8003b72:	4603      	mov	r3, r0
 8003b74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b76:	7cfb      	ldrb	r3, [r7, #19]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d001      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003b7c:	7cfb      	ldrb	r3, [r7, #19]
 8003b7e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00b      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b8c:	4b50      	ldr	r3, [pc, #320]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003b8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b92:	f023 0204 	bic.w	r2, r3, #4
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b9c:	494c      	ldr	r1, [pc, #304]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00b      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003bb0:	4b47      	ldr	r3, [pc, #284]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003bb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003bb6:	f023 0218 	bic.w	r2, r3, #24
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc0:	4943      	ldr	r1, [pc, #268]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d035      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003bd4:	4b3e      	ldr	r3, [pc, #248]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a3d      	ldr	r2, [pc, #244]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003bda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003be0:	f7fd ffde 	bl	8001ba0 <HAL_GetTick>
 8003be4:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003be6:	e009      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003be8:	f7fd ffda 	bl	8001ba0 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d902      	bls.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	74fb      	strb	r3, [r7, #19]
        break;
 8003bfa:	e005      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003bfc:	4b34      	ldr	r3, [pc, #208]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1ef      	bne.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8003c08:	7cfb      	ldrb	r3, [r7, #19]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d113      	bne.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8003c0e:	4b30      	ldr	r3, [pc, #192]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003c10:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c1e:	492c      	ldr	r1, [pc, #176]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	3320      	adds	r3, #32
 8003c2a:	2102      	movs	r1, #2
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f001 f865 	bl	8004cfc <RCCEx_PLLSAI2_Config>
 8003c32:	4603      	mov	r3, r0
 8003c34:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8003c36:	7cfb      	ldrb	r3, [r7, #19]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d001      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8003c3c:	7cfb      	ldrb	r3, [r7, #19]
 8003c3e:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d01e      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8003c4c:	4b20      	ldr	r3, [pc, #128]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003c4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c5c:	491c      	ldr	r1, [pc, #112]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c6e:	d10c      	bne.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	3320      	adds	r3, #32
 8003c74:	2101      	movs	r1, #1
 8003c76:	4618      	mov	r0, r3
 8003c78:	f001 f840 	bl	8004cfc <RCCEx_PLLSAI2_Config>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c80:	7cfb      	ldrb	r3, [r7, #19]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 8003c86:	7cfb      	ldrb	r3, [r7, #19]
 8003c88:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d017      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003c96:	4b0e      	ldr	r3, [pc, #56]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003c98:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ca6:	490a      	ldr	r1, [pc, #40]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cb4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003cb8:	d105      	bne.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cba:	4b05      	ldr	r3, [pc, #20]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	4a04      	ldr	r2, [pc, #16]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003cc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cc4:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003cc6:	7cbb      	ldrb	r3, [r7, #18]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3718      	adds	r7, #24
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	40021000 	.word	0x40021000

08003cd4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b088      	sub	sp, #32
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ce6:	d13e      	bne.n	8003d66 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003ce8:	4bb6      	ldr	r3, [pc, #728]	; (8003fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cf2:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cfa:	d028      	beq.n	8003d4e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d02:	f200 86f2 	bhi.w	8004aea <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d0c:	d005      	beq.n	8003d1a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d14:	d00e      	beq.n	8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8003d16:	f000 bee8 	b.w	8004aea <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003d1a:	4baa      	ldr	r3, [pc, #680]	; (8003fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	f040 86e2 	bne.w	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
        frequency = LSE_VALUE;
 8003d2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d2e:	61fb      	str	r3, [r7, #28]
      break;
 8003d30:	f000 bedd 	b.w	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003d34:	4ba3      	ldr	r3, [pc, #652]	; (8003fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003d36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	f040 86d7 	bne.w	8004af2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = LSI_VALUE;
 8003d44:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8003d48:	61fb      	str	r3, [r7, #28]
      break;
 8003d4a:	f000 bed2 	b.w	8004af2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003d4e:	4b9d      	ldr	r3, [pc, #628]	; (8003fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d5a:	f040 86cc 	bne.w	8004af6 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
        frequency = HSE_VALUE / 32U;
 8003d5e:	4b9a      	ldr	r3, [pc, #616]	; (8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003d60:	61fb      	str	r3, [r7, #28]
      break;
 8003d62:	f000 bec8 	b.w	8004af6 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d66:	4b97      	ldr	r3, [pc, #604]	; (8003fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	f003 0303 	and.w	r3, r3, #3
 8003d6e:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	2b03      	cmp	r3, #3
 8003d74:	d036      	beq.n	8003de4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	2b03      	cmp	r3, #3
 8003d7a:	d840      	bhi.n	8003dfe <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d003      	beq.n	8003d8a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d020      	beq.n	8003dca <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8003d88:	e039      	b.n	8003dfe <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003d8a:	4b8e      	ldr	r3, [pc, #568]	; (8003fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d116      	bne.n	8003dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003d96:	4b8b      	ldr	r3, [pc, #556]	; (8003fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0308 	and.w	r3, r3, #8
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d005      	beq.n	8003dae <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8003da2:	4b88      	ldr	r3, [pc, #544]	; (8003fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	091b      	lsrs	r3, r3, #4
 8003da8:	f003 030f 	and.w	r3, r3, #15
 8003dac:	e005      	b.n	8003dba <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8003dae:	4b85      	ldr	r3, [pc, #532]	; (8003fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003db0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003db4:	0a1b      	lsrs	r3, r3, #8
 8003db6:	f003 030f 	and.w	r3, r3, #15
 8003dba:	4a84      	ldr	r2, [pc, #528]	; (8003fcc <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dc0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003dc2:	e01f      	b.n	8003e04 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	61bb      	str	r3, [r7, #24]
      break;
 8003dc8:	e01c      	b.n	8003e04 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003dca:	4b7e      	ldr	r3, [pc, #504]	; (8003fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dd6:	d102      	bne.n	8003dde <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8003dd8:	4b7d      	ldr	r3, [pc, #500]	; (8003fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003dda:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003ddc:	e012      	b.n	8003e04 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003dde:	2300      	movs	r3, #0
 8003de0:	61bb      	str	r3, [r7, #24]
      break;
 8003de2:	e00f      	b.n	8003e04 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003de4:	4b77      	ldr	r3, [pc, #476]	; (8003fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003df0:	d102      	bne.n	8003df8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8003df2:	4b77      	ldr	r3, [pc, #476]	; (8003fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003df4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003df6:	e005      	b.n	8003e04 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	61bb      	str	r3, [r7, #24]
      break;
 8003dfc:	e002      	b.n	8003e04 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	61bb      	str	r3, [r7, #24]
      break;
 8003e02:	bf00      	nop
    }

    switch(PeriphClk)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e0a:	f000 8604 	beq.w	8004a16 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e14:	f200 8671 	bhi.w	8004afa <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e1e:	f000 8467 	beq.w	80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e28:	f200 8667 	bhi.w	8004afa <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e32:	f000 852f 	beq.w	8004894 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e3c:	f200 865d 	bhi.w	8004afa <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003e46:	f000 8185 	beq.w	8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003e50:	f200 8653 	bhi.w	8004afa <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e5a:	f000 80cb 	beq.w	8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e64:	f200 8649 	bhi.w	8004afa <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e6e:	f000 842e 	beq.w	80046ce <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e78:	f200 863f 	bhi.w	8004afa <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e82:	f000 83e2 	beq.w	800464a <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e8c:	f200 8635 	bhi.w	8004afa <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e96:	f000 80ad 	beq.w	8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ea0:	f200 862b 	bhi.w	8004afa <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eaa:	f000 809b 	beq.w	8003fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eb4:	f200 8621 	bhi.w	8004afa <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ebe:	f000 8089 	beq.w	8003fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ec8:	f200 8617 	bhi.w	8004afa <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ed2:	f000 8552 	beq.w	800497a <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003edc:	f200 860d 	bhi.w	8004afa <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ee6:	f000 84fe 	beq.w	80048e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ef0:	f200 8603 	bhi.w	8004afa <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003efa:	f000 849f 	beq.w	800483c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f04:	f200 85f9 	bhi.w	8004afa <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2b80      	cmp	r3, #128	; 0x80
 8003f0c:	f000 846a 	beq.w	80047e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2b80      	cmp	r3, #128	; 0x80
 8003f14:	f200 85f1 	bhi.w	8004afa <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b20      	cmp	r3, #32
 8003f1c:	d84c      	bhi.n	8003fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f000 85ea 	beq.w	8004afa <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	3b01      	subs	r3, #1
 8003f2a:	2b1f      	cmp	r3, #31
 8003f2c:	f200 85e5 	bhi.w	8004afa <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003f30:	a201      	add	r2, pc, #4	; (adr r2, 8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8003f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f36:	bf00      	nop
 8003f38:	08004349 	.word	0x08004349
 8003f3c:	080043b7 	.word	0x080043b7
 8003f40:	08004afb 	.word	0x08004afb
 8003f44:	0800444b 	.word	0x0800444b
 8003f48:	08004afb 	.word	0x08004afb
 8003f4c:	08004afb 	.word	0x08004afb
 8003f50:	08004afb 	.word	0x08004afb
 8003f54:	080044c3 	.word	0x080044c3
 8003f58:	08004afb 	.word	0x08004afb
 8003f5c:	08004afb 	.word	0x08004afb
 8003f60:	08004afb 	.word	0x08004afb
 8003f64:	08004afb 	.word	0x08004afb
 8003f68:	08004afb 	.word	0x08004afb
 8003f6c:	08004afb 	.word	0x08004afb
 8003f70:	08004afb 	.word	0x08004afb
 8003f74:	08004547 	.word	0x08004547
 8003f78:	08004afb 	.word	0x08004afb
 8003f7c:	08004afb 	.word	0x08004afb
 8003f80:	08004afb 	.word	0x08004afb
 8003f84:	08004afb 	.word	0x08004afb
 8003f88:	08004afb 	.word	0x08004afb
 8003f8c:	08004afb 	.word	0x08004afb
 8003f90:	08004afb 	.word	0x08004afb
 8003f94:	08004afb 	.word	0x08004afb
 8003f98:	08004afb 	.word	0x08004afb
 8003f9c:	08004afb 	.word	0x08004afb
 8003fa0:	08004afb 	.word	0x08004afb
 8003fa4:	08004afb 	.word	0x08004afb
 8003fa8:	08004afb 	.word	0x08004afb
 8003fac:	08004afb 	.word	0x08004afb
 8003fb0:	08004afb 	.word	0x08004afb
 8003fb4:	080045c9 	.word	0x080045c9
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2b40      	cmp	r3, #64	; 0x40
 8003fbc:	f000 83e6 	beq.w	800478c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8003fc0:	f000 bd9b 	b.w	8004afa <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003fc4:	40021000 	.word	0x40021000
 8003fc8:	0007a120 	.word	0x0007a120
 8003fcc:	08008e94 	.word	0x08008e94
 8003fd0:	00f42400 	.word	0x00f42400
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8003fd4:	69b9      	ldr	r1, [r7, #24]
 8003fd6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003fda:	f000 ff83 	bl	8004ee4 <RCCEx_GetSAIxPeriphCLKFreq>
 8003fde:	61f8      	str	r0, [r7, #28]
      break;
 8003fe0:	f000 bd8e 	b.w	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8003fe4:	69b9      	ldr	r1, [r7, #24]
 8003fe6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003fea:	f000 ff7b 	bl	8004ee4 <RCCEx_GetSAIxPeriphCLKFreq>
 8003fee:	61f8      	str	r0, [r7, #28]
      break;
 8003ff0:	f000 bd86 	b.w	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8003ff4:	4b9a      	ldr	r3, [pc, #616]	; (8004260 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffa:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8003ffe:	60fb      	str	r3, [r7, #12]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004006:	d015      	beq.n	8004034 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800400e:	f200 8092 	bhi.w	8004136 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004018:	d029      	beq.n	800406e <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004020:	f200 8089 	bhi.w	8004136 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d07b      	beq.n	8004122 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004030:	d04a      	beq.n	80040c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
          break;
 8004032:	e080      	b.n	8004136 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004034:	4b8a      	ldr	r3, [pc, #552]	; (8004260 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0302 	and.w	r3, r3, #2
 800403c:	2b02      	cmp	r3, #2
 800403e:	d17d      	bne.n	800413c <HAL_RCCEx_GetPeriphCLKFreq+0x468>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004040:	4b87      	ldr	r3, [pc, #540]	; (8004260 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0308 	and.w	r3, r3, #8
 8004048:	2b00      	cmp	r3, #0
 800404a:	d005      	beq.n	8004058 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
 800404c:	4b84      	ldr	r3, [pc, #528]	; (8004260 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	091b      	lsrs	r3, r3, #4
 8004052:	f003 030f 	and.w	r3, r3, #15
 8004056:	e005      	b.n	8004064 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 8004058:	4b81      	ldr	r3, [pc, #516]	; (8004260 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800405a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800405e:	0a1b      	lsrs	r3, r3, #8
 8004060:	f003 030f 	and.w	r3, r3, #15
 8004064:	4a7f      	ldr	r2, [pc, #508]	; (8004264 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800406a:	61fb      	str	r3, [r7, #28]
          break;
 800406c:	e066      	b.n	800413c <HAL_RCCEx_GetPeriphCLKFreq+0x468>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800406e:	4b7c      	ldr	r3, [pc, #496]	; (8004260 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004076:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800407a:	d162      	bne.n	8004142 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800407c:	4b78      	ldr	r3, [pc, #480]	; (8004260 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004084:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004088:	d15b      	bne.n	8004142 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800408a:	4b75      	ldr	r3, [pc, #468]	; (8004260 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	0a1b      	lsrs	r3, r3, #8
 8004090:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004094:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	fb03 f202 	mul.w	r2, r3, r2
 800409e:	4b70      	ldr	r3, [pc, #448]	; (8004260 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	091b      	lsrs	r3, r3, #4
 80040a4:	f003 030f 	and.w	r3, r3, #15
 80040a8:	3301      	adds	r3, #1
 80040aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ae:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80040b0:	4b6b      	ldr	r3, [pc, #428]	; (8004260 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	0d5b      	lsrs	r3, r3, #21
 80040b6:	f003 0303 	and.w	r3, r3, #3
 80040ba:	3301      	adds	r3, #1
 80040bc:	005b      	lsls	r3, r3, #1
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c4:	61fb      	str	r3, [r7, #28]
          break;
 80040c6:	e03c      	b.n	8004142 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80040c8:	4b65      	ldr	r3, [pc, #404]	; (8004260 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040d4:	d138      	bne.n	8004148 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80040d6:	4b62      	ldr	r3, [pc, #392]	; (8004260 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040e2:	d131      	bne.n	8004148 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80040e4:	4b5e      	ldr	r3, [pc, #376]	; (8004260 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	0a1b      	lsrs	r3, r3, #8
 80040ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040ee:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	68ba      	ldr	r2, [r7, #8]
 80040f4:	fb03 f202 	mul.w	r2, r3, r2
 80040f8:	4b59      	ldr	r3, [pc, #356]	; (8004260 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	091b      	lsrs	r3, r3, #4
 80040fe:	f003 030f 	and.w	r3, r3, #15
 8004102:	3301      	adds	r3, #1
 8004104:	fbb2 f3f3 	udiv	r3, r2, r3
 8004108:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800410a:	4b55      	ldr	r3, [pc, #340]	; (8004260 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	0d5b      	lsrs	r3, r3, #21
 8004110:	f003 0303 	and.w	r3, r3, #3
 8004114:	3301      	adds	r3, #1
 8004116:	005b      	lsls	r3, r3, #1
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	fbb2 f3f3 	udiv	r3, r2, r3
 800411e:	61fb      	str	r3, [r7, #28]
          break;
 8004120:	e012      	b.n	8004148 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8004122:	4b4f      	ldr	r3, [pc, #316]	; (8004260 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004124:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b02      	cmp	r3, #2
 800412e:	d10e      	bne.n	800414e <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI48_VALUE;
 8004130:	4b4d      	ldr	r3, [pc, #308]	; (8004268 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004132:	61fb      	str	r3, [r7, #28]
          break;
 8004134:	e00b      	b.n	800414e <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          break;
 8004136:	bf00      	nop
 8004138:	f000 bce2 	b.w	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800413c:	bf00      	nop
 800413e:	f000 bcdf 	b.w	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004142:	bf00      	nop
 8004144:	f000 bcdc 	b.w	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004148:	bf00      	nop
 800414a:	f000 bcd9 	b.w	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800414e:	bf00      	nop
        break;
 8004150:	f000 bcd6 	b.w	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8004154:	4b42      	ldr	r3, [pc, #264]	; (8004260 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004156:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800415a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800415e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004162:	d13d      	bne.n	80041e0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004164:	4b3e      	ldr	r3, [pc, #248]	; (8004260 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800416c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004170:	f040 84c5 	bne.w	8004afe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8004174:	4b3a      	ldr	r3, [pc, #232]	; (8004260 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800417c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004180:	f040 84bd 	bne.w	8004afe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004184:	4b36      	ldr	r3, [pc, #216]	; (8004260 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	0a1b      	lsrs	r3, r3, #8
 800418a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800418e:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	fb03 f202 	mul.w	r2, r3, r2
 8004198:	4b31      	ldr	r3, [pc, #196]	; (8004260 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	091b      	lsrs	r3, r3, #4
 800419e:	f003 030f 	and.w	r3, r3, #15
 80041a2:	3301      	adds	r3, #1
 80041a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a8:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80041aa:	4b2d      	ldr	r3, [pc, #180]	; (8004260 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	0edb      	lsrs	r3, r3, #27
 80041b0:	f003 031f 	and.w	r3, r3, #31
 80041b4:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d10a      	bne.n	80041d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80041bc:	4b28      	ldr	r3, [pc, #160]	; (8004260 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d002      	beq.n	80041ce <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
                pllp = 17U;
 80041c8:	2311      	movs	r3, #17
 80041ca:	617b      	str	r3, [r7, #20]
 80041cc:	e001      	b.n	80041d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 7U;
 80041ce:	2307      	movs	r3, #7
 80041d0:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 80041d2:	69ba      	ldr	r2, [r7, #24]
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041da:	61fb      	str	r3, [r7, #28]
      break;
 80041dc:	f000 bc8f 	b.w	8004afe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80041e0:	4b1f      	ldr	r3, [pc, #124]	; (8004260 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80041e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e6:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80041ea:	60fb      	str	r3, [r7, #12]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80041f2:	d016      	beq.n	8004222 <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80041fa:	f200 809b 	bhi.w	8004334 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004204:	d032      	beq.n	800426c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800420c:	f200 8092 	bhi.w	8004334 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2b00      	cmp	r3, #0
 8004214:	f000 8084 	beq.w	8004320 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800421e:	d052      	beq.n	80042c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
          break;
 8004220:	e088      	b.n	8004334 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004222:	4b0f      	ldr	r3, [pc, #60]	; (8004260 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b02      	cmp	r3, #2
 800422c:	f040 8084 	bne.w	8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004230:	4b0b      	ldr	r3, [pc, #44]	; (8004260 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0308 	and.w	r3, r3, #8
 8004238:	2b00      	cmp	r3, #0
 800423a:	d005      	beq.n	8004248 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 800423c:	4b08      	ldr	r3, [pc, #32]	; (8004260 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	091b      	lsrs	r3, r3, #4
 8004242:	f003 030f 	and.w	r3, r3, #15
 8004246:	e005      	b.n	8004254 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8004248:	4b05      	ldr	r3, [pc, #20]	; (8004260 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800424a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800424e:	0a1b      	lsrs	r3, r3, #8
 8004250:	f003 030f 	and.w	r3, r3, #15
 8004254:	4a03      	ldr	r2, [pc, #12]	; (8004264 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800425a:	61fb      	str	r3, [r7, #28]
          break;
 800425c:	e06c      	b.n	8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800425e:	bf00      	nop
 8004260:	40021000 	.word	0x40021000
 8004264:	08008e94 	.word	0x08008e94
 8004268:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800426c:	4ba5      	ldr	r3, [pc, #660]	; (8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004274:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004278:	d160      	bne.n	800433c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800427a:	4ba2      	ldr	r3, [pc, #648]	; (8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004282:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004286:	d159      	bne.n	800433c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004288:	4b9e      	ldr	r3, [pc, #632]	; (8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	0a1b      	lsrs	r3, r3, #8
 800428e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004292:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	68ba      	ldr	r2, [r7, #8]
 8004298:	fb03 f202 	mul.w	r2, r3, r2
 800429c:	4b99      	ldr	r3, [pc, #612]	; (8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	091b      	lsrs	r3, r3, #4
 80042a2:	f003 030f 	and.w	r3, r3, #15
 80042a6:	3301      	adds	r3, #1
 80042a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ac:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80042ae:	4b95      	ldr	r3, [pc, #596]	; (8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	0d5b      	lsrs	r3, r3, #21
 80042b4:	f003 0303 	and.w	r3, r3, #3
 80042b8:	3301      	adds	r3, #1
 80042ba:	005b      	lsls	r3, r3, #1
 80042bc:	69ba      	ldr	r2, [r7, #24]
 80042be:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c2:	61fb      	str	r3, [r7, #28]
          break;
 80042c4:	e03a      	b.n	800433c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80042c6:	4b8f      	ldr	r3, [pc, #572]	; (8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042d2:	d135      	bne.n	8004340 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80042d4:	4b8b      	ldr	r3, [pc, #556]	; (8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042e0:	d12e      	bne.n	8004340 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80042e2:	4b88      	ldr	r3, [pc, #544]	; (8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	0a1b      	lsrs	r3, r3, #8
 80042e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042ec:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	68ba      	ldr	r2, [r7, #8]
 80042f2:	fb03 f202 	mul.w	r2, r3, r2
 80042f6:	4b83      	ldr	r3, [pc, #524]	; (8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	091b      	lsrs	r3, r3, #4
 80042fc:	f003 030f 	and.w	r3, r3, #15
 8004300:	3301      	adds	r3, #1
 8004302:	fbb2 f3f3 	udiv	r3, r2, r3
 8004306:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8004308:	4b7e      	ldr	r3, [pc, #504]	; (8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	0d5b      	lsrs	r3, r3, #21
 800430e:	f003 0303 	and.w	r3, r3, #3
 8004312:	3301      	adds	r3, #1
 8004314:	005b      	lsls	r3, r3, #1
 8004316:	69ba      	ldr	r2, [r7, #24]
 8004318:	fbb2 f3f3 	udiv	r3, r2, r3
 800431c:	61fb      	str	r3, [r7, #28]
          break;
 800431e:	e00f      	b.n	8004340 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8004320:	4b78      	ldr	r3, [pc, #480]	; (8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004322:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b02      	cmp	r3, #2
 800432c:	d10a      	bne.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            frequency = HSI48_VALUE;
 800432e:	4b76      	ldr	r3, [pc, #472]	; (8004508 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004330:	61fb      	str	r3, [r7, #28]
          break;
 8004332:	e007      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          break;
 8004334:	bf00      	nop
 8004336:	e3e2      	b.n	8004afe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8004338:	bf00      	nop
 800433a:	e3e0      	b.n	8004afe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 800433c:	bf00      	nop
 800433e:	e3de      	b.n	8004afe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8004340:	bf00      	nop
 8004342:	e3dc      	b.n	8004afe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8004344:	bf00      	nop
      break;
 8004346:	e3da      	b.n	8004afe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004348:	4b6e      	ldr	r3, [pc, #440]	; (8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800434a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800434e:	f003 0303 	and.w	r3, r3, #3
 8004352:	60fb      	str	r3, [r7, #12]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2b03      	cmp	r3, #3
 8004358:	d827      	bhi.n	80043aa <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
 800435a:	a201      	add	r2, pc, #4	; (adr r2, 8004360 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 800435c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004360:	08004371 	.word	0x08004371
 8004364:	08004379 	.word	0x08004379
 8004368:	08004381 	.word	0x08004381
 800436c:	08004395 	.word	0x08004395
          frequency = HAL_RCC_GetPCLK2Freq();
 8004370:	f7ff f84c 	bl	800340c <HAL_RCC_GetPCLK2Freq>
 8004374:	61f8      	str	r0, [r7, #28]
          break;
 8004376:	e01d      	b.n	80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          frequency = HAL_RCC_GetSysClockFreq();
 8004378:	f7fe ff9c 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 800437c:	61f8      	str	r0, [r7, #28]
          break;
 800437e:	e019      	b.n	80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004380:	4b60      	ldr	r3, [pc, #384]	; (8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004388:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800438c:	d10f      	bne.n	80043ae <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
            frequency = HSI_VALUE;
 800438e:	4b5f      	ldr	r3, [pc, #380]	; (800450c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8004390:	61fb      	str	r3, [r7, #28]
          break;
 8004392:	e00c      	b.n	80043ae <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004394:	4b5b      	ldr	r3, [pc, #364]	; (8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d107      	bne.n	80043b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = LSE_VALUE;
 80043a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043a6:	61fb      	str	r3, [r7, #28]
          break;
 80043a8:	e003      	b.n	80043b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          break;
 80043aa:	bf00      	nop
 80043ac:	e3a8      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80043ae:	bf00      	nop
 80043b0:	e3a6      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80043b2:	bf00      	nop
        break;
 80043b4:	e3a4      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80043b6:	4b53      	ldr	r3, [pc, #332]	; (8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80043b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043bc:	f003 030c 	and.w	r3, r3, #12
 80043c0:	60fb      	str	r3, [r7, #12]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2b0c      	cmp	r3, #12
 80043c6:	d83a      	bhi.n	800443e <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 80043c8:	a201      	add	r2, pc, #4	; (adr r2, 80043d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>)
 80043ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ce:	bf00      	nop
 80043d0:	08004405 	.word	0x08004405
 80043d4:	0800443f 	.word	0x0800443f
 80043d8:	0800443f 	.word	0x0800443f
 80043dc:	0800443f 	.word	0x0800443f
 80043e0:	0800440d 	.word	0x0800440d
 80043e4:	0800443f 	.word	0x0800443f
 80043e8:	0800443f 	.word	0x0800443f
 80043ec:	0800443f 	.word	0x0800443f
 80043f0:	08004415 	.word	0x08004415
 80043f4:	0800443f 	.word	0x0800443f
 80043f8:	0800443f 	.word	0x0800443f
 80043fc:	0800443f 	.word	0x0800443f
 8004400:	08004429 	.word	0x08004429
          frequency = HAL_RCC_GetPCLK1Freq();
 8004404:	f7fe ffec 	bl	80033e0 <HAL_RCC_GetPCLK1Freq>
 8004408:	61f8      	str	r0, [r7, #28]
          break;
 800440a:	e01d      	b.n	8004448 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          frequency = HAL_RCC_GetSysClockFreq();
 800440c:	f7fe ff52 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 8004410:	61f8      	str	r0, [r7, #28]
          break;
 8004412:	e019      	b.n	8004448 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004414:	4b3b      	ldr	r3, [pc, #236]	; (8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800441c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004420:	d10f      	bne.n	8004442 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
            frequency = HSI_VALUE;
 8004422:	4b3a      	ldr	r3, [pc, #232]	; (800450c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8004424:	61fb      	str	r3, [r7, #28]
          break;
 8004426:	e00c      	b.n	8004442 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004428:	4b36      	ldr	r3, [pc, #216]	; (8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800442a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b02      	cmp	r3, #2
 8004434:	d107      	bne.n	8004446 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = LSE_VALUE;
 8004436:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800443a:	61fb      	str	r3, [r7, #28]
          break;
 800443c:	e003      	b.n	8004446 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          break;
 800443e:	bf00      	nop
 8004440:	e35e      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004442:	bf00      	nop
 8004444:	e35c      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004446:	bf00      	nop
        break;
 8004448:	e35a      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800444a:	4b2e      	ldr	r3, [pc, #184]	; (8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800444c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004450:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004454:	60fb      	str	r3, [r7, #12]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2b30      	cmp	r3, #48	; 0x30
 800445a:	d021      	beq.n	80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2b30      	cmp	r3, #48	; 0x30
 8004460:	d829      	bhi.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2b20      	cmp	r3, #32
 8004466:	d011      	beq.n	800448c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2b20      	cmp	r3, #32
 800446c:	d823      	bhi.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d003      	beq.n	800447c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2b10      	cmp	r3, #16
 8004478:	d004      	beq.n	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
          break;
 800447a:	e01c      	b.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 800447c:	f7fe ffb0 	bl	80033e0 <HAL_RCC_GetPCLK1Freq>
 8004480:	61f8      	str	r0, [r7, #28]
          break;
 8004482:	e01d      	b.n	80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          frequency = HAL_RCC_GetSysClockFreq();
 8004484:	f7fe ff16 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 8004488:	61f8      	str	r0, [r7, #28]
          break;
 800448a:	e019      	b.n	80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800448c:	4b1d      	ldr	r3, [pc, #116]	; (8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004494:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004498:	d10f      	bne.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
            frequency = HSI_VALUE;
 800449a:	4b1c      	ldr	r3, [pc, #112]	; (800450c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800449c:	61fb      	str	r3, [r7, #28]
          break;
 800449e:	e00c      	b.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80044a0:	4b18      	ldr	r3, [pc, #96]	; (8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80044a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a6:	f003 0302 	and.w	r3, r3, #2
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d107      	bne.n	80044be <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = LSE_VALUE;
 80044ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044b2:	61fb      	str	r3, [r7, #28]
          break;
 80044b4:	e003      	b.n	80044be <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          break;
 80044b6:	bf00      	nop
 80044b8:	e322      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80044ba:	bf00      	nop
 80044bc:	e320      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80044be:	bf00      	nop
        break;
 80044c0:	e31e      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80044c2:	4b10      	ldr	r3, [pc, #64]	; (8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80044c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80044cc:	60fb      	str	r3, [r7, #12]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2bc0      	cmp	r3, #192	; 0xc0
 80044d2:	d027      	beq.n	8004524 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2bc0      	cmp	r3, #192	; 0xc0
 80044d8:	d82f      	bhi.n	800453a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2b80      	cmp	r3, #128	; 0x80
 80044de:	d017      	beq.n	8004510 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2b80      	cmp	r3, #128	; 0x80
 80044e4:	d829      	bhi.n	800453a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d003      	beq.n	80044f4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2b40      	cmp	r3, #64	; 0x40
 80044f0:	d004      	beq.n	80044fc <HAL_RCCEx_GetPeriphCLKFreq+0x828>
          break;
 80044f2:	e022      	b.n	800453a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
          frequency = HAL_RCC_GetPCLK1Freq();
 80044f4:	f7fe ff74 	bl	80033e0 <HAL_RCC_GetPCLK1Freq>
 80044f8:	61f8      	str	r0, [r7, #28]
          break;
 80044fa:	e023      	b.n	8004544 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          frequency = HAL_RCC_GetSysClockFreq();
 80044fc:	f7fe feda 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 8004500:	61f8      	str	r0, [r7, #28]
          break;
 8004502:	e01f      	b.n	8004544 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8004504:	40021000 	.word	0x40021000
 8004508:	02dc6c00 	.word	0x02dc6c00
 800450c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004510:	4b9b      	ldr	r3, [pc, #620]	; (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004518:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800451c:	d10f      	bne.n	800453e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
            frequency = HSI_VALUE;
 800451e:	4b99      	ldr	r3, [pc, #612]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004520:	61fb      	str	r3, [r7, #28]
          break;
 8004522:	e00c      	b.n	800453e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004524:	4b96      	ldr	r3, [pc, #600]	; (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	2b02      	cmp	r3, #2
 8004530:	d107      	bne.n	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = LSE_VALUE;
 8004532:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004536:	61fb      	str	r3, [r7, #28]
          break;
 8004538:	e003      	b.n	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          break;
 800453a:	bf00      	nop
 800453c:	e2e0      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800453e:	bf00      	nop
 8004540:	e2de      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004542:	bf00      	nop
        break;
 8004544:	e2dc      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004546:	4b8e      	ldr	r3, [pc, #568]	; (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800454c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004550:	60fb      	str	r3, [r7, #12]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004558:	d025      	beq.n	80045a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004560:	d82c      	bhi.n	80045bc <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004568:	d013      	beq.n	8004592 <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004570:	d824      	bhi.n	80045bc <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d004      	beq.n	8004582 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800457e:	d004      	beq.n	800458a <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
          break;
 8004580:	e01c      	b.n	80045bc <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004582:	f7fe ff2d 	bl	80033e0 <HAL_RCC_GetPCLK1Freq>
 8004586:	61f8      	str	r0, [r7, #28]
          break;
 8004588:	e01d      	b.n	80045c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = HAL_RCC_GetSysClockFreq();
 800458a:	f7fe fe93 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 800458e:	61f8      	str	r0, [r7, #28]
          break;
 8004590:	e019      	b.n	80045c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004592:	4b7b      	ldr	r3, [pc, #492]	; (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800459a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800459e:	d10f      	bne.n	80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
            frequency = HSI_VALUE;
 80045a0:	4b78      	ldr	r3, [pc, #480]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80045a2:	61fb      	str	r3, [r7, #28]
          break;
 80045a4:	e00c      	b.n	80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80045a6:	4b76      	ldr	r3, [pc, #472]	; (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80045a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ac:	f003 0302 	and.w	r3, r3, #2
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d107      	bne.n	80045c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = LSE_VALUE;
 80045b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045b8:	61fb      	str	r3, [r7, #28]
          break;
 80045ba:	e003      	b.n	80045c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          break;
 80045bc:	bf00      	nop
 80045be:	e29f      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80045c0:	bf00      	nop
 80045c2:	e29d      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80045c4:	bf00      	nop
        break;
 80045c6:	e29b      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80045c8:	4b6d      	ldr	r3, [pc, #436]	; (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80045ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ce:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80045d2:	60fb      	str	r3, [r7, #12]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045da:	d025      	beq.n	8004628 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045e2:	d82c      	bhi.n	800463e <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045ea:	d013      	beq.n	8004614 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045f2:	d824      	bhi.n	800463e <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d004      	beq.n	8004604 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004600:	d004      	beq.n	800460c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
          break;
 8004602:	e01c      	b.n	800463e <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004604:	f7fe feec 	bl	80033e0 <HAL_RCC_GetPCLK1Freq>
 8004608:	61f8      	str	r0, [r7, #28]
          break;
 800460a:	e01d      	b.n	8004648 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = HAL_RCC_GetSysClockFreq();
 800460c:	f7fe fe52 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 8004610:	61f8      	str	r0, [r7, #28]
          break;
 8004612:	e019      	b.n	8004648 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004614:	4b5a      	ldr	r3, [pc, #360]	; (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800461c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004620:	d10f      	bne.n	8004642 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
            frequency = HSI_VALUE;
 8004622:	4b58      	ldr	r3, [pc, #352]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004624:	61fb      	str	r3, [r7, #28]
          break;
 8004626:	e00c      	b.n	8004642 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004628:	4b55      	ldr	r3, [pc, #340]	; (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800462a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b02      	cmp	r3, #2
 8004634:	d107      	bne.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = LSE_VALUE;
 8004636:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800463a:	61fb      	str	r3, [r7, #28]
          break;
 800463c:	e003      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          break;
 800463e:	bf00      	nop
 8004640:	e25e      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004642:	bf00      	nop
 8004644:	e25c      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004646:	bf00      	nop
        break;
 8004648:	e25a      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800464a:	4b4d      	ldr	r3, [pc, #308]	; (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800464c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004650:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004654:	60fb      	str	r3, [r7, #12]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800465c:	d007      	beq.n	800466e <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004664:	d12f      	bne.n	80046c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          frequency = HAL_RCC_GetSysClockFreq();
 8004666:	f7fe fe25 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 800466a:	61f8      	str	r0, [r7, #28]
          break;
 800466c:	e02e      	b.n	80046cc <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800466e:	4b44      	ldr	r3, [pc, #272]	; (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004676:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800467a:	d126      	bne.n	80046ca <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
 800467c:	4b40      	ldr	r3, [pc, #256]	; (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d020      	beq.n	80046ca <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004688:	4b3d      	ldr	r3, [pc, #244]	; (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	0a1b      	lsrs	r3, r3, #8
 800468e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004692:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	68ba      	ldr	r2, [r7, #8]
 8004698:	fb03 f202 	mul.w	r2, r3, r2
 800469c:	4b38      	ldr	r3, [pc, #224]	; (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	091b      	lsrs	r3, r3, #4
 80046a2:	f003 030f 	and.w	r3, r3, #15
 80046a6:	3301      	adds	r3, #1
 80046a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ac:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80046ae:	4b34      	ldr	r3, [pc, #208]	; (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	0e5b      	lsrs	r3, r3, #25
 80046b4:	f003 0303 	and.w	r3, r3, #3
 80046b8:	3301      	adds	r3, #1
 80046ba:	005b      	lsls	r3, r3, #1
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c2:	61fb      	str	r3, [r7, #28]
          break;
 80046c4:	e001      	b.n	80046ca <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          break;
 80046c6:	bf00      	nop
 80046c8:	e21a      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80046ca:	bf00      	nop
        break;
 80046cc:	e218      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80046ce:	4b2c      	ldr	r3, [pc, #176]	; (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80046d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046d4:	f003 0304 	and.w	r3, r3, #4
 80046d8:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d103      	bne.n	80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>
          frequency = HAL_RCC_GetPCLK2Freq();
 80046e0:	f7fe fe94 	bl	800340c <HAL_RCC_GetPCLK2Freq>
 80046e4:	61f8      	str	r0, [r7, #28]
        break;
 80046e6:	e20b      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          frequency = HAL_RCC_GetSysClockFreq();
 80046e8:	f7fe fde4 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 80046ec:	61f8      	str	r0, [r7, #28]
        break;
 80046ee:	e207      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 80046f0:	4b23      	ldr	r3, [pc, #140]	; (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80046f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046f6:	f003 0318 	and.w	r3, r3, #24
 80046fa:	60fb      	str	r3, [r7, #12]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2b10      	cmp	r3, #16
 8004700:	d010      	beq.n	8004724 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2b10      	cmp	r3, #16
 8004706:	d834      	bhi.n	8004772 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d003      	beq.n	8004716 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2b08      	cmp	r3, #8
 8004712:	d024      	beq.n	800475e <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          break;
 8004714:	e02d      	b.n	8004772 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8004716:	69b9      	ldr	r1, [r7, #24]
 8004718:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800471c:	f000 fbe2 	bl	8004ee4 <RCCEx_GetSAIxPeriphCLKFreq>
 8004720:	61f8      	str	r0, [r7, #28]
          break;
 8004722:	e02b      	b.n	800477c <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004724:	4b16      	ldr	r3, [pc, #88]	; (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0302 	and.w	r3, r3, #2
 800472c:	2b02      	cmp	r3, #2
 800472e:	d122      	bne.n	8004776 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004730:	4b13      	ldr	r3, [pc, #76]	; (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0308 	and.w	r3, r3, #8
 8004738:	2b00      	cmp	r3, #0
 800473a:	d005      	beq.n	8004748 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800473c:	4b10      	ldr	r3, [pc, #64]	; (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	091b      	lsrs	r3, r3, #4
 8004742:	f003 030f 	and.w	r3, r3, #15
 8004746:	e005      	b.n	8004754 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8004748:	4b0d      	ldr	r3, [pc, #52]	; (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800474a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800474e:	0a1b      	lsrs	r3, r3, #8
 8004750:	f003 030f 	and.w	r3, r3, #15
 8004754:	4a0c      	ldr	r2, [pc, #48]	; (8004788 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8004756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800475a:	61fb      	str	r3, [r7, #28]
          break;
 800475c:	e00b      	b.n	8004776 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800475e:	4b08      	ldr	r3, [pc, #32]	; (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004766:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800476a:	d106      	bne.n	800477a <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = HSI_VALUE;
 800476c:	4b05      	ldr	r3, [pc, #20]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800476e:	61fb      	str	r3, [r7, #28]
          break;
 8004770:	e003      	b.n	800477a <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          break;
 8004772:	bf00      	nop
 8004774:	e1c4      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004776:	bf00      	nop
 8004778:	e1c2      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800477a:	bf00      	nop
        break;
 800477c:	e1c0      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 800477e:	bf00      	nop
 8004780:	40021000 	.word	0x40021000
 8004784:	00f42400 	.word	0x00f42400
 8004788:	08008e94 	.word	0x08008e94
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800478c:	4b96      	ldr	r3, [pc, #600]	; (80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800478e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004792:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004796:	60fb      	str	r3, [r7, #12]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800479e:	d013      	beq.n	80047c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047a6:	d819      	bhi.n	80047dc <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d004      	beq.n	80047b8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047b4:	d004      	beq.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
          break;
 80047b6:	e011      	b.n	80047dc <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          frequency = HAL_RCC_GetPCLK1Freq();
 80047b8:	f7fe fe12 	bl	80033e0 <HAL_RCC_GetPCLK1Freq>
 80047bc:	61f8      	str	r0, [r7, #28]
          break;
 80047be:	e010      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          frequency = HAL_RCC_GetSysClockFreq();
 80047c0:	f7fe fd78 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 80047c4:	61f8      	str	r0, [r7, #28]
          break;
 80047c6:	e00c      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80047c8:	4b87      	ldr	r3, [pc, #540]	; (80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047d4:	d104      	bne.n	80047e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = HSI_VALUE;
 80047d6:	4b85      	ldr	r3, [pc, #532]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80047d8:	61fb      	str	r3, [r7, #28]
          break;
 80047da:	e001      	b.n	80047e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 80047dc:	bf00      	nop
 80047de:	e18f      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80047e0:	bf00      	nop
        break;
 80047e2:	e18d      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80047e4:	4b80      	ldr	r3, [pc, #512]	; (80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80047e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80047ee:	60fb      	str	r3, [r7, #12]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047f6:	d013      	beq.n	8004820 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047fe:	d819      	bhi.n	8004834 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d004      	beq.n	8004810 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800480c:	d004      	beq.n	8004818 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>
          break;
 800480e:	e011      	b.n	8004834 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004810:	f7fe fde6 	bl	80033e0 <HAL_RCC_GetPCLK1Freq>
 8004814:	61f8      	str	r0, [r7, #28]
          break;
 8004816:	e010      	b.n	800483a <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          frequency = HAL_RCC_GetSysClockFreq();
 8004818:	f7fe fd4c 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 800481c:	61f8      	str	r0, [r7, #28]
          break;
 800481e:	e00c      	b.n	800483a <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004820:	4b71      	ldr	r3, [pc, #452]	; (80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004828:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800482c:	d104      	bne.n	8004838 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
            frequency = HSI_VALUE;
 800482e:	4b6f      	ldr	r3, [pc, #444]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004830:	61fb      	str	r3, [r7, #28]
          break;
 8004832:	e001      	b.n	8004838 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          break;
 8004834:	bf00      	nop
 8004836:	e163      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004838:	bf00      	nop
        break;
 800483a:	e161      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800483c:	4b6a      	ldr	r3, [pc, #424]	; (80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800483e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004842:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004846:	60fb      	str	r3, [r7, #12]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800484e:	d013      	beq.n	8004878 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004856:	d819      	bhi.n	800488c <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d004      	beq.n	8004868 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004864:	d004      	beq.n	8004870 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
          break;
 8004866:	e011      	b.n	800488c <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004868:	f7fe fdba 	bl	80033e0 <HAL_RCC_GetPCLK1Freq>
 800486c:	61f8      	str	r0, [r7, #28]
          break;
 800486e:	e010      	b.n	8004892 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          frequency = HAL_RCC_GetSysClockFreq();
 8004870:	f7fe fd20 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 8004874:	61f8      	str	r0, [r7, #28]
          break;
 8004876:	e00c      	b.n	8004892 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004878:	4b5b      	ldr	r3, [pc, #364]	; (80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004880:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004884:	d104      	bne.n	8004890 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
            frequency = HSI_VALUE;
 8004886:	4b59      	ldr	r3, [pc, #356]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004888:	61fb      	str	r3, [r7, #28]
          break;
 800488a:	e001      	b.n	8004890 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          break;
 800488c:	bf00      	nop
 800488e:	e137      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004890:	bf00      	nop
        break;
 8004892:	e135      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8004894:	4b54      	ldr	r3, [pc, #336]	; (80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004896:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800489a:	f003 0303 	and.w	r3, r3, #3
 800489e:	60fb      	str	r3, [r7, #12]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d011      	beq.n	80048ca <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d818      	bhi.n	80048de <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d003      	beq.n	80048ba <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d004      	beq.n	80048c2 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
          break;
 80048b8:	e011      	b.n	80048de <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80048ba:	f7fe fd91 	bl	80033e0 <HAL_RCC_GetPCLK1Freq>
 80048be:	61f8      	str	r0, [r7, #28]
          break;
 80048c0:	e010      	b.n	80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          frequency = HAL_RCC_GetSysClockFreq();
 80048c2:	f7fe fcf7 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 80048c6:	61f8      	str	r0, [r7, #28]
          break;
 80048c8:	e00c      	b.n	80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80048ca:	4b47      	ldr	r3, [pc, #284]	; (80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048d6:	d104      	bne.n	80048e2 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
            frequency = HSI_VALUE;
 80048d8:	4b44      	ldr	r3, [pc, #272]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80048da:	61fb      	str	r3, [r7, #28]
          break;
 80048dc:	e001      	b.n	80048e2 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          break;
 80048de:	bf00      	nop
 80048e0:	e10e      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80048e2:	bf00      	nop
        break;
 80048e4:	e10c      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80048e6:	4b40      	ldr	r3, [pc, #256]	; (80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80048e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ec:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80048f0:	60fb      	str	r3, [r7, #12]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80048f8:	d02c      	beq.n	8004954 <HAL_RCCEx_GetPeriphCLKFreq+0xc80>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004900:	d833      	bhi.n	800496a <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004908:	d01a      	beq.n	8004940 <HAL_RCCEx_GetPeriphCLKFreq+0xc6c>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004910:	d82b      	bhi.n	800496a <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d004      	beq.n	8004922 <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800491e:	d004      	beq.n	800492a <HAL_RCCEx_GetPeriphCLKFreq+0xc56>
          break;
 8004920:	e023      	b.n	800496a <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004922:	f7fe fd5d 	bl	80033e0 <HAL_RCC_GetPCLK1Freq>
 8004926:	61f8      	str	r0, [r7, #28]
          break;
 8004928:	e026      	b.n	8004978 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800492a:	4b2f      	ldr	r3, [pc, #188]	; (80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800492c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004930:	f003 0302 	and.w	r3, r3, #2
 8004934:	2b02      	cmp	r3, #2
 8004936:	d11a      	bne.n	800496e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
              frequency = LSI_VALUE;
 8004938:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800493c:	61fb      	str	r3, [r7, #28]
          break;
 800493e:	e016      	b.n	800496e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004940:	4b29      	ldr	r3, [pc, #164]	; (80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004948:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800494c:	d111      	bne.n	8004972 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
            frequency = HSI_VALUE;
 800494e:	4b27      	ldr	r3, [pc, #156]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004950:	61fb      	str	r3, [r7, #28]
          break;
 8004952:	e00e      	b.n	8004972 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004954:	4b24      	ldr	r3, [pc, #144]	; (80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	2b02      	cmp	r3, #2
 8004960:	d109      	bne.n	8004976 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = LSE_VALUE;
 8004962:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004966:	61fb      	str	r3, [r7, #28]
          break;
 8004968:	e005      	b.n	8004976 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          break;
 800496a:	bf00      	nop
 800496c:	e0c8      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800496e:	bf00      	nop
 8004970:	e0c6      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004972:	bf00      	nop
 8004974:	e0c4      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004976:	bf00      	nop
        break;
 8004978:	e0c2      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800497a:	4b1b      	ldr	r3, [pc, #108]	; (80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800497c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004980:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004984:	60fb      	str	r3, [r7, #12]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800498c:	d030      	beq.n	80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004994:	d837      	bhi.n	8004a06 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800499c:	d01a      	beq.n	80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049a4:	d82f      	bhi.n	8004a06 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d004      	beq.n	80049b6 <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049b2:	d004      	beq.n	80049be <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          break;
 80049b4:	e027      	b.n	8004a06 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = HAL_RCC_GetPCLK1Freq();
 80049b6:	f7fe fd13 	bl	80033e0 <HAL_RCC_GetPCLK1Freq>
 80049ba:	61f8      	str	r0, [r7, #28]
          break;
 80049bc:	e02a      	b.n	8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80049be:	4b0a      	ldr	r3, [pc, #40]	; (80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80049c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049c4:	f003 0302 	and.w	r3, r3, #2
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d11e      	bne.n	8004a0a <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
              frequency = LSI_VALUE;
 80049cc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80049d0:	61fb      	str	r3, [r7, #28]
          break;
 80049d2:	e01a      	b.n	8004a0a <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80049d4:	4b04      	ldr	r3, [pc, #16]	; (80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049e0:	d115      	bne.n	8004a0e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
            frequency = HSI_VALUE;
 80049e2:	4b02      	ldr	r3, [pc, #8]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80049e4:	61fb      	str	r3, [r7, #28]
          break;
 80049e6:	e012      	b.n	8004a0e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 80049e8:	40021000 	.word	0x40021000
 80049ec:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80049f0:	4b46      	ldr	r3, [pc, #280]	; (8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80049f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f6:	f003 0302 	and.w	r3, r3, #2
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d109      	bne.n	8004a12 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = LSE_VALUE;
 80049fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a02:	61fb      	str	r3, [r7, #28]
          break;
 8004a04:	e005      	b.n	8004a12 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
          break;
 8004a06:	bf00      	nop
 8004a08:	e07a      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004a0a:	bf00      	nop
 8004a0c:	e078      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004a0e:	bf00      	nop
 8004a10:	e076      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004a12:	bf00      	nop
        break;
 8004a14:	e074      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8004a16:	4b3d      	ldr	r3, [pc, #244]	; (8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004a18:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a1c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004a20:	60fb      	str	r3, [r7, #12]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a28:	d02c      	beq.n	8004a84 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a30:	d855      	bhi.n	8004ade <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d004      	beq.n	8004a42 <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a3e:	d004      	beq.n	8004a4a <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
          break;
 8004a40:	e04d      	b.n	8004ade <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
          frequency = HAL_RCC_GetSysClockFreq();
 8004a42:	f7fe fc37 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 8004a46:	61f8      	str	r0, [r7, #28]
          break;
 8004a48:	e04e      	b.n	8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004a4a:	4b30      	ldr	r3, [pc, #192]	; (8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d145      	bne.n	8004ae2 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004a56:	4b2d      	ldr	r3, [pc, #180]	; (8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0308 	and.w	r3, r3, #8
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d005      	beq.n	8004a6e <HAL_RCCEx_GetPeriphCLKFreq+0xd9a>
 8004a62:	4b2a      	ldr	r3, [pc, #168]	; (8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	091b      	lsrs	r3, r3, #4
 8004a68:	f003 030f 	and.w	r3, r3, #15
 8004a6c:	e005      	b.n	8004a7a <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
 8004a6e:	4b27      	ldr	r3, [pc, #156]	; (8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004a70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a74:	0a1b      	lsrs	r3, r3, #8
 8004a76:	f003 030f 	and.w	r3, r3, #15
 8004a7a:	4a25      	ldr	r2, [pc, #148]	; (8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8004a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a80:	61fb      	str	r3, [r7, #28]
          break;
 8004a82:	e02e      	b.n	8004ae2 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004a84:	4b21      	ldr	r3, [pc, #132]	; (8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a90:	d129      	bne.n	8004ae6 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004a92:	4b1e      	ldr	r3, [pc, #120]	; (8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a9e:	d122      	bne.n	8004ae6 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004aa0:	4b1a      	ldr	r3, [pc, #104]	; (8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	0a1b      	lsrs	r3, r3, #8
 8004aa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004aaa:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	fb03 f202 	mul.w	r2, r3, r2
 8004ab4:	4b15      	ldr	r3, [pc, #84]	; (8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	091b      	lsrs	r3, r3, #4
 8004aba:	f003 030f 	and.w	r3, r3, #15
 8004abe:	3301      	adds	r3, #1
 8004ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac4:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8004ac6:	4b11      	ldr	r3, [pc, #68]	; (8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	0d5b      	lsrs	r3, r3, #21
 8004acc:	f003 0303 	and.w	r3, r3, #3
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	005b      	lsls	r3, r3, #1
 8004ad4:	69ba      	ldr	r2, [r7, #24]
 8004ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ada:	61fb      	str	r3, [r7, #28]
          break;
 8004adc:	e003      	b.n	8004ae6 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          break;
 8004ade:	bf00      	nop
 8004ae0:	e00e      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004ae2:	bf00      	nop
 8004ae4:	e00c      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004ae6:	bf00      	nop
        break;
 8004ae8:	e00a      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8004aea:	bf00      	nop
 8004aec:	e008      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8004aee:	bf00      	nop
 8004af0:	e006      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8004af2:	bf00      	nop
 8004af4:	e004      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8004af6:	bf00      	nop
 8004af8:	e002      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8004afa:	bf00      	nop
 8004afc:	e000      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8004afe:	bf00      	nop
    }
  }

  return(frequency);
 8004b00:	69fb      	ldr	r3, [r7, #28]
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3720      	adds	r7, #32
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	40021000 	.word	0x40021000
 8004b10:	08008e94 	.word	0x08008e94

08004b14 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b22:	4b72      	ldr	r3, [pc, #456]	; (8004cec <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	f003 0303 	and.w	r3, r3, #3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00e      	beq.n	8004b4c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004b2e:	4b6f      	ldr	r3, [pc, #444]	; (8004cec <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	f003 0203 	and.w	r2, r3, #3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d103      	bne.n	8004b46 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
       ||
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d142      	bne.n	8004bcc <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	73fb      	strb	r3, [r7, #15]
 8004b4a:	e03f      	b.n	8004bcc <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2b03      	cmp	r3, #3
 8004b52:	d018      	beq.n	8004b86 <RCCEx_PLLSAI1_Config+0x72>
 8004b54:	2b03      	cmp	r3, #3
 8004b56:	d825      	bhi.n	8004ba4 <RCCEx_PLLSAI1_Config+0x90>
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d002      	beq.n	8004b62 <RCCEx_PLLSAI1_Config+0x4e>
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d009      	beq.n	8004b74 <RCCEx_PLLSAI1_Config+0x60>
 8004b60:	e020      	b.n	8004ba4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b62:	4b62      	ldr	r3, [pc, #392]	; (8004cec <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0302 	and.w	r3, r3, #2
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d11d      	bne.n	8004baa <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b72:	e01a      	b.n	8004baa <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b74:	4b5d      	ldr	r3, [pc, #372]	; (8004cec <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d116      	bne.n	8004bae <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b84:	e013      	b.n	8004bae <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b86:	4b59      	ldr	r3, [pc, #356]	; (8004cec <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d10f      	bne.n	8004bb2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b92:	4b56      	ldr	r3, [pc, #344]	; (8004cec <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d109      	bne.n	8004bb2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ba2:	e006      	b.n	8004bb2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ba8:	e004      	b.n	8004bb4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004baa:	bf00      	nop
 8004bac:	e002      	b.n	8004bb4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004bae:	bf00      	nop
 8004bb0:	e000      	b.n	8004bb4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004bb2:	bf00      	nop
    }

    if(status == HAL_OK)
 8004bb4:	7bfb      	ldrb	r3, [r7, #15]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d108      	bne.n	8004bcc <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004bba:	4b4c      	ldr	r3, [pc, #304]	; (8004cec <RCCEx_PLLSAI1_Config+0x1d8>)
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	f023 0203 	bic.w	r2, r3, #3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4949      	ldr	r1, [pc, #292]	; (8004cec <RCCEx_PLLSAI1_Config+0x1d8>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004bcc:	7bfb      	ldrb	r3, [r7, #15]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	f040 8086 	bne.w	8004ce0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004bd4:	4b45      	ldr	r3, [pc, #276]	; (8004cec <RCCEx_PLLSAI1_Config+0x1d8>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a44      	ldr	r2, [pc, #272]	; (8004cec <RCCEx_PLLSAI1_Config+0x1d8>)
 8004bda:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004bde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004be0:	f7fc ffde 	bl	8001ba0 <HAL_GetTick>
 8004be4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004be6:	e009      	b.n	8004bfc <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004be8:	f7fc ffda 	bl	8001ba0 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d902      	bls.n	8004bfc <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	73fb      	strb	r3, [r7, #15]
        break;
 8004bfa:	e005      	b.n	8004c08 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004bfc:	4b3b      	ldr	r3, [pc, #236]	; (8004cec <RCCEx_PLLSAI1_Config+0x1d8>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d1ef      	bne.n	8004be8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004c08:	7bfb      	ldrb	r3, [r7, #15]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d168      	bne.n	8004ce0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d113      	bne.n	8004c3c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c14:	4b35      	ldr	r3, [pc, #212]	; (8004cec <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c16:	691a      	ldr	r2, [r3, #16]
 8004c18:	4b35      	ldr	r3, [pc, #212]	; (8004cf0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	6892      	ldr	r2, [r2, #8]
 8004c20:	0211      	lsls	r1, r2, #8
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	68d2      	ldr	r2, [r2, #12]
 8004c26:	06d2      	lsls	r2, r2, #27
 8004c28:	4311      	orrs	r1, r2
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	6852      	ldr	r2, [r2, #4]
 8004c2e:	3a01      	subs	r2, #1
 8004c30:	0112      	lsls	r2, r2, #4
 8004c32:	430a      	orrs	r2, r1
 8004c34:	492d      	ldr	r1, [pc, #180]	; (8004cec <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	610b      	str	r3, [r1, #16]
 8004c3a:	e02d      	b.n	8004c98 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d115      	bne.n	8004c6e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c42:	4b2a      	ldr	r3, [pc, #168]	; (8004cec <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c44:	691a      	ldr	r2, [r3, #16]
 8004c46:	4b2b      	ldr	r3, [pc, #172]	; (8004cf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c48:	4013      	ands	r3, r2
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	6892      	ldr	r2, [r2, #8]
 8004c4e:	0211      	lsls	r1, r2, #8
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	6912      	ldr	r2, [r2, #16]
 8004c54:	0852      	lsrs	r2, r2, #1
 8004c56:	3a01      	subs	r2, #1
 8004c58:	0552      	lsls	r2, r2, #21
 8004c5a:	4311      	orrs	r1, r2
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	6852      	ldr	r2, [r2, #4]
 8004c60:	3a01      	subs	r2, #1
 8004c62:	0112      	lsls	r2, r2, #4
 8004c64:	430a      	orrs	r2, r1
 8004c66:	4921      	ldr	r1, [pc, #132]	; (8004cec <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	610b      	str	r3, [r1, #16]
 8004c6c:	e014      	b.n	8004c98 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c6e:	4b1f      	ldr	r3, [pc, #124]	; (8004cec <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c70:	691a      	ldr	r2, [r3, #16]
 8004c72:	4b21      	ldr	r3, [pc, #132]	; (8004cf8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c74:	4013      	ands	r3, r2
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	6892      	ldr	r2, [r2, #8]
 8004c7a:	0211      	lsls	r1, r2, #8
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	6952      	ldr	r2, [r2, #20]
 8004c80:	0852      	lsrs	r2, r2, #1
 8004c82:	3a01      	subs	r2, #1
 8004c84:	0652      	lsls	r2, r2, #25
 8004c86:	4311      	orrs	r1, r2
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	6852      	ldr	r2, [r2, #4]
 8004c8c:	3a01      	subs	r2, #1
 8004c8e:	0112      	lsls	r2, r2, #4
 8004c90:	430a      	orrs	r2, r1
 8004c92:	4916      	ldr	r1, [pc, #88]	; (8004cec <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004c98:	4b14      	ldr	r3, [pc, #80]	; (8004cec <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a13      	ldr	r2, [pc, #76]	; (8004cec <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c9e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ca2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ca4:	f7fc ff7c 	bl	8001ba0 <HAL_GetTick>
 8004ca8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004caa:	e009      	b.n	8004cc0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004cac:	f7fc ff78 	bl	8001ba0 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d902      	bls.n	8004cc0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	73fb      	strb	r3, [r7, #15]
          break;
 8004cbe:	e005      	b.n	8004ccc <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004cc0:	4b0a      	ldr	r3, [pc, #40]	; (8004cec <RCCEx_PLLSAI1_Config+0x1d8>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d0ef      	beq.n	8004cac <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004ccc:	7bfb      	ldrb	r3, [r7, #15]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d106      	bne.n	8004ce0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004cd2:	4b06      	ldr	r3, [pc, #24]	; (8004cec <RCCEx_PLLSAI1_Config+0x1d8>)
 8004cd4:	691a      	ldr	r2, [r3, #16]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	4904      	ldr	r1, [pc, #16]	; (8004cec <RCCEx_PLLSAI1_Config+0x1d8>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	40021000 	.word	0x40021000
 8004cf0:	07ff800f 	.word	0x07ff800f
 8004cf4:	ff9f800f 	.word	0xff9f800f
 8004cf8:	f9ff800f 	.word	0xf9ff800f

08004cfc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d06:	2300      	movs	r3, #0
 8004d08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d0a:	4b72      	ldr	r3, [pc, #456]	; (8004ed4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	f003 0303 	and.w	r3, r3, #3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00e      	beq.n	8004d34 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004d16:	4b6f      	ldr	r3, [pc, #444]	; (8004ed4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	f003 0203 	and.w	r2, r3, #3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d103      	bne.n	8004d2e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
       ||
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d142      	bne.n	8004db4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	73fb      	strb	r3, [r7, #15]
 8004d32:	e03f      	b.n	8004db4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2b03      	cmp	r3, #3
 8004d3a:	d018      	beq.n	8004d6e <RCCEx_PLLSAI2_Config+0x72>
 8004d3c:	2b03      	cmp	r3, #3
 8004d3e:	d825      	bhi.n	8004d8c <RCCEx_PLLSAI2_Config+0x90>
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d002      	beq.n	8004d4a <RCCEx_PLLSAI2_Config+0x4e>
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d009      	beq.n	8004d5c <RCCEx_PLLSAI2_Config+0x60>
 8004d48:	e020      	b.n	8004d8c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d4a:	4b62      	ldr	r3, [pc, #392]	; (8004ed4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0302 	and.w	r3, r3, #2
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d11d      	bne.n	8004d92 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d5a:	e01a      	b.n	8004d92 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d5c:	4b5d      	ldr	r3, [pc, #372]	; (8004ed4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d116      	bne.n	8004d96 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d6c:	e013      	b.n	8004d96 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d6e:	4b59      	ldr	r3, [pc, #356]	; (8004ed4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d10f      	bne.n	8004d9a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d7a:	4b56      	ldr	r3, [pc, #344]	; (8004ed4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d109      	bne.n	8004d9a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d8a:	e006      	b.n	8004d9a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	73fb      	strb	r3, [r7, #15]
      break;
 8004d90:	e004      	b.n	8004d9c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004d92:	bf00      	nop
 8004d94:	e002      	b.n	8004d9c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004d96:	bf00      	nop
 8004d98:	e000      	b.n	8004d9c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004d9a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d9c:	7bfb      	ldrb	r3, [r7, #15]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d108      	bne.n	8004db4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004da2:	4b4c      	ldr	r3, [pc, #304]	; (8004ed4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	f023 0203 	bic.w	r2, r3, #3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4949      	ldr	r1, [pc, #292]	; (8004ed4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004db4:	7bfb      	ldrb	r3, [r7, #15]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	f040 8086 	bne.w	8004ec8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004dbc:	4b45      	ldr	r3, [pc, #276]	; (8004ed4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a44      	ldr	r2, [pc, #272]	; (8004ed4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004dc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dc8:	f7fc feea 	bl	8001ba0 <HAL_GetTick>
 8004dcc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004dce:	e009      	b.n	8004de4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004dd0:	f7fc fee6 	bl	8001ba0 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d902      	bls.n	8004de4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	73fb      	strb	r3, [r7, #15]
        break;
 8004de2:	e005      	b.n	8004df0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004de4:	4b3b      	ldr	r3, [pc, #236]	; (8004ed4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1ef      	bne.n	8004dd0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004df0:	7bfb      	ldrb	r3, [r7, #15]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d168      	bne.n	8004ec8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d113      	bne.n	8004e24 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004dfc:	4b35      	ldr	r3, [pc, #212]	; (8004ed4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004dfe:	695a      	ldr	r2, [r3, #20]
 8004e00:	4b35      	ldr	r3, [pc, #212]	; (8004ed8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004e02:	4013      	ands	r3, r2
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	6892      	ldr	r2, [r2, #8]
 8004e08:	0211      	lsls	r1, r2, #8
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	68d2      	ldr	r2, [r2, #12]
 8004e0e:	06d2      	lsls	r2, r2, #27
 8004e10:	4311      	orrs	r1, r2
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	6852      	ldr	r2, [r2, #4]
 8004e16:	3a01      	subs	r2, #1
 8004e18:	0112      	lsls	r2, r2, #4
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	492d      	ldr	r1, [pc, #180]	; (8004ed4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	614b      	str	r3, [r1, #20]
 8004e22:	e02d      	b.n	8004e80 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d115      	bne.n	8004e56 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e2a:	4b2a      	ldr	r3, [pc, #168]	; (8004ed4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e2c:	695a      	ldr	r2, [r3, #20]
 8004e2e:	4b2b      	ldr	r3, [pc, #172]	; (8004edc <RCCEx_PLLSAI2_Config+0x1e0>)
 8004e30:	4013      	ands	r3, r2
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	6892      	ldr	r2, [r2, #8]
 8004e36:	0211      	lsls	r1, r2, #8
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	6912      	ldr	r2, [r2, #16]
 8004e3c:	0852      	lsrs	r2, r2, #1
 8004e3e:	3a01      	subs	r2, #1
 8004e40:	0552      	lsls	r2, r2, #21
 8004e42:	4311      	orrs	r1, r2
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	6852      	ldr	r2, [r2, #4]
 8004e48:	3a01      	subs	r2, #1
 8004e4a:	0112      	lsls	r2, r2, #4
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	4921      	ldr	r1, [pc, #132]	; (8004ed4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	614b      	str	r3, [r1, #20]
 8004e54:	e014      	b.n	8004e80 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e56:	4b1f      	ldr	r3, [pc, #124]	; (8004ed4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e58:	695a      	ldr	r2, [r3, #20]
 8004e5a:	4b21      	ldr	r3, [pc, #132]	; (8004ee0 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	6892      	ldr	r2, [r2, #8]
 8004e62:	0211      	lsls	r1, r2, #8
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	6952      	ldr	r2, [r2, #20]
 8004e68:	0852      	lsrs	r2, r2, #1
 8004e6a:	3a01      	subs	r2, #1
 8004e6c:	0652      	lsls	r2, r2, #25
 8004e6e:	4311      	orrs	r1, r2
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	6852      	ldr	r2, [r2, #4]
 8004e74:	3a01      	subs	r2, #1
 8004e76:	0112      	lsls	r2, r2, #4
 8004e78:	430a      	orrs	r2, r1
 8004e7a:	4916      	ldr	r1, [pc, #88]	; (8004ed4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004e80:	4b14      	ldr	r3, [pc, #80]	; (8004ed4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a13      	ldr	r2, [pc, #76]	; (8004ed4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e8a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e8c:	f7fc fe88 	bl	8001ba0 <HAL_GetTick>
 8004e90:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e92:	e009      	b.n	8004ea8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e94:	f7fc fe84 	bl	8001ba0 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d902      	bls.n	8004ea8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	73fb      	strb	r3, [r7, #15]
          break;
 8004ea6:	e005      	b.n	8004eb4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ea8:	4b0a      	ldr	r3, [pc, #40]	; (8004ed4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d0ef      	beq.n	8004e94 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004eb4:	7bfb      	ldrb	r3, [r7, #15]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d106      	bne.n	8004ec8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004eba:	4b06      	ldr	r3, [pc, #24]	; (8004ed4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ebc:	695a      	ldr	r2, [r3, #20]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	4904      	ldr	r1, [pc, #16]	; (8004ed4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	40021000 	.word	0x40021000
 8004ed8:	07ff800f 	.word	0x07ff800f
 8004edc:	ff9f800f 	.word	0xff9f800f
 8004ee0:	f9ff800f 	.word	0xf9ff800f

08004ee4 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b089      	sub	sp, #36	; 0x24
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f00:	d10b      	bne.n	8004f1a <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004f02:	4b7e      	ldr	r3, [pc, #504]	; (80050fc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004f04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f08:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8004f0c:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	2b60      	cmp	r3, #96	; 0x60
 8004f12:	d112      	bne.n	8004f3a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004f14:	4b7a      	ldr	r3, [pc, #488]	; (8005100 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8004f16:	61fb      	str	r3, [r7, #28]
 8004f18:	e00f      	b.n	8004f3a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f20:	d10b      	bne.n	8004f3a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8004f22:	4b76      	ldr	r3, [pc, #472]	; (80050fc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004f24:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f2c:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f34:	d101      	bne.n	8004f3a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8004f36:	4b72      	ldr	r3, [pc, #456]	; (8005100 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8004f38:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f040 80d6 	bne.w	80050ee <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	2b40      	cmp	r3, #64	; 0x40
 8004f4a:	d003      	beq.n	8004f54 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f52:	d13b      	bne.n	8004fcc <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004f54:	4b69      	ldr	r3, [pc, #420]	; (80050fc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f60:	f040 80c4 	bne.w	80050ec <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8004f64:	4b65      	ldr	r3, [pc, #404]	; (80050fc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f000 80bd 	beq.w	80050ec <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004f72:	4b62      	ldr	r3, [pc, #392]	; (80050fc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	091b      	lsrs	r3, r3, #4
 8004f78:	f003 030f 	and.w	r3, r3, #15
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f84:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004f86:	4b5d      	ldr	r3, [pc, #372]	; (80050fc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	0a1b      	lsrs	r3, r3, #8
 8004f8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f90:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8004f92:	4b5a      	ldr	r3, [pc, #360]	; (80050fc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	0edb      	lsrs	r3, r3, #27
 8004f98:	f003 031f 	and.w	r3, r3, #31
 8004f9c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d10a      	bne.n	8004fba <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004fa4:	4b55      	ldr	r3, [pc, #340]	; (80050fc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d002      	beq.n	8004fb6 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8004fb0:	2311      	movs	r3, #17
 8004fb2:	617b      	str	r3, [r7, #20]
 8004fb4:	e001      	b.n	8004fba <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8004fb6:	2307      	movs	r3, #7
 8004fb8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	fb03 f202 	mul.w	r2, r3, r2
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc8:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004fca:	e08f      	b.n	80050ec <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d13a      	bne.n	8005048 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8004fd2:	4b4a      	ldr	r3, [pc, #296]	; (80050fc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fde:	f040 8086 	bne.w	80050ee <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8004fe2:	4b46      	ldr	r3, [pc, #280]	; (80050fc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d07f      	beq.n	80050ee <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8004fee:	4b43      	ldr	r3, [pc, #268]	; (80050fc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	091b      	lsrs	r3, r3, #4
 8004ff4:	f003 030f 	and.w	r3, r3, #15
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005000:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005002:	4b3e      	ldr	r3, [pc, #248]	; (80050fc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	0a1b      	lsrs	r3, r3, #8
 8005008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800500c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800500e:	4b3b      	ldr	r3, [pc, #236]	; (80050fc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	0edb      	lsrs	r3, r3, #27
 8005014:	f003 031f 	and.w	r3, r3, #31
 8005018:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d10a      	bne.n	8005036 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8005020:	4b36      	ldr	r3, [pc, #216]	; (80050fc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d002      	beq.n	8005032 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 800502c:	2311      	movs	r3, #17
 800502e:	617b      	str	r3, [r7, #20]
 8005030:	e001      	b.n	8005036 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8005032:	2307      	movs	r3, #7
 8005034:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	fb03 f202 	mul.w	r2, r3, r2
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	fbb2 f3f3 	udiv	r3, r2, r3
 8005044:	61fb      	str	r3, [r7, #28]
 8005046:	e052      	b.n	80050ee <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	2b80      	cmp	r3, #128	; 0x80
 800504c:	d003      	beq.n	8005056 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005054:	d109      	bne.n	800506a <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005056:	4b29      	ldr	r3, [pc, #164]	; (80050fc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800505e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005062:	d144      	bne.n	80050ee <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8005064:	4b27      	ldr	r3, [pc, #156]	; (8005104 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8005066:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005068:	e041      	b.n	80050ee <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	2b20      	cmp	r3, #32
 800506e:	d003      	beq.n	8005078 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005076:	d13a      	bne.n	80050ee <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8005078:	4b20      	ldr	r3, [pc, #128]	; (80050fc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005080:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005084:	d133      	bne.n	80050ee <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8005086:	4b1d      	ldr	r3, [pc, #116]	; (80050fc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005088:	695b      	ldr	r3, [r3, #20]
 800508a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d02d      	beq.n	80050ee <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8005092:	4b1a      	ldr	r3, [pc, #104]	; (80050fc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	091b      	lsrs	r3, r3, #4
 8005098:	f003 030f 	and.w	r3, r3, #15
 800509c:	3301      	adds	r3, #1
 800509e:	693a      	ldr	r2, [r7, #16]
 80050a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050a4:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80050a6:	4b15      	ldr	r3, [pc, #84]	; (80050fc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	0a1b      	lsrs	r3, r3, #8
 80050ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050b0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 80050b2:	4b12      	ldr	r3, [pc, #72]	; (80050fc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80050b4:	695b      	ldr	r3, [r3, #20]
 80050b6:	0edb      	lsrs	r3, r3, #27
 80050b8:	f003 031f 	and.w	r3, r3, #31
 80050bc:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d10a      	bne.n	80050da <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80050c4:	4b0d      	ldr	r3, [pc, #52]	; (80050fc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80050c6:	695b      	ldr	r3, [r3, #20]
 80050c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d002      	beq.n	80050d6 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 80050d0:	2311      	movs	r3, #17
 80050d2:	617b      	str	r3, [r7, #20]
 80050d4:	e001      	b.n	80050da <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 80050d6:	2307      	movs	r3, #7
 80050d8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	fb03 f202 	mul.w	r2, r3, r2
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e8:	61fb      	str	r3, [r7, #28]
 80050ea:	e000      	b.n	80050ee <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80050ec:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80050ee:	69fb      	ldr	r3, [r7, #28]
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3724      	adds	r7, #36	; 0x24
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr
 80050fc:	40021000 	.word	0x40021000
 8005100:	001fff68 	.word	0x001fff68
 8005104:	00f42400 	.word	0x00f42400

08005108 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b08a      	sub	sp, #40	; 0x28
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d101      	bne.n	800511a <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e1c7      	b.n	80054aa <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005120:	2b01      	cmp	r3, #1
 8005122:	d10e      	bne.n	8005142 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a81      	ldr	r2, [pc, #516]	; (8005330 <HAL_SAI_Init+0x228>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d107      	bne.n	800513e <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 8005132:	2b01      	cmp	r3, #1
 8005134:	d103      	bne.n	800513e <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800513a:	2b00      	cmp	r3, #0
 800513c:	d001      	beq.n	8005142 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e1b3      	b.n	80054aa <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8005148:	b2db      	uxtb	r3, r3
 800514a:	2b00      	cmp	r3, #0
 800514c:	d106      	bne.n	800515c <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f7fc fbd8 	bl	800190c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 f9b1 	bl	80054c4 <SAI_Disable>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d001      	beq.n	800516c <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e19e      	b.n	80054aa <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2202      	movs	r2, #2
 8005170:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	2b02      	cmp	r3, #2
 800517a:	d00c      	beq.n	8005196 <HAL_SAI_Init+0x8e>
 800517c:	2b02      	cmp	r3, #2
 800517e:	d80d      	bhi.n	800519c <HAL_SAI_Init+0x94>
 8005180:	2b00      	cmp	r3, #0
 8005182:	d002      	beq.n	800518a <HAL_SAI_Init+0x82>
 8005184:	2b01      	cmp	r3, #1
 8005186:	d003      	beq.n	8005190 <HAL_SAI_Init+0x88>
 8005188:	e008      	b.n	800519c <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800518a:	2300      	movs	r3, #0
 800518c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800518e:	e008      	b.n	80051a2 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8005190:	2310      	movs	r3, #16
 8005192:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8005194:	e005      	b.n	80051a2 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8005196:	2320      	movs	r3, #32
 8005198:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800519a:	e002      	b.n	80051a2 <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 800519c:	2300      	movs	r3, #0
 800519e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80051a0:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	2b03      	cmp	r3, #3
 80051a8:	d81d      	bhi.n	80051e6 <HAL_SAI_Init+0xde>
 80051aa:	a201      	add	r2, pc, #4	; (adr r2, 80051b0 <HAL_SAI_Init+0xa8>)
 80051ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b0:	080051c1 	.word	0x080051c1
 80051b4:	080051c7 	.word	0x080051c7
 80051b8:	080051cf 	.word	0x080051cf
 80051bc:	080051d7 	.word	0x080051d7
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 80051c0:	2300      	movs	r3, #0
 80051c2:	61fb      	str	r3, [r7, #28]
      break;
 80051c4:	e012      	b.n	80051ec <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80051c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051ca:	61fb      	str	r3, [r7, #28]
      break;
 80051cc:	e00e      	b.n	80051ec <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80051ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80051d2:	61fb      	str	r3, [r7, #28]
      break;
 80051d4:	e00a      	b.n	80051ec <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80051d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80051da:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80051dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051de:	f043 0301 	orr.w	r3, r3, #1
 80051e2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80051e4:	e002      	b.n	80051ec <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 80051e6:	2300      	movs	r3, #0
 80051e8:	61fb      	str	r3, [r7, #28]
      break;
 80051ea:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a4f      	ldr	r2, [pc, #316]	; (8005330 <HAL_SAI_Init+0x228>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d004      	beq.n	8005200 <HAL_SAI_Init+0xf8>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a4e      	ldr	r2, [pc, #312]	; (8005334 <HAL_SAI_Init+0x22c>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d103      	bne.n	8005208 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 8005200:	4a4d      	ldr	r2, [pc, #308]	; (8005338 <HAL_SAI_Init+0x230>)
 8005202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005204:	6013      	str	r3, [r2, #0]
 8005206:	e002      	b.n	800520e <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8005208:	4a4c      	ldr	r2, [pc, #304]	; (800533c <HAL_SAI_Init+0x234>)
 800520a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520c:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	69db      	ldr	r3, [r3, #28]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d073      	beq.n	80052fe <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a45      	ldr	r2, [pc, #276]	; (8005330 <HAL_SAI_Init+0x228>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d004      	beq.n	800522a <HAL_SAI_Init+0x122>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a43      	ldr	r2, [pc, #268]	; (8005334 <HAL_SAI_Init+0x22c>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d105      	bne.n	8005236 <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800522a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800522e:	f7fe fd51 	bl	8003cd4 <HAL_RCCEx_GetPeriphCLKFreq>
 8005232:	61b8      	str	r0, [r7, #24]
 8005234:	e004      	b.n	8005240 <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8005236:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800523a:	f7fe fd4b 	bl	8003cd4 <HAL_RCCEx_GetPeriphCLKFreq>
 800523e:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	695b      	ldr	r3, [r3, #20]
 8005244:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005248:	d120      	bne.n	800528c <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524e:	2b04      	cmp	r3, #4
 8005250:	d102      	bne.n	8005258 <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8005252:	2340      	movs	r3, #64	; 0x40
 8005254:	613b      	str	r3, [r7, #16]
 8005256:	e00a      	b.n	800526e <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525c:	2b08      	cmp	r3, #8
 800525e:	d103      	bne.n	8005268 <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8005260:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005264:	613b      	str	r3, [r7, #16]
 8005266:	e002      	b.n	800526e <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800526c:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800526e:	69ba      	ldr	r2, [r7, #24]
 8005270:	4613      	mov	r3, r2
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	4413      	add	r3, r2
 8005276:	005b      	lsls	r3, r3, #1
 8005278:	4619      	mov	r1, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	69db      	ldr	r3, [r3, #28]
 800527e:	693a      	ldr	r2, [r7, #16]
 8005280:	fb02 f303 	mul.w	r3, r2, r3
 8005284:	fbb1 f3f3 	udiv	r3, r1, r3
 8005288:	617b      	str	r3, [r7, #20]
 800528a:	e017      	b.n	80052bc <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005290:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005294:	d101      	bne.n	800529a <HAL_SAI_Init+0x192>
 8005296:	2302      	movs	r3, #2
 8005298:	e000      	b.n	800529c <HAL_SAI_Init+0x194>
 800529a:	2301      	movs	r3, #1
 800529c:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800529e:	69ba      	ldr	r2, [r7, #24]
 80052a0:	4613      	mov	r3, r2
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	4413      	add	r3, r2
 80052a6:	005b      	lsls	r3, r3, #1
 80052a8:	4619      	mov	r1, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	69db      	ldr	r3, [r3, #28]
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	fb02 f303 	mul.w	r3, r2, r3
 80052b4:	021b      	lsls	r3, r3, #8
 80052b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80052ba:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	4a20      	ldr	r2, [pc, #128]	; (8005340 <HAL_SAI_Init+0x238>)
 80052c0:	fba2 2303 	umull	r2, r3, r2, r3
 80052c4:	08da      	lsrs	r2, r3, #3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 80052ca:	6979      	ldr	r1, [r7, #20]
 80052cc:	4b1c      	ldr	r3, [pc, #112]	; (8005340 <HAL_SAI_Init+0x238>)
 80052ce:	fba3 2301 	umull	r2, r3, r3, r1
 80052d2:	08da      	lsrs	r2, r3, #3
 80052d4:	4613      	mov	r3, r2
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	4413      	add	r3, r2
 80052da:	005b      	lsls	r3, r3, #1
 80052dc:	1aca      	subs	r2, r1, r3
 80052de:	2a08      	cmp	r2, #8
 80052e0:	d904      	bls.n	80052ec <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	1c5a      	adds	r2, r3, #1
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f0:	2b04      	cmp	r3, #4
 80052f2:	d104      	bne.n	80052fe <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a1b      	ldr	r3, [r3, #32]
 80052f8:	085a      	lsrs	r2, r3, #1
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d003      	beq.n	800530e <HAL_SAI_Init+0x206>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	2b02      	cmp	r3, #2
 800530c:	d109      	bne.n	8005322 <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005312:	2b01      	cmp	r3, #1
 8005314:	d101      	bne.n	800531a <HAL_SAI_Init+0x212>
 8005316:	2300      	movs	r3, #0
 8005318:	e001      	b.n	800531e <HAL_SAI_Init+0x216>
 800531a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800531e:	623b      	str	r3, [r7, #32]
 8005320:	e012      	b.n	8005348 <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005326:	2b01      	cmp	r3, #1
 8005328:	d10c      	bne.n	8005344 <HAL_SAI_Init+0x23c>
 800532a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800532e:	e00a      	b.n	8005346 <HAL_SAI_Init+0x23e>
 8005330:	40015404 	.word	0x40015404
 8005334:	40015424 	.word	0x40015424
 8005338:	40015400 	.word	0x40015400
 800533c:	40015800 	.word	0x40015800
 8005340:	cccccccd 	.word	0xcccccccd
 8005344:	2300      	movs	r3, #0
 8005346:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	6819      	ldr	r1, [r3, #0]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	4b58      	ldr	r3, [pc, #352]	; (80054b4 <HAL_SAI_Init+0x3ac>)
 8005354:	400b      	ands	r3, r1
 8005356:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	6819      	ldr	r1, [r3, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	685a      	ldr	r2, [r3, #4]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005366:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800536c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005372:	431a      	orrs	r2, r3
 8005374:	6a3b      	ldr	r3, [r7, #32]
 8005376:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 8005380:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800538c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	051b      	lsls	r3, r3, #20
 8005394:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800539a:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	430a      	orrs	r2, r1
 80053a2:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	6812      	ldr	r2, [r2, #0]
 80053ae:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80053b2:	f023 030f 	bic.w	r3, r3, #15
 80053b6:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	6859      	ldr	r1, [r3, #4]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	699a      	ldr	r2, [r3, #24]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c6:	431a      	orrs	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053cc:	431a      	orrs	r2, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	430a      	orrs	r2, r1
 80053d4:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	6899      	ldr	r1, [r3, #8]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	4b35      	ldr	r3, [pc, #212]	; (80054b8 <HAL_SAI_Init+0x3b0>)
 80053e2:	400b      	ands	r3, r1
 80053e4:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	6899      	ldr	r1, [r3, #8]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053f0:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80053f6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
                           hsai->FrameInit.FSOffset |
 80053fc:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSDefinition |
 8005402:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005408:	3b01      	subs	r3, #1
 800540a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800540c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	430a      	orrs	r2, r1
 8005414:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68d9      	ldr	r1, [r3, #12]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	f24f 0320 	movw	r3, #61472	; 0xf020
 8005424:	400b      	ands	r3, r1
 8005426:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68d9      	ldr	r1, [r3, #12]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005436:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800543c:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800543e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005444:	3b01      	subs	r3, #1
 8005446:	021b      	lsls	r3, r3, #8
 8005448:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	430a      	orrs	r2, r1
 8005450:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a19      	ldr	r2, [pc, #100]	; (80054bc <HAL_SAI_Init+0x3b4>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d119      	bne.n	8005490 <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800545c:	4b18      	ldr	r3, [pc, #96]	; (80054c0 <HAL_SAI_Init+0x3b8>)
 800545e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005460:	4a17      	ldr	r2, [pc, #92]	; (80054c0 <HAL_SAI_Init+0x3b8>)
 8005462:	f023 0301 	bic.w	r3, r3, #1
 8005466:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800546e:	2b01      	cmp	r3, #1
 8005470:	d10e      	bne.n	8005490 <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800547a:	3b01      	subs	r3, #1
 800547c:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800547e:	4910      	ldr	r1, [pc, #64]	; (80054c0 <HAL_SAI_Init+0x3b8>)
 8005480:	4313      	orrs	r3, r2
 8005482:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8005484:	4b0e      	ldr	r3, [pc, #56]	; (80054c0 <HAL_SAI_Init+0x3b8>)
 8005486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005488:	4a0d      	ldr	r2, [pc, #52]	; (80054c0 <HAL_SAI_Init+0x3b8>)
 800548a:	f043 0301 	orr.w	r3, r3, #1
 800548e:	6453      	str	r3, [r2, #68]	; 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3728      	adds	r7, #40	; 0x28
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	f805c010 	.word	0xf805c010
 80054b8:	fff88000 	.word	0xfff88000
 80054bc:	40015404 	.word	0x40015404
 80054c0:	40015400 	.word	0x40015400

080054c4 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b085      	sub	sp, #20
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80054cc:	4b18      	ldr	r3, [pc, #96]	; (8005530 <SAI_Disable+0x6c>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a18      	ldr	r2, [pc, #96]	; (8005534 <SAI_Disable+0x70>)
 80054d2:	fba2 2303 	umull	r2, r3, r2, r3
 80054d6:	0b1b      	lsrs	r3, r3, #12
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80054dc:	2300      	movs	r3, #0
 80054de:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80054ee:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d10a      	bne.n	800550c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      status = HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	72fb      	strb	r3, [r7, #11]
      break;
 800550a:	e009      	b.n	8005520 <SAI_Disable+0x5c>
    }
    count--;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	3b01      	subs	r3, #1
 8005510:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d1e7      	bne.n	80054f0 <SAI_Disable+0x2c>

  return status;
 8005520:	7afb      	ldrb	r3, [r7, #11]
}
 8005522:	4618      	mov	r0, r3
 8005524:	3714      	adds	r7, #20
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	20000000 	.word	0x20000000
 8005534:	95cbec1b 	.word	0x95cbec1b

08005538 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b08a      	sub	sp, #40	; 0x28
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d101      	bne.n	800554a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e078      	b.n	800563c <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005550:	b2db      	uxtb	r3, r3
 8005552:	2b00      	cmp	r3, #0
 8005554:	d105      	bne.n	8005562 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f7fb fef5 	bl	800134c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2203      	movs	r2, #3
 8005566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f86a 	bl	8005644 <HAL_SD_InitCard>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d001      	beq.n	800557a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e060      	b.n	800563c <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800557a:	f107 0308 	add.w	r3, r7, #8
 800557e:	4619      	mov	r1, r3
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f000 faa5 	bl	8005ad0 <HAL_SD_GetCardStatus>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d001      	beq.n	8005590 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e055      	b.n	800563c <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8005590:	7e3b      	ldrb	r3, [r7, #24]
 8005592:	b2db      	uxtb	r3, r3
 8005594:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8005596:	7e7b      	ldrb	r3, [r7, #25]
 8005598:	b2db      	uxtb	r3, r3
 800559a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d10a      	bne.n	80055ba <HAL_SD_Init+0x82>
 80055a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d102      	bne.n	80055b0 <HAL_SD_Init+0x78>
 80055aa:	6a3b      	ldr	r3, [r7, #32]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d004      	beq.n	80055ba <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055b6:	65da      	str	r2, [r3, #92]	; 0x5c
 80055b8:	e00b      	b.n	80055d2 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d104      	bne.n	80055cc <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80055ca:	e002      	b.n	80055d2 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	4619      	mov	r1, r3
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 fb2f 	bl	8005c3c <HAL_SD_ConfigWideBusOperation>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d001      	beq.n	80055e8 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e029      	b.n	800563c <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 80055e8:	f7fc fada 	bl	8001ba0 <HAL_GetTick>
 80055ec:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80055ee:	e014      	b.n	800561a <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 80055f0:	f7fc fad6 	bl	8001ba0 <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055fe:	d10c      	bne.n	800561a <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005606:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e010      	b.n	800563c <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 fc22 	bl	8005e64 <HAL_SD_GetCardState>
 8005620:	4603      	mov	r3, r0
 8005622:	2b04      	cmp	r3, #4
 8005624:	d1e4      	bne.n	80055f0 <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800563a:	2300      	movs	r3, #0
}
 800563c:	4618      	mov	r0, r3
 800563e:	3728      	adds	r7, #40	; 0x28
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005644:	b5b0      	push	{r4, r5, r7, lr}
 8005646:	b08e      	sub	sp, #56	; 0x38
 8005648:	af04      	add	r7, sp, #16
 800564a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800564c:	2300      	movs	r3, #0
 800564e:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005650:	2300      	movs	r3, #0
 8005652:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005654:	2300      	movs	r3, #0
 8005656:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005658:	2300      	movs	r3, #0
 800565a:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800565c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005660:	f7fe fb38 	bl	8003cd4 <HAL_RCCEx_GetPeriphCLKFreq>
 8005664:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8005666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005668:	2b00      	cmp	r3, #0
 800566a:	d109      	bne.n	8005680 <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800567a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e079      	b.n	8005774 <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8005680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005682:	0a1b      	lsrs	r3, r3, #8
 8005684:	4a3d      	ldr	r2, [pc, #244]	; (800577c <HAL_SD_InitCard+0x138>)
 8005686:	fba2 2303 	umull	r2, r3, r2, r3
 800568a:	091b      	lsrs	r3, r3, #4
 800568c:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	699b      	ldr	r3, [r3, #24]
 8005692:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	699b      	ldr	r3, [r3, #24]
 8005698:	2b01      	cmp	r3, #1
 800569a:	d107      	bne.n	80056ac <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f042 0210 	orr.w	r2, r2, #16
 80056aa:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681d      	ldr	r5, [r3, #0]
 80056b0:	466c      	mov	r4, sp
 80056b2:	f107 0314 	add.w	r3, r7, #20
 80056b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80056ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80056be:	f107 0308 	add.w	r3, r7, #8
 80056c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80056c4:	4628      	mov	r0, r5
 80056c6:	f002 fbe1 	bl	8007e8c <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4618      	mov	r0, r3
 80056d0:	f002 fc13 	bl	8007efa <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	005b      	lsls	r3, r3, #1
 80056d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056da:	fbb2 f3f3 	udiv	r3, r2, r3
 80056de:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 80056e0:	4a27      	ldr	r2, [pc, #156]	; (8005780 <HAL_SD_InitCard+0x13c>)
 80056e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056e8:	3301      	adds	r3, #1
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7fc fa64 	bl	8001bb8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 fc97 	bl	8006024 <SD_PowerON>
 80056f6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80056f8:	6a3b      	ldr	r3, [r7, #32]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00b      	beq.n	8005716 <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2201      	movs	r2, #1
 8005702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800570a:	6a3b      	ldr	r3, [r7, #32]
 800570c:	431a      	orrs	r2, r3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e02e      	b.n	8005774 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 fbc4 	bl	8005ea4 <SD_InitCard>
 800571c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800571e:	6a3b      	ldr	r3, [r7, #32]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d00b      	beq.n	800573c <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005730:	6a3b      	ldr	r3, [r7, #32]
 8005732:	431a      	orrs	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e01b      	b.n	8005774 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005744:	4618      	mov	r0, r3
 8005746:	f002 fc6f 	bl	8008028 <SDMMC_CmdBlockLength>
 800574a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800574c:	6a3b      	ldr	r3, [r7, #32]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00f      	beq.n	8005772 <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a0b      	ldr	r2, [pc, #44]	; (8005784 <HAL_SD_InitCard+0x140>)
 8005758:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800575e:	6a3b      	ldr	r3, [r7, #32]
 8005760:	431a      	orrs	r2, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2201      	movs	r2, #1
 800576a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e000      	b.n	8005774 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 8005772:	2300      	movs	r3, #0
}
 8005774:	4618      	mov	r0, r3
 8005776:	3728      	adds	r7, #40	; 0x28
 8005778:	46bd      	mov	sp, r7
 800577a:	bdb0      	pop	{r4, r5, r7, pc}
 800577c:	014f8b59 	.word	0x014f8b59
 8005780:	00012110 	.word	0x00012110
 8005784:	1fe00fff 	.word	0x1fe00fff

08005788 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005796:	0f9b      	lsrs	r3, r3, #30
 8005798:	b2da      	uxtb	r2, r3
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057a2:	0e9b      	lsrs	r3, r3, #26
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	f003 030f 	and.w	r3, r3, #15
 80057aa:	b2da      	uxtb	r2, r3
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057b4:	0e1b      	lsrs	r3, r3, #24
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	f003 0303 	and.w	r3, r3, #3
 80057bc:	b2da      	uxtb	r2, r3
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057c6:	0c1b      	lsrs	r3, r3, #16
 80057c8:	b2da      	uxtb	r2, r3
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057d2:	0a1b      	lsrs	r3, r3, #8
 80057d4:	b2da      	uxtb	r2, r3
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057de:	b2da      	uxtb	r2, r3
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057e8:	0d1b      	lsrs	r3, r3, #20
 80057ea:	b29a      	uxth	r2, r3
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057f4:	0c1b      	lsrs	r3, r3, #16
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	f003 030f 	and.w	r3, r3, #15
 80057fc:	b2da      	uxtb	r2, r3
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005806:	0bdb      	lsrs	r3, r3, #15
 8005808:	b2db      	uxtb	r3, r3
 800580a:	f003 0301 	and.w	r3, r3, #1
 800580e:	b2da      	uxtb	r2, r3
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005818:	0b9b      	lsrs	r3, r3, #14
 800581a:	b2db      	uxtb	r3, r3
 800581c:	f003 0301 	and.w	r3, r3, #1
 8005820:	b2da      	uxtb	r2, r3
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800582a:	0b5b      	lsrs	r3, r3, #13
 800582c:	b2db      	uxtb	r3, r3
 800582e:	f003 0301 	and.w	r3, r3, #1
 8005832:	b2da      	uxtb	r2, r3
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800583c:	0b1b      	lsrs	r3, r3, #12
 800583e:	b2db      	uxtb	r3, r3
 8005840:	f003 0301 	and.w	r3, r3, #1
 8005844:	b2da      	uxtb	r2, r3
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	2200      	movs	r2, #0
 800584e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005854:	2b00      	cmp	r3, #0
 8005856:	d163      	bne.n	8005920 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800585c:	009a      	lsls	r2, r3, #2
 800585e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005862:	4013      	ands	r3, r2
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005868:	0f92      	lsrs	r2, r2, #30
 800586a:	431a      	orrs	r2, r3
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005874:	0edb      	lsrs	r3, r3, #27
 8005876:	b2db      	uxtb	r3, r3
 8005878:	f003 0307 	and.w	r3, r3, #7
 800587c:	b2da      	uxtb	r2, r3
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005886:	0e1b      	lsrs	r3, r3, #24
 8005888:	b2db      	uxtb	r3, r3
 800588a:	f003 0307 	and.w	r3, r3, #7
 800588e:	b2da      	uxtb	r2, r3
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005898:	0d5b      	lsrs	r3, r3, #21
 800589a:	b2db      	uxtb	r3, r3
 800589c:	f003 0307 	and.w	r3, r3, #7
 80058a0:	b2da      	uxtb	r2, r3
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058aa:	0c9b      	lsrs	r3, r3, #18
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	f003 0307 	and.w	r3, r3, #7
 80058b2:	b2da      	uxtb	r2, r3
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058bc:	0bdb      	lsrs	r3, r3, #15
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	f003 0307 	and.w	r3, r3, #7
 80058c4:	b2da      	uxtb	r2, r3
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	1c5a      	adds	r2, r3, #1
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	7e1b      	ldrb	r3, [r3, #24]
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	f003 0307 	and.w	r3, r3, #7
 80058de:	3302      	adds	r3, #2
 80058e0:	2201      	movs	r2, #1
 80058e2:	fa02 f303 	lsl.w	r3, r2, r3
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80058ea:	fb03 f202 	mul.w	r2, r3, r2
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	7a1b      	ldrb	r3, [r3, #8]
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	f003 030f 	and.w	r3, r3, #15
 80058fc:	2201      	movs	r2, #1
 80058fe:	409a      	lsls	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800590c:	0a52      	lsrs	r2, r2, #9
 800590e:	fb03 f202 	mul.w	r2, r3, r2
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f44f 7200 	mov.w	r2, #512	; 0x200
 800591c:	659a      	str	r2, [r3, #88]	; 0x58
 800591e:	e031      	b.n	8005984 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005924:	2b01      	cmp	r3, #1
 8005926:	d11d      	bne.n	8005964 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800592c:	041b      	lsls	r3, r3, #16
 800592e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005936:	0c1b      	lsrs	r3, r3, #16
 8005938:	431a      	orrs	r2, r3
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	3301      	adds	r3, #1
 8005944:	029a      	lsls	r2, r3, #10
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005958:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	659a      	str	r2, [r3, #88]	; 0x58
 8005962:	e00f      	b.n	8005984 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a58      	ldr	r2, [pc, #352]	; (8005acc <HAL_SD_GetCardCSD+0x344>)
 800596a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005970:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e09d      	b.n	8005ac0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005988:	0b9b      	lsrs	r3, r3, #14
 800598a:	b2db      	uxtb	r3, r3
 800598c:	f003 0301 	and.w	r3, r3, #1
 8005990:	b2da      	uxtb	r2, r3
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800599a:	09db      	lsrs	r3, r3, #7
 800599c:	b2db      	uxtb	r3, r3
 800599e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059a2:	b2da      	uxtb	r2, r3
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059b2:	b2da      	uxtb	r2, r3
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059bc:	0fdb      	lsrs	r3, r3, #31
 80059be:	b2da      	uxtb	r2, r3
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059c8:	0f5b      	lsrs	r3, r3, #29
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	f003 0303 	and.w	r3, r3, #3
 80059d0:	b2da      	uxtb	r2, r3
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059da:	0e9b      	lsrs	r3, r3, #26
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	f003 0307 	and.w	r3, r3, #7
 80059e2:	b2da      	uxtb	r2, r3
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059ec:	0d9b      	lsrs	r3, r3, #22
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	f003 030f 	and.w	r3, r3, #15
 80059f4:	b2da      	uxtb	r2, r3
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059fe:	0d5b      	lsrs	r3, r3, #21
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	f003 0301 	and.w	r3, r3, #1
 8005a06:	b2da      	uxtb	r2, r3
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a1a:	0c1b      	lsrs	r3, r3, #16
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	f003 0301 	and.w	r3, r3, #1
 8005a22:	b2da      	uxtb	r2, r3
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a2e:	0bdb      	lsrs	r3, r3, #15
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	f003 0301 	and.w	r3, r3, #1
 8005a36:	b2da      	uxtb	r2, r3
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a42:	0b9b      	lsrs	r3, r3, #14
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	f003 0301 	and.w	r3, r3, #1
 8005a4a:	b2da      	uxtb	r2, r3
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a56:	0b5b      	lsrs	r3, r3, #13
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	f003 0301 	and.w	r3, r3, #1
 8005a5e:	b2da      	uxtb	r2, r3
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a6a:	0b1b      	lsrs	r3, r3, #12
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	f003 0301 	and.w	r3, r3, #1
 8005a72:	b2da      	uxtb	r2, r3
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a7e:	0a9b      	lsrs	r3, r3, #10
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	f003 0303 	and.w	r3, r3, #3
 8005a86:	b2da      	uxtb	r2, r3
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a92:	0a1b      	lsrs	r3, r3, #8
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	f003 0303 	and.w	r3, r3, #3
 8005a9a:	b2da      	uxtb	r2, r3
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005aa6:	085b      	lsrs	r3, r3, #1
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005aae:	b2da      	uxtb	r2, r3
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr
 8005acc:	1fe00fff 	.word	0x1fe00fff

08005ad0 <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b094      	sub	sp, #80	; 0x50
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8005ada:	2300      	movs	r3, #0
 8005adc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8005ae0:	f107 0308 	add.w	r3, r7, #8
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 fba8 	bl	800623c <SD_SendSDStatus>
 8005aec:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8005aee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d011      	beq.n	8005b18 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a4f      	ldr	r2, [pc, #316]	; (8005c38 <HAL_SD_GetCardStatus+0x168>)
 8005afa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b02:	431a      	orrs	r2, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005b16:	e070      	b.n	8005bfa <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	099b      	lsrs	r3, r3, #6
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	f003 0303 	and.w	r3, r3, #3
 8005b22:	b2da      	uxtb	r2, r3
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	095b      	lsrs	r3, r3, #5
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	f003 0301 	and.w	r3, r3, #1
 8005b32:	b2da      	uxtb	r2, r3
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	0a1b      	lsrs	r3, r3, #8
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	0e1b      	lsrs	r3, r3, #24
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	b29a      	uxth	r2, r3
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	061a      	lsls	r2, r3, #24
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	021b      	lsls	r3, r3, #8
 8005b5a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005b5e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	0a1b      	lsrs	r3, r3, #8
 8005b64:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005b68:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	0e1b      	lsrs	r3, r3, #24
 8005b6e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	b2da      	uxtb	r2, r3
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	0a1b      	lsrs	r3, r3, #8
 8005b80:	b2da      	uxtb	r2, r3
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	0d1b      	lsrs	r3, r3, #20
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	f003 030f 	and.w	r3, r3, #15
 8005b90:	b2da      	uxtb	r2, r3
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	0c1b      	lsrs	r3, r3, #16
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	4313      	orrs	r3, r2
 8005bac:	b29a      	uxth	r2, r3
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	0a9b      	lsrs	r3, r3, #10
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bbc:	b2da      	uxtb	r2, r3
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	0a1b      	lsrs	r3, r3, #8
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	f003 0303 	and.w	r3, r3, #3
 8005bcc:	b2da      	uxtb	r2, r3
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	091b      	lsrs	r3, r3, #4
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	f003 030f 	and.w	r3, r3, #15
 8005bdc:	b2da      	uxtb	r2, r3
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	f003 030f 	and.w	r3, r3, #15
 8005bea:	b2da      	uxtb	r2, r3
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	0e1b      	lsrs	r3, r3, #24
 8005bf4:	b2da      	uxtb	r2, r3
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005c02:	4618      	mov	r0, r3
 8005c04:	f002 fa10 	bl	8008028 <SDMMC_CmdBlockLength>
 8005c08:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d00d      	beq.n	8005c2c <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a08      	ldr	r2, [pc, #32]	; (8005c38 <HAL_SD_GetCardStatus+0x168>)
 8005c16:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c1c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2201      	movs	r2, #1
 8005c22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8005c2c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3750      	adds	r7, #80	; 0x50
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	1fe00fff 	.word	0x1fe00fff

08005c3c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005c3c:	b5b0      	push	{r4, r5, r7, lr}
 8005c3e:	b090      	sub	sp, #64	; 0x40
 8005c40:	af04      	add	r7, sp, #16
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8005c46:	2300      	movs	r3, #0
 8005c48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2203      	movs	r2, #3
 8005c50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c58:	2b03      	cmp	r3, #3
 8005c5a:	d02e      	beq.n	8005cba <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c62:	d106      	bne.n	8005c72 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c68:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	639a      	str	r2, [r3, #56]	; 0x38
 8005c70:	e029      	b.n	8005cc6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c78:	d10a      	bne.n	8005c90 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 fbd6 	bl	800642c <SD_WideBus_Enable>
 8005c80:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c88:	431a      	orrs	r2, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	639a      	str	r2, [r3, #56]	; 0x38
 8005c8e:	e01a      	b.n	8005cc6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d10a      	bne.n	8005cac <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 fc13 	bl	80064c2 <SD_WideBus_Disable>
 8005c9c:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca4:	431a      	orrs	r2, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	639a      	str	r2, [r3, #56]	; 0x38
 8005caa:	e00c      	b.n	8005cc6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	639a      	str	r2, [r3, #56]	; 0x38
 8005cb8:	e005      	b.n	8005cc6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cbe:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d007      	beq.n	8005cde <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a60      	ldr	r2, [pc, #384]	; (8005e54 <HAL_SD_ConfigWideBusOperation+0x218>)
 8005cd4:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005cdc:	e097      	b.n	8005e0e <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8005cde:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005ce2:	f7fd fff7 	bl	8003cd4 <HAL_RCCEx_GetPeriphCLKFreq>
 8005ce6:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8005ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	f000 8086 	beq.w	8005dfc <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	695a      	ldr	r2, [r3, #20]
 8005d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0c:	4952      	ldr	r1, [pc, #328]	; (8005e58 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005d0e:	fba1 1303 	umull	r1, r3, r1, r3
 8005d12:	0e1b      	lsrs	r3, r3, #24
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d303      	bcc.n	8005d20 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	695b      	ldr	r3, [r3, #20]
 8005d1c:	61fb      	str	r3, [r7, #28]
 8005d1e:	e05a      	b.n	8005dd6 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d28:	d103      	bne.n	8005d32 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	61fb      	str	r3, [r7, #28]
 8005d30:	e051      	b.n	8005dd6 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d3a:	d126      	bne.n	8005d8a <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	695b      	ldr	r3, [r3, #20]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d10e      	bne.n	8005d62 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8005d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d46:	4a45      	ldr	r2, [pc, #276]	; (8005e5c <HAL_SD_ConfigWideBusOperation+0x220>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d906      	bls.n	8005d5a <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8005d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4e:	4a42      	ldr	r2, [pc, #264]	; (8005e58 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005d50:	fba2 2303 	umull	r2, r3, r2, r3
 8005d54:	0e5b      	lsrs	r3, r3, #25
 8005d56:	61fb      	str	r3, [r7, #28]
 8005d58:	e03d      	b.n	8005dd6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	695b      	ldr	r3, [r3, #20]
 8005d5e:	61fb      	str	r3, [r7, #28]
 8005d60:	e039      	b.n	8005dd6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	695b      	ldr	r3, [r3, #20]
 8005d66:	005b      	lsls	r3, r3, #1
 8005d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d6e:	4a3b      	ldr	r2, [pc, #236]	; (8005e5c <HAL_SD_ConfigWideBusOperation+0x220>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d906      	bls.n	8005d82 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8005d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d76:	4a38      	ldr	r2, [pc, #224]	; (8005e58 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005d78:	fba2 2303 	umull	r2, r3, r2, r3
 8005d7c:	0e5b      	lsrs	r3, r3, #25
 8005d7e:	61fb      	str	r3, [r7, #28]
 8005d80:	e029      	b.n	8005dd6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	695b      	ldr	r3, [r3, #20]
 8005d86:	61fb      	str	r3, [r7, #28]
 8005d88:	e025      	b.n	8005dd6 <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	695b      	ldr	r3, [r3, #20]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d10e      	bne.n	8005db0 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8005d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d94:	4a32      	ldr	r2, [pc, #200]	; (8005e60 <HAL_SD_ConfigWideBusOperation+0x224>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d906      	bls.n	8005da8 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9c:	4a2e      	ldr	r2, [pc, #184]	; (8005e58 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005da2:	0e1b      	lsrs	r3, r3, #24
 8005da4:	61fb      	str	r3, [r7, #28]
 8005da6:	e016      	b.n	8005dd6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	695b      	ldr	r3, [r3, #20]
 8005dac:	61fb      	str	r3, [r7, #28]
 8005dae:	e012      	b.n	8005dd6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	695b      	ldr	r3, [r3, #20]
 8005db4:	005b      	lsls	r3, r3, #1
 8005db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dbc:	4a28      	ldr	r2, [pc, #160]	; (8005e60 <HAL_SD_ConfigWideBusOperation+0x224>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d906      	bls.n	8005dd0 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8005dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc4:	4a24      	ldr	r2, [pc, #144]	; (8005e58 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8005dca:	0e1b      	lsrs	r3, r3, #24
 8005dcc:	61fb      	str	r3, [r7, #28]
 8005dce:	e002      	b.n	8005dd6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	695b      	ldr	r3, [r3, #20]
 8005dd4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	699b      	ldr	r3, [r3, #24]
 8005dda:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681d      	ldr	r5, [r3, #0]
 8005de0:	466c      	mov	r4, sp
 8005de2:	f107 0318 	add.w	r3, r7, #24
 8005de6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005dea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005dee:	f107 030c 	add.w	r3, r7, #12
 8005df2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005df4:	4628      	mov	r0, r5
 8005df6:	f002 f849 	bl	8007e8c <SDMMC_Init>
 8005dfa:	e008      	b.n	8005e0e <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e00:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005e16:	4618      	mov	r0, r3
 8005e18:	f002 f906 	bl	8008028 <SDMMC_CmdBlockLength>
 8005e1c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00c      	beq.n	8005e3e <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a0a      	ldr	r2, [pc, #40]	; (8005e54 <HAL_SD_ConfigWideBusOperation+0x218>)
 8005e2a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e32:	431a      	orrs	r2, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2201      	movs	r2, #1
 8005e42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8005e46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3730      	adds	r7, #48	; 0x30
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bdb0      	pop	{r4, r5, r7, pc}
 8005e52:	bf00      	nop
 8005e54:	1fe00fff 	.word	0x1fe00fff
 8005e58:	55e63b89 	.word	0x55e63b89
 8005e5c:	02faf080 	.word	0x02faf080
 8005e60:	017d7840 	.word	0x017d7840

08005e64 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b086      	sub	sp, #24
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005e70:	f107 030c 	add.w	r3, r7, #12
 8005e74:	4619      	mov	r1, r3
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 fab0 	bl	80063dc <SD_SendStatus>
 8005e7c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d005      	beq.n	8005e90 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	431a      	orrs	r2, r3
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	0a5b      	lsrs	r3, r3, #9
 8005e94:	f003 030f 	and.w	r3, r3, #15
 8005e98:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005e9a:	693b      	ldr	r3, [r7, #16]
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3718      	adds	r7, #24
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005ea4:	b5b0      	push	{r4, r5, r7, lr}
 8005ea6:	b090      	sub	sp, #64	; 0x40
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005eac:	2301      	movs	r3, #1
 8005eae:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f002 f832 	bl	8007f1e <SDMMC_GetPowerState>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d102      	bne.n	8005ec6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005ec0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005ec4:	e0a9      	b.n	800601a <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eca:	2b03      	cmp	r3, #3
 8005ecc:	d02e      	beq.n	8005f2c <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f002 f9b5 	bl	8008242 <SDMMC_CmdSendCID>
 8005ed8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d001      	beq.n	8005ee4 <SD_InitCard+0x40>
    {
      return errorstate;
 8005ee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ee2:	e09a      	b.n	800601a <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2100      	movs	r1, #0
 8005eea:	4618      	mov	r0, r3
 8005eec:	f002 f85d 	bl	8007faa <SDMMC_GetResponse>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2104      	movs	r1, #4
 8005efc:	4618      	mov	r0, r3
 8005efe:	f002 f854 	bl	8007faa <SDMMC_GetResponse>
 8005f02:	4602      	mov	r2, r0
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2108      	movs	r1, #8
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f002 f84b 	bl	8007faa <SDMMC_GetResponse>
 8005f14:	4602      	mov	r2, r0
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	210c      	movs	r1, #12
 8005f20:	4618      	mov	r0, r3
 8005f22:	f002 f842 	bl	8007faa <SDMMC_GetResponse>
 8005f26:	4602      	mov	r2, r0
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f30:	2b03      	cmp	r3, #3
 8005f32:	d00d      	beq.n	8005f50 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f107 020e 	add.w	r2, r7, #14
 8005f3c:	4611      	mov	r1, r2
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f002 f9be 	bl	80082c0 <SDMMC_CmdSetRelAdd>
 8005f44:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d001      	beq.n	8005f50 <SD_InitCard+0xac>
    {
      return errorstate;
 8005f4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f4e:	e064      	b.n	800601a <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f54:	2b03      	cmp	r3, #3
 8005f56:	d036      	beq.n	8005fc6 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005f58:	89fb      	ldrh	r3, [r7, #14]
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f68:	041b      	lsls	r3, r3, #16
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	4610      	mov	r0, r2
 8005f6e:	f002 f987 	bl	8008280 <SDMMC_CmdSendCSD>
 8005f72:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d001      	beq.n	8005f7e <SD_InitCard+0xda>
    {
      return errorstate;
 8005f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f7c:	e04d      	b.n	800601a <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	2100      	movs	r1, #0
 8005f84:	4618      	mov	r0, r3
 8005f86:	f002 f810 	bl	8007faa <SDMMC_GetResponse>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2104      	movs	r1, #4
 8005f96:	4618      	mov	r0, r3
 8005f98:	f002 f807 	bl	8007faa <SDMMC_GetResponse>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2108      	movs	r1, #8
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f001 fffe 	bl	8007faa <SDMMC_GetResponse>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	210c      	movs	r1, #12
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f001 fff5 	bl	8007faa <SDMMC_GetResponse>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	2104      	movs	r1, #4
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f001 ffec 	bl	8007faa <SDMMC_GetResponse>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	0d1a      	lsrs	r2, r3, #20
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005fda:	f107 0310 	add.w	r3, r7, #16
 8005fde:	4619      	mov	r1, r3
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f7ff fbd1 	bl	8005788 <HAL_SD_GetCardCSD>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d002      	beq.n	8005ff2 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005fec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005ff0:	e013      	b.n	800601a <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6819      	ldr	r1, [r3, #0]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ffa:	041b      	lsls	r3, r3, #16
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	461c      	mov	r4, r3
 8006000:	4615      	mov	r5, r2
 8006002:	4622      	mov	r2, r4
 8006004:	462b      	mov	r3, r5
 8006006:	4608      	mov	r0, r1
 8006008:	f002 f831 	bl	800806e <SDMMC_CmdSelDesel>
 800600c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800600e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006010:	2b00      	cmp	r3, #0
 8006012:	d001      	beq.n	8006018 <SD_InitCard+0x174>
  {
    return errorstate;
 8006014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006016:	e000      	b.n	800601a <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3740      	adds	r7, #64	; 0x40
 800601e:	46bd      	mov	sp, r7
 8006020:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006024 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b088      	sub	sp, #32
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800602c:	2300      	movs	r3, #0
 800602e:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8006030:	2300      	movs	r3, #0
 8006032:	61fb      	str	r3, [r7, #28]
 8006034:	2300      	movs	r3, #0
 8006036:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 8006038:	f7fb fdb2 	bl	8001ba0 <HAL_GetTick>
 800603c:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4618      	mov	r0, r3
 8006044:	f002 f837 	bl	80080b6 <SDMMC_CmdGoIdleState>
 8006048:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d001      	beq.n	8006054 <SD_PowerON+0x30>
  {
    return errorstate;
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	e0ed      	b.n	8006230 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4618      	mov	r0, r3
 800605a:	f002 f84a 	bl	80080f2 <SDMMC_CmdOperCond>
 800605e:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00d      	beq.n	8006082 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4618      	mov	r0, r3
 8006072:	f002 f820 	bl	80080b6 <SDMMC_CmdGoIdleState>
 8006076:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d004      	beq.n	8006088 <SD_PowerON+0x64>
    {
      return errorstate;
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	e0d6      	b.n	8006230 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2201      	movs	r2, #1
 8006086:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608c:	2b01      	cmp	r3, #1
 800608e:	d137      	bne.n	8006100 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2100      	movs	r1, #0
 8006096:	4618      	mov	r0, r3
 8006098:	f002 f84b 	bl	8008132 <SDMMC_CmdAppCommand>
 800609c:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d02d      	beq.n	8006100 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80060a4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80060a8:	e0c2      	b.n	8006230 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2100      	movs	r1, #0
 80060b0:	4618      	mov	r0, r3
 80060b2:	f002 f83e 	bl	8008132 <SDMMC_CmdAppCommand>
 80060b6:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d001      	beq.n	80060c2 <SD_PowerON+0x9e>
    {
      return errorstate;
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	e0b6      	b.n	8006230 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	495c      	ldr	r1, [pc, #368]	; (8006238 <SD_PowerON+0x214>)
 80060c8:	4618      	mov	r0, r3
 80060ca:	f002 f855 	bl	8008178 <SDMMC_CmdAppOperCommand>
 80060ce:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d002      	beq.n	80060dc <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80060d6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80060da:	e0a9      	b.n	8006230 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2100      	movs	r1, #0
 80060e2:	4618      	mov	r0, r3
 80060e4:	f001 ff61 	bl	8007faa <SDMMC_GetResponse>
 80060e8:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80060ea:	69fb      	ldr	r3, [r7, #28]
 80060ec:	0fdb      	lsrs	r3, r3, #31
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d101      	bne.n	80060f6 <SD_PowerON+0xd2>
 80060f2:	2301      	movs	r3, #1
 80060f4:	e000      	b.n	80060f8 <SD_PowerON+0xd4>
 80060f6:	2300      	movs	r3, #0
 80060f8:	61bb      	str	r3, [r7, #24]

    count++;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	3301      	adds	r3, #1
 80060fe:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006106:	4293      	cmp	r3, r2
 8006108:	d802      	bhi.n	8006110 <SD_PowerON+0xec>
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d0cc      	beq.n	80060aa <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006116:	4293      	cmp	r3, r2
 8006118:	d902      	bls.n	8006120 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800611a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800611e:	e087      	b.n	8006230 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006126:	2b00      	cmp	r3, #0
 8006128:	d07e      	beq.n	8006228 <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2201      	movs	r2, #1
 800612e:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	699b      	ldr	r3, [r3, #24]
 8006134:	2b01      	cmp	r3, #1
 8006136:	d17a      	bne.n	800622e <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800613e:	2b00      	cmp	r3, #0
 8006140:	d075      	beq.n	800622e <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006148:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f042 0208 	orr.w	r2, r2, #8
 8006158:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4618      	mov	r0, r3
 8006160:	f002 f915 	bl	800838e <SDMMC_CmdVoltageSwitch>
 8006164:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00c      	beq.n	8006186 <SD_PowerON+0x162>
        {
          return errorstate;
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	e05f      	b.n	8006230 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006170:	f7fb fd16 	bl	8001ba0 <HAL_GetTick>
 8006174:	4602      	mov	r2, r0
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800617e:	d102      	bne.n	8006186 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8006180:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006184:	e054      	b.n	8006230 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800618c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006190:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006194:	d1ec      	bne.n	8006170 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800619e:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061ae:	d002      	beq.n	80061b6 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 80061b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80061b4:	e03c      	b.n	8006230 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 80061b6:	2001      	movs	r0, #1
 80061b8:	f000 fa9e 	bl	80066f8 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f042 0204 	orr.w	r2, r2, #4
 80061ca:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 80061cc:	e00a      	b.n	80061e4 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80061ce:	f7fb fce7 	bl	8001ba0 <HAL_GetTick>
 80061d2:	4602      	mov	r2, r0
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061dc:	d102      	bne.n	80061e4 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 80061de:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80061e2:	e025      	b.n	8006230 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061f2:	d1ec      	bne.n	80061ce <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80061fc:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006204:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006208:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800620c:	d102      	bne.n	8006214 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800620e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006212:	e00d      	b.n	8006230 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2213      	movs	r2, #19
 800621a:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f04f 32ff 	mov.w	r2, #4294967295
 8006224:	639a      	str	r2, [r3, #56]	; 0x38
 8006226:	e002      	b.n	800622e <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	3720      	adds	r7, #32
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}
 8006238:	c1100000 	.word	0xc1100000

0800623c <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b08c      	sub	sp, #48	; 0x30
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006246:	f7fb fcab 	bl	8001ba0 <HAL_GetTick>
 800624a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2100      	movs	r1, #0
 8006256:	4618      	mov	r0, r3
 8006258:	f001 fea7 	bl	8007faa <SDMMC_GetResponse>
 800625c:	4603      	mov	r3, r0
 800625e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006262:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006266:	d102      	bne.n	800626e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006268:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800626c:	e0b0      	b.n	80063d0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	2140      	movs	r1, #64	; 0x40
 8006274:	4618      	mov	r0, r3
 8006276:	f001 fed7 	bl	8008028 <SDMMC_CmdBlockLength>
 800627a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800627c:	6a3b      	ldr	r3, [r7, #32]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d005      	beq.n	800628e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800628a:	6a3b      	ldr	r3, [r7, #32]
 800628c:	e0a0      	b.n	80063d0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006296:	041b      	lsls	r3, r3, #16
 8006298:	4619      	mov	r1, r3
 800629a:	4610      	mov	r0, r2
 800629c:	f001 ff49 	bl	8008132 <SDMMC_CmdAppCommand>
 80062a0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80062a2:	6a3b      	ldr	r3, [r7, #32]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d005      	beq.n	80062b4 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80062b0:	6a3b      	ldr	r3, [r7, #32]
 80062b2:	e08d      	b.n	80063d0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80062b4:	f04f 33ff 	mov.w	r3, #4294967295
 80062b8:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 80062ba:	2340      	movs	r3, #64	; 0x40
 80062bc:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80062be:	2360      	movs	r3, #96	; 0x60
 80062c0:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80062c2:	2302      	movs	r3, #2
 80062c4:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80062c6:	2300      	movs	r3, #0
 80062c8:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80062ca:	2301      	movs	r3, #1
 80062cc:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f107 0208 	add.w	r2, r7, #8
 80062d6:	4611      	mov	r1, r2
 80062d8:	4618      	mov	r0, r3
 80062da:	f001 fe79 	bl	8007fd0 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4618      	mov	r0, r3
 80062e4:	f002 f831 	bl	800834a <SDMMC_CmdStatusRegister>
 80062e8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80062ea:	6a3b      	ldr	r3, [r7, #32]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d02b      	beq.n	8006348 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80062f8:	6a3b      	ldr	r3, [r7, #32]
 80062fa:	e069      	b.n	80063d0 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006302:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006306:	2b00      	cmp	r3, #0
 8006308:	d013      	beq.n	8006332 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800630a:	2300      	movs	r3, #0
 800630c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800630e:	e00d      	b.n	800632c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4618      	mov	r0, r3
 8006316:	f001 fde3 	bl	8007ee0 <SDMMC_ReadFIFO>
 800631a:	4602      	mov	r2, r0
 800631c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800631e:	601a      	str	r2, [r3, #0]
        pData++;
 8006320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006322:	3304      	adds	r3, #4
 8006324:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8006326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006328:	3301      	adds	r3, #1
 800632a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800632c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800632e:	2b07      	cmp	r3, #7
 8006330:	d9ee      	bls.n	8006310 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006332:	f7fb fc35 	bl	8001ba0 <HAL_GetTick>
 8006336:	4602      	mov	r2, r0
 8006338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006340:	d102      	bne.n	8006348 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006342:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006346:	e043      	b.n	80063d0 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800634e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8006352:	2b00      	cmp	r3, #0
 8006354:	d0d2      	beq.n	80062fc <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800635c:	f003 0308 	and.w	r3, r3, #8
 8006360:	2b00      	cmp	r3, #0
 8006362:	d001      	beq.n	8006368 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006364:	2308      	movs	r3, #8
 8006366:	e033      	b.n	80063d0 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800636e:	f003 0302 	and.w	r3, r3, #2
 8006372:	2b00      	cmp	r3, #0
 8006374:	d001      	beq.n	800637a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006376:	2302      	movs	r3, #2
 8006378:	e02a      	b.n	80063d0 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006380:	f003 0320 	and.w	r3, r3, #32
 8006384:	2b00      	cmp	r3, #0
 8006386:	d017      	beq.n	80063b8 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8006388:	2320      	movs	r3, #32
 800638a:	e021      	b.n	80063d0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4618      	mov	r0, r3
 8006392:	f001 fda5 	bl	8007ee0 <SDMMC_ReadFIFO>
 8006396:	4602      	mov	r2, r0
 8006398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639a:	601a      	str	r2, [r3, #0]
    pData++;
 800639c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639e:	3304      	adds	r3, #4
 80063a0:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80063a2:	f7fb fbfd 	bl	8001ba0 <HAL_GetTick>
 80063a6:	4602      	mov	r2, r0
 80063a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063aa:	1ad3      	subs	r3, r2, r3
 80063ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b0:	d102      	bne.n	80063b8 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80063b2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80063b6:	e00b      	b.n	80063d0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1e2      	bne.n	800638c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a03      	ldr	r2, [pc, #12]	; (80063d8 <SD_SendSDStatus+0x19c>)
 80063cc:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 80063ce:	2300      	movs	r3, #0
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3730      	adds	r7, #48	; 0x30
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	18000f3a 	.word	0x18000f3a

080063dc <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d102      	bne.n	80063f2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80063ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80063f0:	e018      	b.n	8006424 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063fa:	041b      	lsls	r3, r3, #16
 80063fc:	4619      	mov	r1, r3
 80063fe:	4610      	mov	r0, r2
 8006400:	f001 ff80 	bl	8008304 <SDMMC_CmdSendStatus>
 8006404:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d001      	beq.n	8006410 <SD_SendStatus+0x34>
  {
    return errorstate;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	e009      	b.n	8006424 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	2100      	movs	r1, #0
 8006416:	4618      	mov	r0, r3
 8006418:	f001 fdc7 	bl	8007faa <SDMMC_GetResponse>
 800641c:	4602      	mov	r2, r0
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006422:	2300      	movs	r3, #0
}
 8006424:	4618      	mov	r0, r3
 8006426:	3710      	adds	r7, #16
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b086      	sub	sp, #24
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006434:	2300      	movs	r3, #0
 8006436:	60fb      	str	r3, [r7, #12]
 8006438:	2300      	movs	r3, #0
 800643a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	2100      	movs	r1, #0
 8006442:	4618      	mov	r0, r3
 8006444:	f001 fdb1 	bl	8007faa <SDMMC_GetResponse>
 8006448:	4603      	mov	r3, r0
 800644a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800644e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006452:	d102      	bne.n	800645a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006454:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006458:	e02f      	b.n	80064ba <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800645a:	f107 030c 	add.w	r3, r7, #12
 800645e:	4619      	mov	r1, r3
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 f879 	bl	8006558 <SD_FindSCR>
 8006466:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d001      	beq.n	8006472 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	e023      	b.n	80064ba <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006478:	2b00      	cmp	r3, #0
 800647a:	d01c      	beq.n	80064b6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006484:	041b      	lsls	r3, r3, #16
 8006486:	4619      	mov	r1, r3
 8006488:	4610      	mov	r0, r2
 800648a:	f001 fe52 	bl	8008132 <SDMMC_CmdAppCommand>
 800648e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d001      	beq.n	800649a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	e00f      	b.n	80064ba <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2102      	movs	r1, #2
 80064a0:	4618      	mov	r0, r3
 80064a2:	f001 fe89 	bl	80081b8 <SDMMC_CmdBusWidth>
 80064a6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d001      	beq.n	80064b2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	e003      	b.n	80064ba <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80064b2:	2300      	movs	r3, #0
 80064b4:	e001      	b.n	80064ba <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80064b6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3718      	adds	r7, #24
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}

080064c2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80064c2:	b580      	push	{r7, lr}
 80064c4:	b086      	sub	sp, #24
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80064ca:	2300      	movs	r3, #0
 80064cc:	60fb      	str	r3, [r7, #12]
 80064ce:	2300      	movs	r3, #0
 80064d0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2100      	movs	r1, #0
 80064d8:	4618      	mov	r0, r3
 80064da:	f001 fd66 	bl	8007faa <SDMMC_GetResponse>
 80064de:	4603      	mov	r3, r0
 80064e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064e8:	d102      	bne.n	80064f0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80064ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80064ee:	e02f      	b.n	8006550 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80064f0:	f107 030c 	add.w	r3, r7, #12
 80064f4:	4619      	mov	r1, r3
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 f82e 	bl	8006558 <SD_FindSCR>
 80064fc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d001      	beq.n	8006508 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	e023      	b.n	8006550 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800650e:	2b00      	cmp	r3, #0
 8006510:	d01c      	beq.n	800654c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800651a:	041b      	lsls	r3, r3, #16
 800651c:	4619      	mov	r1, r3
 800651e:	4610      	mov	r0, r2
 8006520:	f001 fe07 	bl	8008132 <SDMMC_CmdAppCommand>
 8006524:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d001      	beq.n	8006530 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	e00f      	b.n	8006550 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2100      	movs	r1, #0
 8006536:	4618      	mov	r0, r3
 8006538:	f001 fe3e 	bl	80081b8 <SDMMC_CmdBusWidth>
 800653c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d001      	beq.n	8006548 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	e003      	b.n	8006550 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006548:	2300      	movs	r3, #0
 800654a:	e001      	b.n	8006550 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800654c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006550:	4618      	mov	r0, r3
 8006552:	3718      	adds	r7, #24
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b08e      	sub	sp, #56	; 0x38
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006562:	f7fb fb1d 	bl	8001ba0 <HAL_GetTick>
 8006566:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006568:	2300      	movs	r3, #0
 800656a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800656c:	2300      	movs	r3, #0
 800656e:	60bb      	str	r3, [r7, #8]
 8006570:	2300      	movs	r3, #0
 8006572:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2108      	movs	r1, #8
 800657e:	4618      	mov	r0, r3
 8006580:	f001 fd52 	bl	8008028 <SDMMC_CmdBlockLength>
 8006584:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006588:	2b00      	cmp	r3, #0
 800658a:	d001      	beq.n	8006590 <SD_FindSCR+0x38>
  {
    return errorstate;
 800658c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658e:	e0ad      	b.n	80066ec <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006598:	041b      	lsls	r3, r3, #16
 800659a:	4619      	mov	r1, r3
 800659c:	4610      	mov	r0, r2
 800659e:	f001 fdc8 	bl	8008132 <SDMMC_CmdAppCommand>
 80065a2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80065a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d001      	beq.n	80065ae <SD_FindSCR+0x56>
  {
    return errorstate;
 80065aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ac:	e09e      	b.n	80066ec <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80065ae:	f04f 33ff 	mov.w	r3, #4294967295
 80065b2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80065b4:	2308      	movs	r3, #8
 80065b6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80065b8:	2330      	movs	r3, #48	; 0x30
 80065ba:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80065bc:	2302      	movs	r3, #2
 80065be:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80065c0:	2300      	movs	r3, #0
 80065c2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80065c4:	2301      	movs	r3, #1
 80065c6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f107 0210 	add.w	r2, r7, #16
 80065d0:	4611      	mov	r1, r2
 80065d2:	4618      	mov	r0, r3
 80065d4:	f001 fcfc 	bl	8007fd0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4618      	mov	r0, r3
 80065de:	f001 fe0e 	bl	80081fe <SDMMC_CmdSendSCR>
 80065e2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80065e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d027      	beq.n	800663a <SD_FindSCR+0xe2>
  {
    return errorstate;
 80065ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ec:	e07e      	b.n	80066ec <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d113      	bne.n	8006624 <SD_FindSCR+0xcc>
 80065fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d110      	bne.n	8006624 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4618      	mov	r0, r3
 8006608:	f001 fc6a 	bl	8007ee0 <SDMMC_ReadFIFO>
 800660c:	4603      	mov	r3, r0
 800660e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4618      	mov	r0, r3
 8006616:	f001 fc63 	bl	8007ee0 <SDMMC_ReadFIFO>
 800661a:	4603      	mov	r3, r0
 800661c:	60fb      	str	r3, [r7, #12]
      index++;
 800661e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006620:	3301      	adds	r3, #1
 8006622:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006624:	f7fb fabc 	bl	8001ba0 <HAL_GetTick>
 8006628:	4602      	mov	r2, r0
 800662a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006632:	d102      	bne.n	800663a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006634:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006638:	e058      	b.n	80066ec <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006640:	f240 532a 	movw	r3, #1322	; 0x52a
 8006644:	4013      	ands	r3, r2
 8006646:	2b00      	cmp	r3, #0
 8006648:	d0d1      	beq.n	80065ee <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006650:	f003 0308 	and.w	r3, r3, #8
 8006654:	2b00      	cmp	r3, #0
 8006656:	d005      	beq.n	8006664 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	2208      	movs	r2, #8
 800665e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006660:	2308      	movs	r3, #8
 8006662:	e043      	b.n	80066ec <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800666a:	f003 0302 	and.w	r3, r3, #2
 800666e:	2b00      	cmp	r3, #0
 8006670:	d005      	beq.n	800667e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2202      	movs	r2, #2
 8006678:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800667a:	2302      	movs	r3, #2
 800667c:	e036      	b.n	80066ec <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006684:	f003 0320 	and.w	r3, r3, #32
 8006688:	2b00      	cmp	r3, #0
 800668a:	d005      	beq.n	8006698 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2220      	movs	r2, #32
 8006692:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006694:	2320      	movs	r3, #32
 8006696:	e029      	b.n	80066ec <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a15      	ldr	r2, [pc, #84]	; (80066f4 <SD_FindSCR+0x19c>)
 800669e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	061a      	lsls	r2, r3, #24
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	021b      	lsls	r3, r3, #8
 80066a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80066ac:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	0a1b      	lsrs	r3, r3, #8
 80066b2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80066b6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	0e1b      	lsrs	r3, r3, #24
 80066bc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80066be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c0:	601a      	str	r2, [r3, #0]
    scr++;
 80066c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c4:	3304      	adds	r3, #4
 80066c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	061a      	lsls	r2, r3, #24
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	021b      	lsls	r3, r3, #8
 80066d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80066d4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	0a1b      	lsrs	r3, r3, #8
 80066da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80066de:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	0e1b      	lsrs	r3, r3, #24
 80066e4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80066e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80066ea:	2300      	movs	r3, #0
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3738      	adds	r7, #56	; 0x38
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	18000f3a 	.word	0x18000f3a

080066f8 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b083      	sub	sp, #12
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	4603      	mov	r3, r0
 8006700:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 8006702:	bf00      	nop
 8006704:	370c      	adds	r7, #12
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr

0800670e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800670e:	b580      	push	{r7, lr}
 8006710:	b084      	sub	sp, #16
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d101      	bne.n	8006720 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	e095      	b.n	800684c <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006724:	2b00      	cmp	r3, #0
 8006726:	d108      	bne.n	800673a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006730:	d009      	beq.n	8006746 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	61da      	str	r2, [r3, #28]
 8006738:	e005      	b.n	8006746 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006752:	b2db      	uxtb	r3, r3
 8006754:	2b00      	cmp	r3, #0
 8006756:	d106      	bne.n	8006766 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f7fa fe77 	bl	8001454 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2202      	movs	r2, #2
 800676a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800677c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	68db      	ldr	r3, [r3, #12]
 8006782:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006786:	d902      	bls.n	800678e <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006788:	2300      	movs	r3, #0
 800678a:	60fb      	str	r3, [r7, #12]
 800678c:	e002      	b.n	8006794 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800678e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006792:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800679c:	d007      	beq.n	80067ae <HAL_SPI_Init+0xa0>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80067a6:	d002      	beq.n	80067ae <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80067be:	431a      	orrs	r2, r3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	691b      	ldr	r3, [r3, #16]
 80067c4:	f003 0302 	and.w	r3, r3, #2
 80067c8:	431a      	orrs	r2, r3
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	695b      	ldr	r3, [r3, #20]
 80067ce:	f003 0301 	and.w	r3, r3, #1
 80067d2:	431a      	orrs	r2, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	699b      	ldr	r3, [r3, #24]
 80067d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067dc:	431a      	orrs	r2, r3
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	69db      	ldr	r3, [r3, #28]
 80067e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067e6:	431a      	orrs	r2, r3
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6a1b      	ldr	r3, [r3, #32]
 80067ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067f0:	ea42 0103 	orr.w	r1, r2, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	430a      	orrs	r2, r1
 8006802:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	699b      	ldr	r3, [r3, #24]
 8006808:	0c1b      	lsrs	r3, r3, #16
 800680a:	f003 0204 	and.w	r2, r3, #4
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006812:	f003 0310 	and.w	r3, r3, #16
 8006816:	431a      	orrs	r2, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800681c:	f003 0308 	and.w	r3, r3, #8
 8006820:	431a      	orrs	r2, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800682a:	ea42 0103 	orr.w	r1, r2, r3
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	430a      	orrs	r2, r1
 800683a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2201      	movs	r2, #1
 8006846:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800684a:	2300      	movs	r3, #0
}
 800684c:	4618      	mov	r0, r3
 800684e:	3710      	adds	r7, #16
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d101      	bne.n	800686a <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e038      	b.n	80068dc <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8006870:	b2db      	uxtb	r3, r3
 8006872:	2b00      	cmp	r3, #0
 8006874:	d106      	bne.n	8006884 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2200      	movs	r2, #0
 800687a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800687e:	68f8      	ldr	r0, [r7, #12]
 8006880:	f7fb f83a 	bl	80018f8 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	3308      	adds	r3, #8
 800688c:	4619      	mov	r1, r3
 800688e:	4610      	mov	r0, r2
 8006890:	f001 f9d6 	bl	8007c40 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6818      	ldr	r0, [r3, #0]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	461a      	mov	r2, r3
 800689e:	68b9      	ldr	r1, [r7, #8]
 80068a0:	f001 fa68 	bl	8007d74 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6858      	ldr	r0, [r3, #4]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	689a      	ldr	r2, [r3, #8]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b0:	6879      	ldr	r1, [r7, #4]
 80068b2:	f001 fab1 	bl	8007e18 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	68fa      	ldr	r2, [r7, #12]
 80068bc:	6892      	ldr	r2, [r2, #8]
 80068be:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	68fa      	ldr	r2, [r7, #12]
 80068c8:	6892      	ldr	r2, [r2, #8]
 80068ca:	f041 0101 	orr.w	r1, r1, #1
 80068ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2201      	movs	r2, #1
 80068d6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 80068da:	2300      	movs	r3, #0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3710      	adds	r7, #16
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b082      	sub	sp, #8
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d101      	bne.n	80068f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e049      	b.n	800698a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d106      	bne.n	8006910 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2200      	movs	r2, #0
 8006906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f7fa fe04 	bl	8001518 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2202      	movs	r2, #2
 8006914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	3304      	adds	r3, #4
 8006920:	4619      	mov	r1, r3
 8006922:	4610      	mov	r0, r2
 8006924:	f000 f968 	bl	8006bf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2201      	movs	r2, #1
 800692c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2201      	movs	r2, #1
 8006934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2201      	movs	r2, #1
 8006944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2201      	movs	r2, #1
 800694c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2201      	movs	r2, #1
 800695c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2201      	movs	r2, #1
 8006964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2201      	movs	r2, #1
 800696c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2201      	movs	r2, #1
 800697c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	3708      	adds	r7, #8
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
	...

08006994 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006994:	b480      	push	{r7}
 8006996:	b085      	sub	sp, #20
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d001      	beq.n	80069ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	e047      	b.n	8006a3c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2202      	movs	r2, #2
 80069b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a23      	ldr	r2, [pc, #140]	; (8006a48 <HAL_TIM_Base_Start+0xb4>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d01d      	beq.n	80069fa <HAL_TIM_Base_Start+0x66>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069c6:	d018      	beq.n	80069fa <HAL_TIM_Base_Start+0x66>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a1f      	ldr	r2, [pc, #124]	; (8006a4c <HAL_TIM_Base_Start+0xb8>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d013      	beq.n	80069fa <HAL_TIM_Base_Start+0x66>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a1e      	ldr	r2, [pc, #120]	; (8006a50 <HAL_TIM_Base_Start+0xbc>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d00e      	beq.n	80069fa <HAL_TIM_Base_Start+0x66>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a1c      	ldr	r2, [pc, #112]	; (8006a54 <HAL_TIM_Base_Start+0xc0>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d009      	beq.n	80069fa <HAL_TIM_Base_Start+0x66>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a1b      	ldr	r2, [pc, #108]	; (8006a58 <HAL_TIM_Base_Start+0xc4>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d004      	beq.n	80069fa <HAL_TIM_Base_Start+0x66>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a19      	ldr	r2, [pc, #100]	; (8006a5c <HAL_TIM_Base_Start+0xc8>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d115      	bne.n	8006a26 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	689a      	ldr	r2, [r3, #8]
 8006a00:	4b17      	ldr	r3, [pc, #92]	; (8006a60 <HAL_TIM_Base_Start+0xcc>)
 8006a02:	4013      	ands	r3, r2
 8006a04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2b06      	cmp	r3, #6
 8006a0a:	d015      	beq.n	8006a38 <HAL_TIM_Base_Start+0xa4>
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a12:	d011      	beq.n	8006a38 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f042 0201 	orr.w	r2, r2, #1
 8006a22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a24:	e008      	b.n	8006a38 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f042 0201 	orr.w	r2, r2, #1
 8006a34:	601a      	str	r2, [r3, #0]
 8006a36:	e000      	b.n	8006a3a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a38:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a3a:	2300      	movs	r3, #0
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3714      	adds	r7, #20
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr
 8006a48:	40012c00 	.word	0x40012c00
 8006a4c:	40000400 	.word	0x40000400
 8006a50:	40000800 	.word	0x40000800
 8006a54:	40000c00 	.word	0x40000c00
 8006a58:	40013400 	.word	0x40013400
 8006a5c:	40014000 	.word	0x40014000
 8006a60:	00010007 	.word	0x00010007

08006a64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d101      	bne.n	8006a80 <HAL_TIM_ConfigClockSource+0x1c>
 8006a7c:	2302      	movs	r3, #2
 8006a7e:	e0b6      	b.n	8006bee <HAL_TIM_ConfigClockSource+0x18a>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2202      	movs	r2, #2
 8006a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006aa2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006aaa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	68ba      	ldr	r2, [r7, #8]
 8006ab2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006abc:	d03e      	beq.n	8006b3c <HAL_TIM_ConfigClockSource+0xd8>
 8006abe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ac2:	f200 8087 	bhi.w	8006bd4 <HAL_TIM_ConfigClockSource+0x170>
 8006ac6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aca:	f000 8086 	beq.w	8006bda <HAL_TIM_ConfigClockSource+0x176>
 8006ace:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ad2:	d87f      	bhi.n	8006bd4 <HAL_TIM_ConfigClockSource+0x170>
 8006ad4:	2b70      	cmp	r3, #112	; 0x70
 8006ad6:	d01a      	beq.n	8006b0e <HAL_TIM_ConfigClockSource+0xaa>
 8006ad8:	2b70      	cmp	r3, #112	; 0x70
 8006ada:	d87b      	bhi.n	8006bd4 <HAL_TIM_ConfigClockSource+0x170>
 8006adc:	2b60      	cmp	r3, #96	; 0x60
 8006ade:	d050      	beq.n	8006b82 <HAL_TIM_ConfigClockSource+0x11e>
 8006ae0:	2b60      	cmp	r3, #96	; 0x60
 8006ae2:	d877      	bhi.n	8006bd4 <HAL_TIM_ConfigClockSource+0x170>
 8006ae4:	2b50      	cmp	r3, #80	; 0x50
 8006ae6:	d03c      	beq.n	8006b62 <HAL_TIM_ConfigClockSource+0xfe>
 8006ae8:	2b50      	cmp	r3, #80	; 0x50
 8006aea:	d873      	bhi.n	8006bd4 <HAL_TIM_ConfigClockSource+0x170>
 8006aec:	2b40      	cmp	r3, #64	; 0x40
 8006aee:	d058      	beq.n	8006ba2 <HAL_TIM_ConfigClockSource+0x13e>
 8006af0:	2b40      	cmp	r3, #64	; 0x40
 8006af2:	d86f      	bhi.n	8006bd4 <HAL_TIM_ConfigClockSource+0x170>
 8006af4:	2b30      	cmp	r3, #48	; 0x30
 8006af6:	d064      	beq.n	8006bc2 <HAL_TIM_ConfigClockSource+0x15e>
 8006af8:	2b30      	cmp	r3, #48	; 0x30
 8006afa:	d86b      	bhi.n	8006bd4 <HAL_TIM_ConfigClockSource+0x170>
 8006afc:	2b20      	cmp	r3, #32
 8006afe:	d060      	beq.n	8006bc2 <HAL_TIM_ConfigClockSource+0x15e>
 8006b00:	2b20      	cmp	r3, #32
 8006b02:	d867      	bhi.n	8006bd4 <HAL_TIM_ConfigClockSource+0x170>
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d05c      	beq.n	8006bc2 <HAL_TIM_ConfigClockSource+0x15e>
 8006b08:	2b10      	cmp	r3, #16
 8006b0a:	d05a      	beq.n	8006bc2 <HAL_TIM_ConfigClockSource+0x15e>
 8006b0c:	e062      	b.n	8006bd4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b1e:	f000 f97f 	bl	8006e20 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006b30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	68ba      	ldr	r2, [r7, #8]
 8006b38:	609a      	str	r2, [r3, #8]
      break;
 8006b3a:	e04f      	b.n	8006bdc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b4c:	f000 f968 	bl	8006e20 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	689a      	ldr	r2, [r3, #8]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b5e:	609a      	str	r2, [r3, #8]
      break;
 8006b60:	e03c      	b.n	8006bdc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b6e:	461a      	mov	r2, r3
 8006b70:	f000 f8dc 	bl	8006d2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2150      	movs	r1, #80	; 0x50
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f000 f935 	bl	8006dea <TIM_ITRx_SetConfig>
      break;
 8006b80:	e02c      	b.n	8006bdc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b8e:	461a      	mov	r2, r3
 8006b90:	f000 f8fb 	bl	8006d8a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	2160      	movs	r1, #96	; 0x60
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f000 f925 	bl	8006dea <TIM_ITRx_SetConfig>
      break;
 8006ba0:	e01c      	b.n	8006bdc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bae:	461a      	mov	r2, r3
 8006bb0:	f000 f8bc 	bl	8006d2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2140      	movs	r1, #64	; 0x40
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f000 f915 	bl	8006dea <TIM_ITRx_SetConfig>
      break;
 8006bc0:	e00c      	b.n	8006bdc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4619      	mov	r1, r3
 8006bcc:	4610      	mov	r0, r2
 8006bce:	f000 f90c 	bl	8006dea <TIM_ITRx_SetConfig>
      break;
 8006bd2:	e003      	b.n	8006bdc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	73fb      	strb	r3, [r7, #15]
      break;
 8006bd8:	e000      	b.n	8006bdc <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006bda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3710      	adds	r7, #16
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
	...

08006bf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b085      	sub	sp, #20
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4a40      	ldr	r2, [pc, #256]	; (8006d0c <TIM_Base_SetConfig+0x114>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d013      	beq.n	8006c38 <TIM_Base_SetConfig+0x40>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c16:	d00f      	beq.n	8006c38 <TIM_Base_SetConfig+0x40>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4a3d      	ldr	r2, [pc, #244]	; (8006d10 <TIM_Base_SetConfig+0x118>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d00b      	beq.n	8006c38 <TIM_Base_SetConfig+0x40>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	4a3c      	ldr	r2, [pc, #240]	; (8006d14 <TIM_Base_SetConfig+0x11c>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d007      	beq.n	8006c38 <TIM_Base_SetConfig+0x40>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	4a3b      	ldr	r2, [pc, #236]	; (8006d18 <TIM_Base_SetConfig+0x120>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d003      	beq.n	8006c38 <TIM_Base_SetConfig+0x40>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	4a3a      	ldr	r2, [pc, #232]	; (8006d1c <TIM_Base_SetConfig+0x124>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d108      	bne.n	8006c4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a2f      	ldr	r2, [pc, #188]	; (8006d0c <TIM_Base_SetConfig+0x114>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d01f      	beq.n	8006c92 <TIM_Base_SetConfig+0x9a>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c58:	d01b      	beq.n	8006c92 <TIM_Base_SetConfig+0x9a>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a2c      	ldr	r2, [pc, #176]	; (8006d10 <TIM_Base_SetConfig+0x118>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d017      	beq.n	8006c92 <TIM_Base_SetConfig+0x9a>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a2b      	ldr	r2, [pc, #172]	; (8006d14 <TIM_Base_SetConfig+0x11c>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d013      	beq.n	8006c92 <TIM_Base_SetConfig+0x9a>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a2a      	ldr	r2, [pc, #168]	; (8006d18 <TIM_Base_SetConfig+0x120>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d00f      	beq.n	8006c92 <TIM_Base_SetConfig+0x9a>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a29      	ldr	r2, [pc, #164]	; (8006d1c <TIM_Base_SetConfig+0x124>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d00b      	beq.n	8006c92 <TIM_Base_SetConfig+0x9a>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a28      	ldr	r2, [pc, #160]	; (8006d20 <TIM_Base_SetConfig+0x128>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d007      	beq.n	8006c92 <TIM_Base_SetConfig+0x9a>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4a27      	ldr	r2, [pc, #156]	; (8006d24 <TIM_Base_SetConfig+0x12c>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d003      	beq.n	8006c92 <TIM_Base_SetConfig+0x9a>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4a26      	ldr	r2, [pc, #152]	; (8006d28 <TIM_Base_SetConfig+0x130>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d108      	bne.n	8006ca4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	68fa      	ldr	r2, [r7, #12]
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	695b      	ldr	r3, [r3, #20]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	689a      	ldr	r2, [r3, #8]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4a10      	ldr	r2, [pc, #64]	; (8006d0c <TIM_Base_SetConfig+0x114>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d00f      	beq.n	8006cf0 <TIM_Base_SetConfig+0xf8>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4a12      	ldr	r2, [pc, #72]	; (8006d1c <TIM_Base_SetConfig+0x124>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d00b      	beq.n	8006cf0 <TIM_Base_SetConfig+0xf8>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	4a11      	ldr	r2, [pc, #68]	; (8006d20 <TIM_Base_SetConfig+0x128>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d007      	beq.n	8006cf0 <TIM_Base_SetConfig+0xf8>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4a10      	ldr	r2, [pc, #64]	; (8006d24 <TIM_Base_SetConfig+0x12c>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d003      	beq.n	8006cf0 <TIM_Base_SetConfig+0xf8>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4a0f      	ldr	r2, [pc, #60]	; (8006d28 <TIM_Base_SetConfig+0x130>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d103      	bne.n	8006cf8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	691a      	ldr	r2, [r3, #16]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	615a      	str	r2, [r3, #20]
}
 8006cfe:	bf00      	nop
 8006d00:	3714      	adds	r7, #20
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	40012c00 	.word	0x40012c00
 8006d10:	40000400 	.word	0x40000400
 8006d14:	40000800 	.word	0x40000800
 8006d18:	40000c00 	.word	0x40000c00
 8006d1c:	40013400 	.word	0x40013400
 8006d20:	40014000 	.word	0x40014000
 8006d24:	40014400 	.word	0x40014400
 8006d28:	40014800 	.word	0x40014800

08006d2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b087      	sub	sp, #28
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6a1b      	ldr	r3, [r3, #32]
 8006d3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6a1b      	ldr	r3, [r3, #32]
 8006d42:	f023 0201 	bic.w	r2, r3, #1
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	699b      	ldr	r3, [r3, #24]
 8006d4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	011b      	lsls	r3, r3, #4
 8006d5c:	693a      	ldr	r2, [r7, #16]
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	f023 030a 	bic.w	r3, r3, #10
 8006d68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d6a:	697a      	ldr	r2, [r7, #20]
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	693a      	ldr	r2, [r7, #16]
 8006d76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	697a      	ldr	r2, [r7, #20]
 8006d7c:	621a      	str	r2, [r3, #32]
}
 8006d7e:	bf00      	nop
 8006d80:	371c      	adds	r7, #28
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr

08006d8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d8a:	b480      	push	{r7}
 8006d8c:	b087      	sub	sp, #28
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	60f8      	str	r0, [r7, #12]
 8006d92:	60b9      	str	r1, [r7, #8]
 8006d94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6a1b      	ldr	r3, [r3, #32]
 8006d9a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6a1b      	ldr	r3, [r3, #32]
 8006da0:	f023 0210 	bic.w	r2, r3, #16
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	699b      	ldr	r3, [r3, #24]
 8006dac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006db4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	031b      	lsls	r3, r3, #12
 8006dba:	693a      	ldr	r2, [r7, #16]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006dc6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	011b      	lsls	r3, r3, #4
 8006dcc:	697a      	ldr	r2, [r7, #20]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	693a      	ldr	r2, [r7, #16]
 8006dd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	697a      	ldr	r2, [r7, #20]
 8006ddc:	621a      	str	r2, [r3, #32]
}
 8006dde:	bf00      	nop
 8006de0:	371c      	adds	r7, #28
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr

08006dea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006dea:	b480      	push	{r7}
 8006dec:	b085      	sub	sp, #20
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
 8006df2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e02:	683a      	ldr	r2, [r7, #0]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	f043 0307 	orr.w	r3, r3, #7
 8006e0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	68fa      	ldr	r2, [r7, #12]
 8006e12:	609a      	str	r2, [r3, #8]
}
 8006e14:	bf00      	nop
 8006e16:	3714      	adds	r7, #20
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b087      	sub	sp, #28
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	607a      	str	r2, [r7, #4]
 8006e2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	021a      	lsls	r2, r3, #8
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	431a      	orrs	r2, r3
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	697a      	ldr	r2, [r7, #20]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	697a      	ldr	r2, [r7, #20]
 8006e52:	609a      	str	r2, [r3, #8]
}
 8006e54:	bf00      	nop
 8006e56:	371c      	adds	r7, #28
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b085      	sub	sp, #20
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d101      	bne.n	8006e78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e74:	2302      	movs	r3, #2
 8006e76:	e068      	b.n	8006f4a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2202      	movs	r2, #2
 8006e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a2e      	ldr	r2, [pc, #184]	; (8006f58 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d004      	beq.n	8006eac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a2d      	ldr	r2, [pc, #180]	; (8006f5c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d108      	bne.n	8006ebe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006eb2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	68fa      	ldr	r2, [r7, #12]
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ec4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68fa      	ldr	r2, [r7, #12]
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a1e      	ldr	r2, [pc, #120]	; (8006f58 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d01d      	beq.n	8006f1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eea:	d018      	beq.n	8006f1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a1b      	ldr	r2, [pc, #108]	; (8006f60 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d013      	beq.n	8006f1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a1a      	ldr	r2, [pc, #104]	; (8006f64 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d00e      	beq.n	8006f1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a18      	ldr	r2, [pc, #96]	; (8006f68 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d009      	beq.n	8006f1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a13      	ldr	r2, [pc, #76]	; (8006f5c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d004      	beq.n	8006f1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a14      	ldr	r2, [pc, #80]	; (8006f6c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d10c      	bne.n	8006f38 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	68ba      	ldr	r2, [r7, #8]
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	68ba      	ldr	r2, [r7, #8]
 8006f36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f48:	2300      	movs	r3, #0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3714      	adds	r7, #20
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop
 8006f58:	40012c00 	.word	0x40012c00
 8006f5c:	40013400 	.word	0x40013400
 8006f60:	40000400 	.word	0x40000400
 8006f64:	40000800 	.word	0x40000800
 8006f68:	40000c00 	.word	0x40000c00
 8006f6c:	40014000 	.word	0x40014000

08006f70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d101      	bne.n	8006f82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e042      	b.n	8007008 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d106      	bne.n	8006f9a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f7fa fadf 	bl	8001558 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2224      	movs	r2, #36	; 0x24
 8006f9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f022 0201 	bic.w	r2, r2, #1
 8006fb0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d002      	beq.n	8006fc0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 fb24 	bl	8007608 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 f825 	bl	8007010 <UART_SetConfig>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d101      	bne.n	8006fd0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e01b      	b.n	8007008 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	685a      	ldr	r2, [r3, #4]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006fde:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	689a      	ldr	r2, [r3, #8]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006fee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f042 0201 	orr.w	r2, r2, #1
 8006ffe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 fba3 	bl	800774c <UART_CheckIdleState>
 8007006:	4603      	mov	r3, r0
}
 8007008:	4618      	mov	r0, r3
 800700a:	3708      	adds	r7, #8
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007010:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007014:	b08c      	sub	sp, #48	; 0x30
 8007016:	af00      	add	r7, sp, #0
 8007018:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800701a:	2300      	movs	r3, #0
 800701c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	689a      	ldr	r2, [r3, #8]
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	691b      	ldr	r3, [r3, #16]
 8007028:	431a      	orrs	r2, r3
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	695b      	ldr	r3, [r3, #20]
 800702e:	431a      	orrs	r2, r3
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	69db      	ldr	r3, [r3, #28]
 8007034:	4313      	orrs	r3, r2
 8007036:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	4baa      	ldr	r3, [pc, #680]	; (80072e8 <UART_SetConfig+0x2d8>)
 8007040:	4013      	ands	r3, r2
 8007042:	697a      	ldr	r2, [r7, #20]
 8007044:	6812      	ldr	r2, [r2, #0]
 8007046:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007048:	430b      	orrs	r3, r1
 800704a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	68da      	ldr	r2, [r3, #12]
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	430a      	orrs	r2, r1
 8007060:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	699b      	ldr	r3, [r3, #24]
 8007066:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a9f      	ldr	r2, [pc, #636]	; (80072ec <UART_SetConfig+0x2dc>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d004      	beq.n	800707c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	6a1b      	ldr	r3, [r3, #32]
 8007076:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007078:	4313      	orrs	r3, r2
 800707a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007086:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800708a:	697a      	ldr	r2, [r7, #20]
 800708c:	6812      	ldr	r2, [r2, #0]
 800708e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007090:	430b      	orrs	r3, r1
 8007092:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800709a:	f023 010f 	bic.w	r1, r3, #15
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	430a      	orrs	r2, r1
 80070a8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a90      	ldr	r2, [pc, #576]	; (80072f0 <UART_SetConfig+0x2e0>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d125      	bne.n	8007100 <UART_SetConfig+0xf0>
 80070b4:	4b8f      	ldr	r3, [pc, #572]	; (80072f4 <UART_SetConfig+0x2e4>)
 80070b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070ba:	f003 0303 	and.w	r3, r3, #3
 80070be:	2b03      	cmp	r3, #3
 80070c0:	d81a      	bhi.n	80070f8 <UART_SetConfig+0xe8>
 80070c2:	a201      	add	r2, pc, #4	; (adr r2, 80070c8 <UART_SetConfig+0xb8>)
 80070c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c8:	080070d9 	.word	0x080070d9
 80070cc:	080070e9 	.word	0x080070e9
 80070d0:	080070e1 	.word	0x080070e1
 80070d4:	080070f1 	.word	0x080070f1
 80070d8:	2301      	movs	r3, #1
 80070da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070de:	e116      	b.n	800730e <UART_SetConfig+0x2fe>
 80070e0:	2302      	movs	r3, #2
 80070e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070e6:	e112      	b.n	800730e <UART_SetConfig+0x2fe>
 80070e8:	2304      	movs	r3, #4
 80070ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070ee:	e10e      	b.n	800730e <UART_SetConfig+0x2fe>
 80070f0:	2308      	movs	r3, #8
 80070f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070f6:	e10a      	b.n	800730e <UART_SetConfig+0x2fe>
 80070f8:	2310      	movs	r3, #16
 80070fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070fe:	e106      	b.n	800730e <UART_SetConfig+0x2fe>
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a7c      	ldr	r2, [pc, #496]	; (80072f8 <UART_SetConfig+0x2e8>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d138      	bne.n	800717c <UART_SetConfig+0x16c>
 800710a:	4b7a      	ldr	r3, [pc, #488]	; (80072f4 <UART_SetConfig+0x2e4>)
 800710c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007110:	f003 030c 	and.w	r3, r3, #12
 8007114:	2b0c      	cmp	r3, #12
 8007116:	d82d      	bhi.n	8007174 <UART_SetConfig+0x164>
 8007118:	a201      	add	r2, pc, #4	; (adr r2, 8007120 <UART_SetConfig+0x110>)
 800711a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800711e:	bf00      	nop
 8007120:	08007155 	.word	0x08007155
 8007124:	08007175 	.word	0x08007175
 8007128:	08007175 	.word	0x08007175
 800712c:	08007175 	.word	0x08007175
 8007130:	08007165 	.word	0x08007165
 8007134:	08007175 	.word	0x08007175
 8007138:	08007175 	.word	0x08007175
 800713c:	08007175 	.word	0x08007175
 8007140:	0800715d 	.word	0x0800715d
 8007144:	08007175 	.word	0x08007175
 8007148:	08007175 	.word	0x08007175
 800714c:	08007175 	.word	0x08007175
 8007150:	0800716d 	.word	0x0800716d
 8007154:	2300      	movs	r3, #0
 8007156:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800715a:	e0d8      	b.n	800730e <UART_SetConfig+0x2fe>
 800715c:	2302      	movs	r3, #2
 800715e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007162:	e0d4      	b.n	800730e <UART_SetConfig+0x2fe>
 8007164:	2304      	movs	r3, #4
 8007166:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800716a:	e0d0      	b.n	800730e <UART_SetConfig+0x2fe>
 800716c:	2308      	movs	r3, #8
 800716e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007172:	e0cc      	b.n	800730e <UART_SetConfig+0x2fe>
 8007174:	2310      	movs	r3, #16
 8007176:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800717a:	e0c8      	b.n	800730e <UART_SetConfig+0x2fe>
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a5e      	ldr	r2, [pc, #376]	; (80072fc <UART_SetConfig+0x2ec>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d125      	bne.n	80071d2 <UART_SetConfig+0x1c2>
 8007186:	4b5b      	ldr	r3, [pc, #364]	; (80072f4 <UART_SetConfig+0x2e4>)
 8007188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800718c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007190:	2b30      	cmp	r3, #48	; 0x30
 8007192:	d016      	beq.n	80071c2 <UART_SetConfig+0x1b2>
 8007194:	2b30      	cmp	r3, #48	; 0x30
 8007196:	d818      	bhi.n	80071ca <UART_SetConfig+0x1ba>
 8007198:	2b20      	cmp	r3, #32
 800719a:	d00a      	beq.n	80071b2 <UART_SetConfig+0x1a2>
 800719c:	2b20      	cmp	r3, #32
 800719e:	d814      	bhi.n	80071ca <UART_SetConfig+0x1ba>
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d002      	beq.n	80071aa <UART_SetConfig+0x19a>
 80071a4:	2b10      	cmp	r3, #16
 80071a6:	d008      	beq.n	80071ba <UART_SetConfig+0x1aa>
 80071a8:	e00f      	b.n	80071ca <UART_SetConfig+0x1ba>
 80071aa:	2300      	movs	r3, #0
 80071ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071b0:	e0ad      	b.n	800730e <UART_SetConfig+0x2fe>
 80071b2:	2302      	movs	r3, #2
 80071b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071b8:	e0a9      	b.n	800730e <UART_SetConfig+0x2fe>
 80071ba:	2304      	movs	r3, #4
 80071bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071c0:	e0a5      	b.n	800730e <UART_SetConfig+0x2fe>
 80071c2:	2308      	movs	r3, #8
 80071c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071c8:	e0a1      	b.n	800730e <UART_SetConfig+0x2fe>
 80071ca:	2310      	movs	r3, #16
 80071cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071d0:	e09d      	b.n	800730e <UART_SetConfig+0x2fe>
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a4a      	ldr	r2, [pc, #296]	; (8007300 <UART_SetConfig+0x2f0>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d125      	bne.n	8007228 <UART_SetConfig+0x218>
 80071dc:	4b45      	ldr	r3, [pc, #276]	; (80072f4 <UART_SetConfig+0x2e4>)
 80071de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80071e6:	2bc0      	cmp	r3, #192	; 0xc0
 80071e8:	d016      	beq.n	8007218 <UART_SetConfig+0x208>
 80071ea:	2bc0      	cmp	r3, #192	; 0xc0
 80071ec:	d818      	bhi.n	8007220 <UART_SetConfig+0x210>
 80071ee:	2b80      	cmp	r3, #128	; 0x80
 80071f0:	d00a      	beq.n	8007208 <UART_SetConfig+0x1f8>
 80071f2:	2b80      	cmp	r3, #128	; 0x80
 80071f4:	d814      	bhi.n	8007220 <UART_SetConfig+0x210>
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d002      	beq.n	8007200 <UART_SetConfig+0x1f0>
 80071fa:	2b40      	cmp	r3, #64	; 0x40
 80071fc:	d008      	beq.n	8007210 <UART_SetConfig+0x200>
 80071fe:	e00f      	b.n	8007220 <UART_SetConfig+0x210>
 8007200:	2300      	movs	r3, #0
 8007202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007206:	e082      	b.n	800730e <UART_SetConfig+0x2fe>
 8007208:	2302      	movs	r3, #2
 800720a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800720e:	e07e      	b.n	800730e <UART_SetConfig+0x2fe>
 8007210:	2304      	movs	r3, #4
 8007212:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007216:	e07a      	b.n	800730e <UART_SetConfig+0x2fe>
 8007218:	2308      	movs	r3, #8
 800721a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800721e:	e076      	b.n	800730e <UART_SetConfig+0x2fe>
 8007220:	2310      	movs	r3, #16
 8007222:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007226:	e072      	b.n	800730e <UART_SetConfig+0x2fe>
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a35      	ldr	r2, [pc, #212]	; (8007304 <UART_SetConfig+0x2f4>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d12a      	bne.n	8007288 <UART_SetConfig+0x278>
 8007232:	4b30      	ldr	r3, [pc, #192]	; (80072f4 <UART_SetConfig+0x2e4>)
 8007234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007238:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800723c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007240:	d01a      	beq.n	8007278 <UART_SetConfig+0x268>
 8007242:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007246:	d81b      	bhi.n	8007280 <UART_SetConfig+0x270>
 8007248:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800724c:	d00c      	beq.n	8007268 <UART_SetConfig+0x258>
 800724e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007252:	d815      	bhi.n	8007280 <UART_SetConfig+0x270>
 8007254:	2b00      	cmp	r3, #0
 8007256:	d003      	beq.n	8007260 <UART_SetConfig+0x250>
 8007258:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800725c:	d008      	beq.n	8007270 <UART_SetConfig+0x260>
 800725e:	e00f      	b.n	8007280 <UART_SetConfig+0x270>
 8007260:	2300      	movs	r3, #0
 8007262:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007266:	e052      	b.n	800730e <UART_SetConfig+0x2fe>
 8007268:	2302      	movs	r3, #2
 800726a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800726e:	e04e      	b.n	800730e <UART_SetConfig+0x2fe>
 8007270:	2304      	movs	r3, #4
 8007272:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007276:	e04a      	b.n	800730e <UART_SetConfig+0x2fe>
 8007278:	2308      	movs	r3, #8
 800727a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800727e:	e046      	b.n	800730e <UART_SetConfig+0x2fe>
 8007280:	2310      	movs	r3, #16
 8007282:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007286:	e042      	b.n	800730e <UART_SetConfig+0x2fe>
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a17      	ldr	r2, [pc, #92]	; (80072ec <UART_SetConfig+0x2dc>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d13a      	bne.n	8007308 <UART_SetConfig+0x2f8>
 8007292:	4b18      	ldr	r3, [pc, #96]	; (80072f4 <UART_SetConfig+0x2e4>)
 8007294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007298:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800729c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80072a0:	d01a      	beq.n	80072d8 <UART_SetConfig+0x2c8>
 80072a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80072a6:	d81b      	bhi.n	80072e0 <UART_SetConfig+0x2d0>
 80072a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072ac:	d00c      	beq.n	80072c8 <UART_SetConfig+0x2b8>
 80072ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072b2:	d815      	bhi.n	80072e0 <UART_SetConfig+0x2d0>
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d003      	beq.n	80072c0 <UART_SetConfig+0x2b0>
 80072b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072bc:	d008      	beq.n	80072d0 <UART_SetConfig+0x2c0>
 80072be:	e00f      	b.n	80072e0 <UART_SetConfig+0x2d0>
 80072c0:	2300      	movs	r3, #0
 80072c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072c6:	e022      	b.n	800730e <UART_SetConfig+0x2fe>
 80072c8:	2302      	movs	r3, #2
 80072ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072ce:	e01e      	b.n	800730e <UART_SetConfig+0x2fe>
 80072d0:	2304      	movs	r3, #4
 80072d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072d6:	e01a      	b.n	800730e <UART_SetConfig+0x2fe>
 80072d8:	2308      	movs	r3, #8
 80072da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072de:	e016      	b.n	800730e <UART_SetConfig+0x2fe>
 80072e0:	2310      	movs	r3, #16
 80072e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072e6:	e012      	b.n	800730e <UART_SetConfig+0x2fe>
 80072e8:	cfff69f3 	.word	0xcfff69f3
 80072ec:	40008000 	.word	0x40008000
 80072f0:	40013800 	.word	0x40013800
 80072f4:	40021000 	.word	0x40021000
 80072f8:	40004400 	.word	0x40004400
 80072fc:	40004800 	.word	0x40004800
 8007300:	40004c00 	.word	0x40004c00
 8007304:	40005000 	.word	0x40005000
 8007308:	2310      	movs	r3, #16
 800730a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4aae      	ldr	r2, [pc, #696]	; (80075cc <UART_SetConfig+0x5bc>)
 8007314:	4293      	cmp	r3, r2
 8007316:	f040 8097 	bne.w	8007448 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800731a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800731e:	2b08      	cmp	r3, #8
 8007320:	d823      	bhi.n	800736a <UART_SetConfig+0x35a>
 8007322:	a201      	add	r2, pc, #4	; (adr r2, 8007328 <UART_SetConfig+0x318>)
 8007324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007328:	0800734d 	.word	0x0800734d
 800732c:	0800736b 	.word	0x0800736b
 8007330:	08007355 	.word	0x08007355
 8007334:	0800736b 	.word	0x0800736b
 8007338:	0800735b 	.word	0x0800735b
 800733c:	0800736b 	.word	0x0800736b
 8007340:	0800736b 	.word	0x0800736b
 8007344:	0800736b 	.word	0x0800736b
 8007348:	08007363 	.word	0x08007363
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800734c:	f7fc f848 	bl	80033e0 <HAL_RCC_GetPCLK1Freq>
 8007350:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007352:	e010      	b.n	8007376 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007354:	4b9e      	ldr	r3, [pc, #632]	; (80075d0 <UART_SetConfig+0x5c0>)
 8007356:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007358:	e00d      	b.n	8007376 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800735a:	f7fb ffab 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 800735e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007360:	e009      	b.n	8007376 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007362:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007366:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007368:	e005      	b.n	8007376 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800736a:	2300      	movs	r3, #0
 800736c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800736e:	2301      	movs	r3, #1
 8007370:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007374:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007378:	2b00      	cmp	r3, #0
 800737a:	f000 8130 	beq.w	80075de <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007382:	4a94      	ldr	r2, [pc, #592]	; (80075d4 <UART_SetConfig+0x5c4>)
 8007384:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007388:	461a      	mov	r2, r3
 800738a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007390:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	685a      	ldr	r2, [r3, #4]
 8007396:	4613      	mov	r3, r2
 8007398:	005b      	lsls	r3, r3, #1
 800739a:	4413      	add	r3, r2
 800739c:	69ba      	ldr	r2, [r7, #24]
 800739e:	429a      	cmp	r2, r3
 80073a0:	d305      	bcc.n	80073ae <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80073a8:	69ba      	ldr	r2, [r7, #24]
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d903      	bls.n	80073b6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80073b4:	e113      	b.n	80075de <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b8:	2200      	movs	r2, #0
 80073ba:	60bb      	str	r3, [r7, #8]
 80073bc:	60fa      	str	r2, [r7, #12]
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c2:	4a84      	ldr	r2, [pc, #528]	; (80075d4 <UART_SetConfig+0x5c4>)
 80073c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	2200      	movs	r2, #0
 80073cc:	603b      	str	r3, [r7, #0]
 80073ce:	607a      	str	r2, [r7, #4]
 80073d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80073d8:	f7f8 ff10 	bl	80001fc <__aeabi_uldivmod>
 80073dc:	4602      	mov	r2, r0
 80073de:	460b      	mov	r3, r1
 80073e0:	4610      	mov	r0, r2
 80073e2:	4619      	mov	r1, r3
 80073e4:	f04f 0200 	mov.w	r2, #0
 80073e8:	f04f 0300 	mov.w	r3, #0
 80073ec:	020b      	lsls	r3, r1, #8
 80073ee:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80073f2:	0202      	lsls	r2, r0, #8
 80073f4:	6979      	ldr	r1, [r7, #20]
 80073f6:	6849      	ldr	r1, [r1, #4]
 80073f8:	0849      	lsrs	r1, r1, #1
 80073fa:	2000      	movs	r0, #0
 80073fc:	460c      	mov	r4, r1
 80073fe:	4605      	mov	r5, r0
 8007400:	eb12 0804 	adds.w	r8, r2, r4
 8007404:	eb43 0905 	adc.w	r9, r3, r5
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	469a      	mov	sl, r3
 8007410:	4693      	mov	fp, r2
 8007412:	4652      	mov	r2, sl
 8007414:	465b      	mov	r3, fp
 8007416:	4640      	mov	r0, r8
 8007418:	4649      	mov	r1, r9
 800741a:	f7f8 feef 	bl	80001fc <__aeabi_uldivmod>
 800741e:	4602      	mov	r2, r0
 8007420:	460b      	mov	r3, r1
 8007422:	4613      	mov	r3, r2
 8007424:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007426:	6a3b      	ldr	r3, [r7, #32]
 8007428:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800742c:	d308      	bcc.n	8007440 <UART_SetConfig+0x430>
 800742e:	6a3b      	ldr	r3, [r7, #32]
 8007430:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007434:	d204      	bcs.n	8007440 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	6a3a      	ldr	r2, [r7, #32]
 800743c:	60da      	str	r2, [r3, #12]
 800743e:	e0ce      	b.n	80075de <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007446:	e0ca      	b.n	80075de <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	69db      	ldr	r3, [r3, #28]
 800744c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007450:	d166      	bne.n	8007520 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007452:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007456:	2b08      	cmp	r3, #8
 8007458:	d827      	bhi.n	80074aa <UART_SetConfig+0x49a>
 800745a:	a201      	add	r2, pc, #4	; (adr r2, 8007460 <UART_SetConfig+0x450>)
 800745c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007460:	08007485 	.word	0x08007485
 8007464:	0800748d 	.word	0x0800748d
 8007468:	08007495 	.word	0x08007495
 800746c:	080074ab 	.word	0x080074ab
 8007470:	0800749b 	.word	0x0800749b
 8007474:	080074ab 	.word	0x080074ab
 8007478:	080074ab 	.word	0x080074ab
 800747c:	080074ab 	.word	0x080074ab
 8007480:	080074a3 	.word	0x080074a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007484:	f7fb ffac 	bl	80033e0 <HAL_RCC_GetPCLK1Freq>
 8007488:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800748a:	e014      	b.n	80074b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800748c:	f7fb ffbe 	bl	800340c <HAL_RCC_GetPCLK2Freq>
 8007490:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007492:	e010      	b.n	80074b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007494:	4b4e      	ldr	r3, [pc, #312]	; (80075d0 <UART_SetConfig+0x5c0>)
 8007496:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007498:	e00d      	b.n	80074b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800749a:	f7fb ff0b 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 800749e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80074a0:	e009      	b.n	80074b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80074a8:	e005      	b.n	80074b6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80074aa:	2300      	movs	r3, #0
 80074ac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
 80074b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80074b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80074b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	f000 8090 	beq.w	80075de <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c2:	4a44      	ldr	r2, [pc, #272]	; (80075d4 <UART_SetConfig+0x5c4>)
 80074c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074c8:	461a      	mov	r2, r3
 80074ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80074d0:	005a      	lsls	r2, r3, #1
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	085b      	lsrs	r3, r3, #1
 80074d8:	441a      	add	r2, r3
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	fbb2 f3f3 	udiv	r3, r2, r3
 80074e2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074e4:	6a3b      	ldr	r3, [r7, #32]
 80074e6:	2b0f      	cmp	r3, #15
 80074e8:	d916      	bls.n	8007518 <UART_SetConfig+0x508>
 80074ea:	6a3b      	ldr	r3, [r7, #32]
 80074ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074f0:	d212      	bcs.n	8007518 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80074f2:	6a3b      	ldr	r3, [r7, #32]
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	f023 030f 	bic.w	r3, r3, #15
 80074fa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80074fc:	6a3b      	ldr	r3, [r7, #32]
 80074fe:	085b      	lsrs	r3, r3, #1
 8007500:	b29b      	uxth	r3, r3
 8007502:	f003 0307 	and.w	r3, r3, #7
 8007506:	b29a      	uxth	r2, r3
 8007508:	8bfb      	ldrh	r3, [r7, #30]
 800750a:	4313      	orrs	r3, r2
 800750c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	8bfa      	ldrh	r2, [r7, #30]
 8007514:	60da      	str	r2, [r3, #12]
 8007516:	e062      	b.n	80075de <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007518:	2301      	movs	r3, #1
 800751a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800751e:	e05e      	b.n	80075de <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007520:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007524:	2b08      	cmp	r3, #8
 8007526:	d828      	bhi.n	800757a <UART_SetConfig+0x56a>
 8007528:	a201      	add	r2, pc, #4	; (adr r2, 8007530 <UART_SetConfig+0x520>)
 800752a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800752e:	bf00      	nop
 8007530:	08007555 	.word	0x08007555
 8007534:	0800755d 	.word	0x0800755d
 8007538:	08007565 	.word	0x08007565
 800753c:	0800757b 	.word	0x0800757b
 8007540:	0800756b 	.word	0x0800756b
 8007544:	0800757b 	.word	0x0800757b
 8007548:	0800757b 	.word	0x0800757b
 800754c:	0800757b 	.word	0x0800757b
 8007550:	08007573 	.word	0x08007573
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007554:	f7fb ff44 	bl	80033e0 <HAL_RCC_GetPCLK1Freq>
 8007558:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800755a:	e014      	b.n	8007586 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800755c:	f7fb ff56 	bl	800340c <HAL_RCC_GetPCLK2Freq>
 8007560:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007562:	e010      	b.n	8007586 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007564:	4b1a      	ldr	r3, [pc, #104]	; (80075d0 <UART_SetConfig+0x5c0>)
 8007566:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007568:	e00d      	b.n	8007586 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800756a:	f7fb fea3 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 800756e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007570:	e009      	b.n	8007586 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007572:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007576:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007578:	e005      	b.n	8007586 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800757a:	2300      	movs	r3, #0
 800757c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007584:	bf00      	nop
    }

    if (pclk != 0U)
 8007586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007588:	2b00      	cmp	r3, #0
 800758a:	d028      	beq.n	80075de <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007590:	4a10      	ldr	r2, [pc, #64]	; (80075d4 <UART_SetConfig+0x5c4>)
 8007592:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007596:	461a      	mov	r2, r3
 8007598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759a:	fbb3 f2f2 	udiv	r2, r3, r2
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	085b      	lsrs	r3, r3, #1
 80075a4:	441a      	add	r2, r3
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80075ae:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075b0:	6a3b      	ldr	r3, [r7, #32]
 80075b2:	2b0f      	cmp	r3, #15
 80075b4:	d910      	bls.n	80075d8 <UART_SetConfig+0x5c8>
 80075b6:	6a3b      	ldr	r3, [r7, #32]
 80075b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075bc:	d20c      	bcs.n	80075d8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80075be:	6a3b      	ldr	r3, [r7, #32]
 80075c0:	b29a      	uxth	r2, r3
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	60da      	str	r2, [r3, #12]
 80075c8:	e009      	b.n	80075de <UART_SetConfig+0x5ce>
 80075ca:	bf00      	nop
 80075cc:	40008000 	.word	0x40008000
 80075d0:	00f42400 	.word	0x00f42400
 80075d4:	08008ec4 	.word	0x08008ec4
      }
      else
      {
        ret = HAL_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	2201      	movs	r2, #1
 80075e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	2201      	movs	r2, #1
 80075ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	2200      	movs	r2, #0
 80075f2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	2200      	movs	r2, #0
 80075f8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80075fa:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3730      	adds	r7, #48	; 0x30
 8007602:	46bd      	mov	sp, r7
 8007604:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007608 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007608:	b480      	push	{r7}
 800760a:	b083      	sub	sp, #12
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007614:	f003 0308 	and.w	r3, r3, #8
 8007618:	2b00      	cmp	r3, #0
 800761a:	d00a      	beq.n	8007632 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	430a      	orrs	r2, r1
 8007630:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007636:	f003 0301 	and.w	r3, r3, #1
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00a      	beq.n	8007654 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	430a      	orrs	r2, r1
 8007652:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007658:	f003 0302 	and.w	r3, r3, #2
 800765c:	2b00      	cmp	r3, #0
 800765e:	d00a      	beq.n	8007676 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	430a      	orrs	r2, r1
 8007674:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800767a:	f003 0304 	and.w	r3, r3, #4
 800767e:	2b00      	cmp	r3, #0
 8007680:	d00a      	beq.n	8007698 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	430a      	orrs	r2, r1
 8007696:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800769c:	f003 0310 	and.w	r3, r3, #16
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d00a      	beq.n	80076ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	430a      	orrs	r2, r1
 80076b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076be:	f003 0320 	and.w	r3, r3, #32
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d00a      	beq.n	80076dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	430a      	orrs	r2, r1
 80076da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d01a      	beq.n	800771e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	430a      	orrs	r2, r1
 80076fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007702:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007706:	d10a      	bne.n	800771e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	430a      	orrs	r2, r1
 800771c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00a      	beq.n	8007740 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	430a      	orrs	r2, r1
 800773e:	605a      	str	r2, [r3, #4]
  }
}
 8007740:	bf00      	nop
 8007742:	370c      	adds	r7, #12
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr

0800774c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b098      	sub	sp, #96	; 0x60
 8007750:	af02      	add	r7, sp, #8
 8007752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800775c:	f7fa fa20 	bl	8001ba0 <HAL_GetTick>
 8007760:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f003 0308 	and.w	r3, r3, #8
 800776c:	2b08      	cmp	r3, #8
 800776e:	d12f      	bne.n	80077d0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007770:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007774:	9300      	str	r3, [sp, #0]
 8007776:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007778:	2200      	movs	r2, #0
 800777a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 f88e 	bl	80078a0 <UART_WaitOnFlagUntilTimeout>
 8007784:	4603      	mov	r3, r0
 8007786:	2b00      	cmp	r3, #0
 8007788:	d022      	beq.n	80077d0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007792:	e853 3f00 	ldrex	r3, [r3]
 8007796:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800779a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800779e:	653b      	str	r3, [r7, #80]	; 0x50
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	461a      	mov	r2, r3
 80077a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077a8:	647b      	str	r3, [r7, #68]	; 0x44
 80077aa:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80077ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077b0:	e841 2300 	strex	r3, r2, [r1]
 80077b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80077b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d1e6      	bne.n	800778a <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2220      	movs	r2, #32
 80077c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2200      	movs	r2, #0
 80077c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077cc:	2303      	movs	r3, #3
 80077ce:	e063      	b.n	8007898 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f003 0304 	and.w	r3, r3, #4
 80077da:	2b04      	cmp	r3, #4
 80077dc:	d149      	bne.n	8007872 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077de:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80077e2:	9300      	str	r3, [sp, #0]
 80077e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077e6:	2200      	movs	r2, #0
 80077e8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 f857 	bl	80078a0 <UART_WaitOnFlagUntilTimeout>
 80077f2:	4603      	mov	r3, r0
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d03c      	beq.n	8007872 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007800:	e853 3f00 	ldrex	r3, [r3]
 8007804:	623b      	str	r3, [r7, #32]
   return(result);
 8007806:	6a3b      	ldr	r3, [r7, #32]
 8007808:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800780c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	461a      	mov	r2, r3
 8007814:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007816:	633b      	str	r3, [r7, #48]	; 0x30
 8007818:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800781a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800781c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800781e:	e841 2300 	strex	r3, r2, [r1]
 8007822:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007826:	2b00      	cmp	r3, #0
 8007828:	d1e6      	bne.n	80077f8 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	3308      	adds	r3, #8
 8007830:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	e853 3f00 	ldrex	r3, [r3]
 8007838:	60fb      	str	r3, [r7, #12]
   return(result);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f023 0301 	bic.w	r3, r3, #1
 8007840:	64bb      	str	r3, [r7, #72]	; 0x48
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	3308      	adds	r3, #8
 8007848:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800784a:	61fa      	str	r2, [r7, #28]
 800784c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800784e:	69b9      	ldr	r1, [r7, #24]
 8007850:	69fa      	ldr	r2, [r7, #28]
 8007852:	e841 2300 	strex	r3, r2, [r1]
 8007856:	617b      	str	r3, [r7, #20]
   return(result);
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d1e5      	bne.n	800782a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2220      	movs	r2, #32
 8007862:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800786e:	2303      	movs	r3, #3
 8007870:	e012      	b.n	8007898 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2220      	movs	r2, #32
 8007876:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2220      	movs	r2, #32
 800787e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2200      	movs	r2, #0
 8007886:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2200      	movs	r2, #0
 800788c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007896:	2300      	movs	r3, #0
}
 8007898:	4618      	mov	r0, r3
 800789a:	3758      	adds	r7, #88	; 0x58
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b084      	sub	sp, #16
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	60f8      	str	r0, [r7, #12]
 80078a8:	60b9      	str	r1, [r7, #8]
 80078aa:	603b      	str	r3, [r7, #0]
 80078ac:	4613      	mov	r3, r2
 80078ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078b0:	e049      	b.n	8007946 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078b2:	69bb      	ldr	r3, [r7, #24]
 80078b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078b8:	d045      	beq.n	8007946 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078ba:	f7fa f971 	bl	8001ba0 <HAL_GetTick>
 80078be:	4602      	mov	r2, r0
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	1ad3      	subs	r3, r2, r3
 80078c4:	69ba      	ldr	r2, [r7, #24]
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d302      	bcc.n	80078d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80078ca:	69bb      	ldr	r3, [r7, #24]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d101      	bne.n	80078d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80078d0:	2303      	movs	r3, #3
 80078d2:	e048      	b.n	8007966 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f003 0304 	and.w	r3, r3, #4
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d031      	beq.n	8007946 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	69db      	ldr	r3, [r3, #28]
 80078e8:	f003 0308 	and.w	r3, r3, #8
 80078ec:	2b08      	cmp	r3, #8
 80078ee:	d110      	bne.n	8007912 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	2208      	movs	r2, #8
 80078f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80078f8:	68f8      	ldr	r0, [r7, #12]
 80078fa:	f000 f838 	bl	800796e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2208      	movs	r2, #8
 8007902:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2200      	movs	r2, #0
 800790a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800790e:	2301      	movs	r3, #1
 8007910:	e029      	b.n	8007966 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	69db      	ldr	r3, [r3, #28]
 8007918:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800791c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007920:	d111      	bne.n	8007946 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800792a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800792c:	68f8      	ldr	r0, [r7, #12]
 800792e:	f000 f81e 	bl	800796e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2220      	movs	r2, #32
 8007936:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2200      	movs	r2, #0
 800793e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007942:	2303      	movs	r3, #3
 8007944:	e00f      	b.n	8007966 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	69da      	ldr	r2, [r3, #28]
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	4013      	ands	r3, r2
 8007950:	68ba      	ldr	r2, [r7, #8]
 8007952:	429a      	cmp	r2, r3
 8007954:	bf0c      	ite	eq
 8007956:	2301      	moveq	r3, #1
 8007958:	2300      	movne	r3, #0
 800795a:	b2db      	uxtb	r3, r3
 800795c:	461a      	mov	r2, r3
 800795e:	79fb      	ldrb	r3, [r7, #7]
 8007960:	429a      	cmp	r2, r3
 8007962:	d0a6      	beq.n	80078b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007964:	2300      	movs	r3, #0
}
 8007966:	4618      	mov	r0, r3
 8007968:	3710      	adds	r7, #16
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}

0800796e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800796e:	b480      	push	{r7}
 8007970:	b095      	sub	sp, #84	; 0x54
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800797c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800797e:	e853 3f00 	ldrex	r3, [r3]
 8007982:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007986:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800798a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	461a      	mov	r2, r3
 8007992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007994:	643b      	str	r3, [r7, #64]	; 0x40
 8007996:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007998:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800799a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800799c:	e841 2300 	strex	r3, r2, [r1]
 80079a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d1e6      	bne.n	8007976 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	3308      	adds	r3, #8
 80079ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b0:	6a3b      	ldr	r3, [r7, #32]
 80079b2:	e853 3f00 	ldrex	r3, [r3]
 80079b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80079b8:	69fb      	ldr	r3, [r7, #28]
 80079ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079be:	f023 0301 	bic.w	r3, r3, #1
 80079c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	3308      	adds	r3, #8
 80079ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80079ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079d4:	e841 2300 	strex	r3, r2, [r1]
 80079d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d1e3      	bne.n	80079a8 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d118      	bne.n	8007a1a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	e853 3f00 	ldrex	r3, [r3]
 80079f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	f023 0310 	bic.w	r3, r3, #16
 80079fc:	647b      	str	r3, [r7, #68]	; 0x44
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	461a      	mov	r2, r3
 8007a04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a06:	61bb      	str	r3, [r7, #24]
 8007a08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0a:	6979      	ldr	r1, [r7, #20]
 8007a0c:	69ba      	ldr	r2, [r7, #24]
 8007a0e:	e841 2300 	strex	r3, r2, [r1]
 8007a12:	613b      	str	r3, [r7, #16]
   return(result);
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d1e6      	bne.n	80079e8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2220      	movs	r2, #32
 8007a1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2200      	movs	r2, #0
 8007a26:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007a2e:	bf00      	nop
 8007a30:	3754      	adds	r7, #84	; 0x54
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr

08007a3a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007a3a:	b480      	push	{r7}
 8007a3c:	b085      	sub	sp, #20
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d101      	bne.n	8007a50 <HAL_UARTEx_DisableFifoMode+0x16>
 8007a4c:	2302      	movs	r3, #2
 8007a4e:	e027      	b.n	8007aa0 <HAL_UARTEx_DisableFifoMode+0x66>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2201      	movs	r2, #1
 8007a54:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2224      	movs	r2, #36	; 0x24
 8007a5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	681a      	ldr	r2, [r3, #0]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f022 0201 	bic.w	r2, r2, #1
 8007a76:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007a7e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2200      	movs	r2, #0
 8007a84:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	68fa      	ldr	r2, [r7, #12]
 8007a8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2220      	movs	r2, #32
 8007a92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007a9e:	2300      	movs	r3, #0
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3714      	adds	r7, #20
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d101      	bne.n	8007ac4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007ac0:	2302      	movs	r3, #2
 8007ac2:	e02d      	b.n	8007b20 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2224      	movs	r2, #36	; 0x24
 8007ad0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f022 0201 	bic.w	r2, r2, #1
 8007aea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	683a      	ldr	r2, [r7, #0]
 8007afc:	430a      	orrs	r2, r1
 8007afe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 f84f 	bl	8007ba4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	68fa      	ldr	r2, [r7, #12]
 8007b0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2220      	movs	r2, #32
 8007b12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007b1e:	2300      	movs	r3, #0
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3710      	adds	r7, #16
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d101      	bne.n	8007b40 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007b3c:	2302      	movs	r3, #2
 8007b3e:	e02d      	b.n	8007b9c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2201      	movs	r2, #1
 8007b44:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2224      	movs	r2, #36	; 0x24
 8007b4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f022 0201 	bic.w	r2, r2, #1
 8007b66:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	683a      	ldr	r2, [r7, #0]
 8007b78:	430a      	orrs	r2, r1
 8007b7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 f811 	bl	8007ba4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	68fa      	ldr	r2, [r7, #12]
 8007b88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2220      	movs	r2, #32
 8007b8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2200      	movs	r2, #0
 8007b96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007b9a:	2300      	movs	r3, #0
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3710      	adds	r7, #16
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b085      	sub	sp, #20
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d108      	bne.n	8007bc6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007bc4:	e031      	b.n	8007c2a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007bc6:	2308      	movs	r3, #8
 8007bc8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007bca:	2308      	movs	r3, #8
 8007bcc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	0e5b      	lsrs	r3, r3, #25
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	f003 0307 	and.w	r3, r3, #7
 8007bdc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	0f5b      	lsrs	r3, r3, #29
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	f003 0307 	and.w	r3, r3, #7
 8007bec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007bee:	7bbb      	ldrb	r3, [r7, #14]
 8007bf0:	7b3a      	ldrb	r2, [r7, #12]
 8007bf2:	4911      	ldr	r1, [pc, #68]	; (8007c38 <UARTEx_SetNbDataToProcess+0x94>)
 8007bf4:	5c8a      	ldrb	r2, [r1, r2]
 8007bf6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007bfa:	7b3a      	ldrb	r2, [r7, #12]
 8007bfc:	490f      	ldr	r1, [pc, #60]	; (8007c3c <UARTEx_SetNbDataToProcess+0x98>)
 8007bfe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c00:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c04:	b29a      	uxth	r2, r3
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c0c:	7bfb      	ldrb	r3, [r7, #15]
 8007c0e:	7b7a      	ldrb	r2, [r7, #13]
 8007c10:	4909      	ldr	r1, [pc, #36]	; (8007c38 <UARTEx_SetNbDataToProcess+0x94>)
 8007c12:	5c8a      	ldrb	r2, [r1, r2]
 8007c14:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007c18:	7b7a      	ldrb	r2, [r7, #13]
 8007c1a:	4908      	ldr	r1, [pc, #32]	; (8007c3c <UARTEx_SetNbDataToProcess+0x98>)
 8007c1c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c1e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c22:	b29a      	uxth	r2, r3
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007c2a:	bf00      	nop
 8007c2c:	3714      	adds	r7, #20
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr
 8007c36:	bf00      	nop
 8007c38:	08008edc 	.word	0x08008edc
 8007c3c:	08008ee4 	.word	0x08008ee4

08007c40 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b087      	sub	sp, #28
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	681a      	ldr	r2, [r3, #0]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c54:	683a      	ldr	r2, [r7, #0]
 8007c56:	6812      	ldr	r2, [r2, #0]
 8007c58:	f023 0101 	bic.w	r1, r3, #1
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	689b      	ldr	r3, [r3, #8]
 8007c66:	2b08      	cmp	r3, #8
 8007c68:	d102      	bne.n	8007c70 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007c6a:	2340      	movs	r3, #64	; 0x40
 8007c6c:	617b      	str	r3, [r7, #20]
 8007c6e:	e001      	b.n	8007c74 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8007c70:	2300      	movs	r3, #0
 8007c72:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8007c80:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8007c86:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8007c8c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8007c92:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8007c98:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8007c9e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8007ca4:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8007caa:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8007cb0:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cbe:	693a      	ldr	r2, [r7, #16]
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cc8:	693a      	ldr	r2, [r7, #16]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cd2:	693a      	ldr	r2, [r7, #16]
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cdc:	693a      	ldr	r2, [r7, #16]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 8007ce2:	4b23      	ldr	r3, [pc, #140]	; (8007d70 <FMC_NORSRAM_Init+0x130>)
 8007ce4:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007cec:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007cf4:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8007cfc:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8007d04:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	43db      	mvns	r3, r3
 8007d14:	ea02 0103 	and.w	r1, r2, r3
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	681a      	ldr	r2, [r3, #0]
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	4319      	orrs	r1, r3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d2e:	d10c      	bne.n	8007d4a <FMC_NORSRAM_Init+0x10a>
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d008      	beq.n	8007d4a <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d44:	431a      	orrs	r2, r3
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d006      	beq.n	8007d60 <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d5a:	431a      	orrs	r2, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	371c      	adds	r7, #28
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr
 8007d6e:	bf00      	nop
 8007d70:	0008fb7f 	.word	0x0008fb7f

08007d74 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b087      	sub	sp, #28
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	60b9      	str	r1, [r7, #8]
 8007d7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
#if defined(FMC_BTRx_DATAHLD)
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	1c5a      	adds	r2, r3, #1
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	011b      	lsls	r3, r3, #4
 8007d94:	431a      	orrs	r2, r3
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	689b      	ldr	r3, [r3, #8]
 8007d9a:	021b      	lsls	r3, r3, #8
 8007d9c:	431a      	orrs	r2, r3
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	68db      	ldr	r3, [r3, #12]
 8007da2:	079b      	lsls	r3, r3, #30
 8007da4:	431a      	orrs	r2, r3
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	691b      	ldr	r3, [r3, #16]
 8007daa:	041b      	lsls	r3, r3, #16
 8007dac:	431a      	orrs	r2, r3
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	695b      	ldr	r3, [r3, #20]
 8007db2:	3b01      	subs	r3, #1
 8007db4:	051b      	lsls	r3, r3, #20
 8007db6:	431a      	orrs	r2, r3
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	699b      	ldr	r3, [r3, #24]
 8007dbc:	3b02      	subs	r3, #2
 8007dbe:	061b      	lsls	r3, r3, #24
 8007dc0:	ea42 0103 	orr.w	r1, r2, r3
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	69db      	ldr	r3, [r3, #28]
 8007dc8:	687a      	ldr	r2, [r7, #4]
 8007dca:	3201      	adds	r2, #1
 8007dcc:	4319      	orrs	r1, r3
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ddc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007de0:	d113      	bne.n	8007e0a <FMC_NORSRAM_Timing_Init+0x96>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007dea:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	695b      	ldr	r3, [r3, #20]
 8007df0:	3b01      	subs	r3, #1
 8007df2:	051b      	lsls	r3, r3, #20
 8007df4:	697a      	ldr	r2, [r7, #20]
 8007df6:	4313      	orrs	r3, r2
 8007df8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	431a      	orrs	r2, r3
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007e0a:	2300      	movs	r3, #0
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	371c      	adds	r7, #28
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr

08007e18 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b085      	sub	sp, #20
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	60b9      	str	r1, [r7, #8]
 8007e22:	607a      	str	r2, [r7, #4]
 8007e24:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e2c:	d121      	bne.n	8007e72 <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FMC_BTRx_DATAHLD)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e36:	f003 627f 	and.w	r2, r3, #267386880	; 0xff00000
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	6819      	ldr	r1, [r3, #0]
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	011b      	lsls	r3, r3, #4
 8007e44:	4319      	orrs	r1, r3
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	021b      	lsls	r3, r3, #8
 8007e4c:	4319      	orrs	r1, r3
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	68db      	ldr	r3, [r3, #12]
 8007e52:	079b      	lsls	r3, r3, #30
 8007e54:	4319      	orrs	r1, r3
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	69db      	ldr	r3, [r3, #28]
 8007e5a:	4319      	orrs	r1, r3
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	691b      	ldr	r3, [r3, #16]
 8007e60:	041b      	lsls	r3, r3, #16
 8007e62:	430b      	orrs	r3, r1
 8007e64:	ea42 0103 	orr.w	r1, r2, r3
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007e70:	e005      	b.n	8007e7e <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8007e7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8007e7e:	2300      	movs	r3, #0
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3714      	adds	r7, #20
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8007e8c:	b084      	sub	sp, #16
 8007e8e:	b480      	push	{r7}
 8007e90:	b085      	sub	sp, #20
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
 8007e96:	f107 001c 	add.w	r0, r7, #28
 8007e9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 8007ea2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8007ea4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007ea6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 8007eaa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 8007eae:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 8007eb2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007eb4:	68fa      	ldr	r2, [r7, #12]
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	685a      	ldr	r2, [r3, #4]
 8007ebe:	4b07      	ldr	r3, [pc, #28]	; (8007edc <SDMMC_Init+0x50>)
 8007ec0:	4013      	ands	r3, r2
 8007ec2:	68fa      	ldr	r2, [r7, #12]
 8007ec4:	431a      	orrs	r2, r3
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007eca:	2300      	movs	r3, #0
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3714      	adds	r7, #20
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	b004      	add	sp, #16
 8007ed8:	4770      	bx	lr
 8007eda:	bf00      	nop
 8007edc:	ffc02c00 	.word	0xffc02c00

08007ee0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b083      	sub	sp, #12
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	370c      	adds	r7, #12
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr

08007efa <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8007efa:	b580      	push	{r7, lr}
 8007efc:	b082      	sub	sp, #8
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f043 0203 	orr.w	r2, r3, #3
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8007f0e:	2002      	movs	r0, #2
 8007f10:	f7f9 fe52 	bl	8001bb8 <HAL_Delay>

  return HAL_OK;
 8007f14:	2300      	movs	r3, #0
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3708      	adds	r7, #8
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}

08007f1e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8007f1e:	b480      	push	{r7}
 8007f20:	b083      	sub	sp, #12
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f003 0303 	and.w	r3, r3, #3
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	370c      	adds	r7, #12
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr
	...

08007f3c <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b085      	sub	sp, #20
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007f46:	2300      	movs	r3, #0
 8007f48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	681a      	ldr	r2, [r3, #0]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007f5a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007f60:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007f66:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007f68:	68fa      	ldr	r2, [r7, #12]
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	68da      	ldr	r2, [r3, #12]
 8007f72:	4b06      	ldr	r3, [pc, #24]	; (8007f8c <SDMMC_SendCommand+0x50>)
 8007f74:	4013      	ands	r3, r2
 8007f76:	68fa      	ldr	r2, [r7, #12]
 8007f78:	431a      	orrs	r2, r3
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007f7e:	2300      	movs	r3, #0
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3714      	adds	r7, #20
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr
 8007f8c:	fffee0c0 	.word	0xfffee0c0

08007f90 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b083      	sub	sp, #12
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	691b      	ldr	r3, [r3, #16]
 8007f9c:	b2db      	uxtb	r3, r3
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	370c      	adds	r7, #12
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr

08007faa <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8007faa:	b480      	push	{r7}
 8007fac:	b085      	sub	sp, #20
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
 8007fb2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	3314      	adds	r3, #20
 8007fb8:	461a      	mov	r2, r3
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	4413      	add	r3, r2
 8007fbe:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3714      	adds	r7, #20
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr

08007fd0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b085      	sub	sp, #20
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	685a      	ldr	r2, [r3, #4]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007ff6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007ffc:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008002:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008004:	68fa      	ldr	r2, [r7, #12]
 8008006:	4313      	orrs	r3, r2
 8008008:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800800e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	431a      	orrs	r2, r3
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800801a:	2300      	movs	r3, #0

}
 800801c:	4618      	mov	r0, r3
 800801e:	3714      	adds	r7, #20
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr

08008028 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b088      	sub	sp, #32
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008036:	2310      	movs	r3, #16
 8008038:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800803a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800803e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008040:	2300      	movs	r3, #0
 8008042:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008044:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008048:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800804a:	f107 0308 	add.w	r3, r7, #8
 800804e:	4619      	mov	r1, r3
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f7ff ff73 	bl	8007f3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008056:	f241 3288 	movw	r2, #5000	; 0x1388
 800805a:	2110      	movs	r1, #16
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 f9b9 	bl	80083d4 <SDMMC_GetCmdResp1>
 8008062:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008064:	69fb      	ldr	r3, [r7, #28]
}
 8008066:	4618      	mov	r0, r3
 8008068:	3720      	adds	r7, #32
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}

0800806e <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800806e:	b580      	push	{r7, lr}
 8008070:	b08a      	sub	sp, #40	; 0x28
 8008072:	af00      	add	r7, sp, #0
 8008074:	60f8      	str	r0, [r7, #12]
 8008076:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800807e:	2307      	movs	r3, #7
 8008080:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008082:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008086:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008088:	2300      	movs	r3, #0
 800808a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800808c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008090:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008092:	f107 0310 	add.w	r3, r7, #16
 8008096:	4619      	mov	r1, r3
 8008098:	68f8      	ldr	r0, [r7, #12]
 800809a:	f7ff ff4f 	bl	8007f3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800809e:	f241 3288 	movw	r2, #5000	; 0x1388
 80080a2:	2107      	movs	r1, #7
 80080a4:	68f8      	ldr	r0, [r7, #12]
 80080a6:	f000 f995 	bl	80083d4 <SDMMC_GetCmdResp1>
 80080aa:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80080ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3728      	adds	r7, #40	; 0x28
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}

080080b6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80080b6:	b580      	push	{r7, lr}
 80080b8:	b088      	sub	sp, #32
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80080be:	2300      	movs	r3, #0
 80080c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80080c2:	2300      	movs	r3, #0
 80080c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80080c6:	2300      	movs	r3, #0
 80080c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80080ca:	2300      	movs	r3, #0
 80080cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80080ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80080d4:	f107 0308 	add.w	r3, r7, #8
 80080d8:	4619      	mov	r1, r3
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f7ff ff2e 	bl	8007f3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f000 fbb9 	bl	8008858 <SDMMC_GetCmdError>
 80080e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80080e8:	69fb      	ldr	r3, [r7, #28]
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3720      	adds	r7, #32
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b088      	sub	sp, #32
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80080fa:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80080fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008100:	2308      	movs	r3, #8
 8008102:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008104:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008108:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800810a:	2300      	movs	r3, #0
 800810c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800810e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008112:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008114:	f107 0308 	add.w	r3, r7, #8
 8008118:	4619      	mov	r1, r3
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f7ff ff0e 	bl	8007f3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 fb4b 	bl	80087bc <SDMMC_GetCmdResp7>
 8008126:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008128:	69fb      	ldr	r3, [r7, #28]
}
 800812a:	4618      	mov	r0, r3
 800812c:	3720      	adds	r7, #32
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}

08008132 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008132:	b580      	push	{r7, lr}
 8008134:	b088      	sub	sp, #32
 8008136:	af00      	add	r7, sp, #0
 8008138:	6078      	str	r0, [r7, #4]
 800813a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008140:	2337      	movs	r3, #55	; 0x37
 8008142:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008144:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008148:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800814a:	2300      	movs	r3, #0
 800814c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800814e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008152:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008154:	f107 0308 	add.w	r3, r7, #8
 8008158:	4619      	mov	r1, r3
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f7ff feee 	bl	8007f3c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8008160:	f241 3288 	movw	r2, #5000	; 0x1388
 8008164:	2137      	movs	r1, #55	; 0x37
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 f934 	bl	80083d4 <SDMMC_GetCmdResp1>
 800816c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800816e:	69fb      	ldr	r3, [r7, #28]
}
 8008170:	4618      	mov	r0, r3
 8008172:	3720      	adds	r7, #32
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b088      	sub	sp, #32
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008186:	2329      	movs	r3, #41	; 0x29
 8008188:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800818a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800818e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008190:	2300      	movs	r3, #0
 8008192:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008194:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008198:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800819a:	f107 0308 	add.w	r3, r7, #8
 800819e:	4619      	mov	r1, r3
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f7ff fecb 	bl	8007f3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 fa50 	bl	800864c <SDMMC_GetCmdResp3>
 80081ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80081ae:	69fb      	ldr	r3, [r7, #28]
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3720      	adds	r7, #32
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b088      	sub	sp, #32
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80081c6:	2306      	movs	r3, #6
 80081c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80081ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80081ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80081d0:	2300      	movs	r3, #0
 80081d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80081d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80081d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80081da:	f107 0308 	add.w	r3, r7, #8
 80081de:	4619      	mov	r1, r3
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f7ff feab 	bl	8007f3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80081e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80081ea:	2106      	movs	r1, #6
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 f8f1 	bl	80083d4 <SDMMC_GetCmdResp1>
 80081f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80081f4:	69fb      	ldr	r3, [r7, #28]
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3720      	adds	r7, #32
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}

080081fe <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80081fe:	b580      	push	{r7, lr}
 8008200:	b088      	sub	sp, #32
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008206:	2300      	movs	r3, #0
 8008208:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800820a:	2333      	movs	r3, #51	; 0x33
 800820c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800820e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008212:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008214:	2300      	movs	r3, #0
 8008216:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008218:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800821c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800821e:	f107 0308 	add.w	r3, r7, #8
 8008222:	4619      	mov	r1, r3
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f7ff fe89 	bl	8007f3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800822a:	f241 3288 	movw	r2, #5000	; 0x1388
 800822e:	2133      	movs	r1, #51	; 0x33
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 f8cf 	bl	80083d4 <SDMMC_GetCmdResp1>
 8008236:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008238:	69fb      	ldr	r3, [r7, #28]
}
 800823a:	4618      	mov	r0, r3
 800823c:	3720      	adds	r7, #32
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}

08008242 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8008242:	b580      	push	{r7, lr}
 8008244:	b088      	sub	sp, #32
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800824a:	2300      	movs	r3, #0
 800824c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800824e:	2302      	movs	r3, #2
 8008250:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008252:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008256:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008258:	2300      	movs	r3, #0
 800825a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800825c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008260:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008262:	f107 0308 	add.w	r3, r7, #8
 8008266:	4619      	mov	r1, r3
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f7ff fe67 	bl	8007f3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 f9a2 	bl	80085b8 <SDMMC_GetCmdResp2>
 8008274:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008276:	69fb      	ldr	r3, [r7, #28]
}
 8008278:	4618      	mov	r0, r3
 800827a:	3720      	adds	r7, #32
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b088      	sub	sp, #32
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800828e:	2309      	movs	r3, #9
 8008290:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008292:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008296:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008298:	2300      	movs	r3, #0
 800829a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800829c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80082a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80082a2:	f107 0308 	add.w	r3, r7, #8
 80082a6:	4619      	mov	r1, r3
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f7ff fe47 	bl	8007f3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 f982 	bl	80085b8 <SDMMC_GetCmdResp2>
 80082b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80082b6:	69fb      	ldr	r3, [r7, #28]
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3720      	adds	r7, #32
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b088      	sub	sp, #32
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80082ca:	2300      	movs	r3, #0
 80082cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80082ce:	2303      	movs	r3, #3
 80082d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80082d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80082d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80082d8:	2300      	movs	r3, #0
 80082da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80082dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80082e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80082e2:	f107 0308 	add.w	r3, r7, #8
 80082e6:	4619      	mov	r1, r3
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f7ff fe27 	bl	8007f3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80082ee:	683a      	ldr	r2, [r7, #0]
 80082f0:	2103      	movs	r1, #3
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 f9ea 	bl	80086cc <SDMMC_GetCmdResp6>
 80082f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80082fa:	69fb      	ldr	r3, [r7, #28]
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3720      	adds	r7, #32
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b088      	sub	sp, #32
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008312:	230d      	movs	r3, #13
 8008314:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008316:	f44f 7380 	mov.w	r3, #256	; 0x100
 800831a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800831c:	2300      	movs	r3, #0
 800831e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008320:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008324:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008326:	f107 0308 	add.w	r3, r7, #8
 800832a:	4619      	mov	r1, r3
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f7ff fe05 	bl	8007f3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8008332:	f241 3288 	movw	r2, #5000	; 0x1388
 8008336:	210d      	movs	r1, #13
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 f84b 	bl	80083d4 <SDMMC_GetCmdResp1>
 800833e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008340:	69fb      	ldr	r3, [r7, #28]
}
 8008342:	4618      	mov	r0, r3
 8008344:	3720      	adds	r7, #32
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}

0800834a <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800834a:	b580      	push	{r7, lr}
 800834c:	b088      	sub	sp, #32
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008352:	2300      	movs	r3, #0
 8008354:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8008356:	230d      	movs	r3, #13
 8008358:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800835a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800835e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008360:	2300      	movs	r3, #0
 8008362:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008364:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008368:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800836a:	f107 0308 	add.w	r3, r7, #8
 800836e:	4619      	mov	r1, r3
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f7ff fde3 	bl	8007f3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8008376:	f241 3288 	movw	r2, #5000	; 0x1388
 800837a:	210d      	movs	r1, #13
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f000 f829 	bl	80083d4 <SDMMC_GetCmdResp1>
 8008382:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008384:	69fb      	ldr	r3, [r7, #28]
}
 8008386:	4618      	mov	r0, r3
 8008388:	3720      	adds	r7, #32
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}

0800838e <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800838e:	b580      	push	{r7, lr}
 8008390:	b088      	sub	sp, #32
 8008392:	af00      	add	r7, sp, #0
 8008394:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8008396:	2300      	movs	r3, #0
 8008398:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800839a:	230b      	movs	r3, #11
 800839c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800839e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80083a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80083a4:	2300      	movs	r3, #0
 80083a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80083a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80083ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80083ae:	f107 0308 	add.w	r3, r7, #8
 80083b2:	4619      	mov	r1, r3
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f7ff fdc1 	bl	8007f3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 80083ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80083be:	210b      	movs	r1, #11
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f000 f807 	bl	80083d4 <SDMMC_GetCmdResp1>
 80083c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80083c8:	69fb      	ldr	r3, [r7, #28]
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3720      	adds	r7, #32
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
	...

080083d4 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b088      	sub	sp, #32
 80083d8:	af00      	add	r7, sp, #0
 80083da:	60f8      	str	r0, [r7, #12]
 80083dc:	460b      	mov	r3, r1
 80083de:	607a      	str	r2, [r7, #4]
 80083e0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80083e2:	4b70      	ldr	r3, [pc, #448]	; (80085a4 <SDMMC_GetCmdResp1+0x1d0>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a70      	ldr	r2, [pc, #448]	; (80085a8 <SDMMC_GetCmdResp1+0x1d4>)
 80083e8:	fba2 2303 	umull	r2, r3, r2, r3
 80083ec:	0a5a      	lsrs	r2, r3, #9
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	fb02 f303 	mul.w	r3, r2, r3
 80083f4:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80083f6:	69fb      	ldr	r3, [r7, #28]
 80083f8:	1e5a      	subs	r2, r3, #1
 80083fa:	61fa      	str	r2, [r7, #28]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d102      	bne.n	8008406 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008400:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008404:	e0c9      	b.n	800859a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800840a:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800840c:	69ba      	ldr	r2, [r7, #24]
 800840e:	4b67      	ldr	r3, [pc, #412]	; (80085ac <SDMMC_GetCmdResp1+0x1d8>)
 8008410:	4013      	ands	r3, r2
 8008412:	2b00      	cmp	r3, #0
 8008414:	d0ef      	beq.n	80083f6 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008416:	69bb      	ldr	r3, [r7, #24]
 8008418:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800841c:	2b00      	cmp	r3, #0
 800841e:	d1ea      	bne.n	80083f6 <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008424:	f003 0304 	and.w	r3, r3, #4
 8008428:	2b00      	cmp	r3, #0
 800842a:	d004      	beq.n	8008436 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2204      	movs	r2, #4
 8008430:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008432:	2304      	movs	r3, #4
 8008434:	e0b1      	b.n	800859a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800843a:	f003 0301 	and.w	r3, r3, #1
 800843e:	2b00      	cmp	r3, #0
 8008440:	d004      	beq.n	800844c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2201      	movs	r2, #1
 8008446:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008448:	2301      	movs	r3, #1
 800844a:	e0a6      	b.n	800859a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	4a58      	ldr	r2, [pc, #352]	; (80085b0 <SDMMC_GetCmdResp1+0x1dc>)
 8008450:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008452:	68f8      	ldr	r0, [r7, #12]
 8008454:	f7ff fd9c 	bl	8007f90 <SDMMC_GetCommandResponse>
 8008458:	4603      	mov	r3, r0
 800845a:	461a      	mov	r2, r3
 800845c:	7afb      	ldrb	r3, [r7, #11]
 800845e:	4293      	cmp	r3, r2
 8008460:	d001      	beq.n	8008466 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008462:	2301      	movs	r3, #1
 8008464:	e099      	b.n	800859a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008466:	2100      	movs	r1, #0
 8008468:	68f8      	ldr	r0, [r7, #12]
 800846a:	f7ff fd9e 	bl	8007faa <SDMMC_GetResponse>
 800846e:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008470:	697a      	ldr	r2, [r7, #20]
 8008472:	4b50      	ldr	r3, [pc, #320]	; (80085b4 <SDMMC_GetCmdResp1+0x1e0>)
 8008474:	4013      	ands	r3, r2
 8008476:	2b00      	cmp	r3, #0
 8008478:	d101      	bne.n	800847e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800847a:	2300      	movs	r3, #0
 800847c:	e08d      	b.n	800859a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	2b00      	cmp	r3, #0
 8008482:	da02      	bge.n	800848a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008484:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008488:	e087      	b.n	800859a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008490:	2b00      	cmp	r3, #0
 8008492:	d001      	beq.n	8008498 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008494:	2340      	movs	r3, #64	; 0x40
 8008496:	e080      	b.n	800859a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d001      	beq.n	80084a6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80084a2:	2380      	movs	r3, #128	; 0x80
 80084a4:	e079      	b.n	800859a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d002      	beq.n	80084b6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80084b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80084b4:	e071      	b.n	800859a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d002      	beq.n	80084c6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80084c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084c4:	e069      	b.n	800859a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d002      	beq.n	80084d6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80084d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084d4:	e061      	b.n	800859a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d002      	beq.n	80084e6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80084e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80084e4:	e059      	b.n	800859a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d002      	beq.n	80084f6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80084f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80084f4:	e051      	b.n	800859a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d002      	beq.n	8008506 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008500:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008504:	e049      	b.n	800859a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800850c:	2b00      	cmp	r3, #0
 800850e:	d002      	beq.n	8008516 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008510:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008514:	e041      	b.n	800859a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800851c:	2b00      	cmp	r3, #0
 800851e:	d002      	beq.n	8008526 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008520:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008524:	e039      	b.n	800859a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800852c:	2b00      	cmp	r3, #0
 800852e:	d002      	beq.n	8008536 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008530:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008534:	e031      	b.n	800859a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800853c:	2b00      	cmp	r3, #0
 800853e:	d002      	beq.n	8008546 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008540:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008544:	e029      	b.n	800859a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800854c:	2b00      	cmp	r3, #0
 800854e:	d002      	beq.n	8008556 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008550:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008554:	e021      	b.n	800859a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800855c:	2b00      	cmp	r3, #0
 800855e:	d002      	beq.n	8008566 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008560:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008564:	e019      	b.n	800859a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800856c:	2b00      	cmp	r3, #0
 800856e:	d002      	beq.n	8008576 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008570:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008574:	e011      	b.n	800859a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800857c:	2b00      	cmp	r3, #0
 800857e:	d002      	beq.n	8008586 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008580:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008584:	e009      	b.n	800859a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	f003 0308 	and.w	r3, r3, #8
 800858c:	2b00      	cmp	r3, #0
 800858e:	d002      	beq.n	8008596 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008590:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008594:	e001      	b.n	800859a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008596:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800859a:	4618      	mov	r0, r3
 800859c:	3720      	adds	r7, #32
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
 80085a2:	bf00      	nop
 80085a4:	20000000 	.word	0x20000000
 80085a8:	10624dd3 	.word	0x10624dd3
 80085ac:	00200045 	.word	0x00200045
 80085b0:	002000c5 	.word	0x002000c5
 80085b4:	fdffe008 	.word	0xfdffe008

080085b8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b085      	sub	sp, #20
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80085c0:	4b1f      	ldr	r3, [pc, #124]	; (8008640 <SDMMC_GetCmdResp2+0x88>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a1f      	ldr	r2, [pc, #124]	; (8008644 <SDMMC_GetCmdResp2+0x8c>)
 80085c6:	fba2 2303 	umull	r2, r3, r2, r3
 80085ca:	0a5b      	lsrs	r3, r3, #9
 80085cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80085d0:	fb02 f303 	mul.w	r3, r2, r3
 80085d4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	1e5a      	subs	r2, r3, #1
 80085da:	60fa      	str	r2, [r7, #12]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d102      	bne.n	80085e6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80085e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80085e4:	e026      	b.n	8008634 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085ea:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d0ef      	beq.n	80085d6 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d1ea      	bne.n	80085d6 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008604:	f003 0304 	and.w	r3, r3, #4
 8008608:	2b00      	cmp	r3, #0
 800860a:	d004      	beq.n	8008616 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2204      	movs	r2, #4
 8008610:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008612:	2304      	movs	r3, #4
 8008614:	e00e      	b.n	8008634 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800861a:	f003 0301 	and.w	r3, r3, #1
 800861e:	2b00      	cmp	r3, #0
 8008620:	d004      	beq.n	800862c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2201      	movs	r2, #1
 8008626:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008628:	2301      	movs	r3, #1
 800862a:	e003      	b.n	8008634 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	4a06      	ldr	r2, [pc, #24]	; (8008648 <SDMMC_GetCmdResp2+0x90>)
 8008630:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008632:	2300      	movs	r3, #0
}
 8008634:	4618      	mov	r0, r3
 8008636:	3714      	adds	r7, #20
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr
 8008640:	20000000 	.word	0x20000000
 8008644:	10624dd3 	.word	0x10624dd3
 8008648:	002000c5 	.word	0x002000c5

0800864c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800864c:	b480      	push	{r7}
 800864e:	b085      	sub	sp, #20
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008654:	4b1a      	ldr	r3, [pc, #104]	; (80086c0 <SDMMC_GetCmdResp3+0x74>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a1a      	ldr	r2, [pc, #104]	; (80086c4 <SDMMC_GetCmdResp3+0x78>)
 800865a:	fba2 2303 	umull	r2, r3, r2, r3
 800865e:	0a5b      	lsrs	r3, r3, #9
 8008660:	f241 3288 	movw	r2, #5000	; 0x1388
 8008664:	fb02 f303 	mul.w	r3, r2, r3
 8008668:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	1e5a      	subs	r2, r3, #1
 800866e:	60fa      	str	r2, [r7, #12]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d102      	bne.n	800867a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008674:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008678:	e01b      	b.n	80086b2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800867e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008686:	2b00      	cmp	r3, #0
 8008688:	d0ef      	beq.n	800866a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008690:	2b00      	cmp	r3, #0
 8008692:	d1ea      	bne.n	800866a <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008698:	f003 0304 	and.w	r3, r3, #4
 800869c:	2b00      	cmp	r3, #0
 800869e:	d004      	beq.n	80086aa <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2204      	movs	r2, #4
 80086a4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80086a6:	2304      	movs	r3, #4
 80086a8:	e003      	b.n	80086b2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	4a06      	ldr	r2, [pc, #24]	; (80086c8 <SDMMC_GetCmdResp3+0x7c>)
 80086ae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80086b0:	2300      	movs	r3, #0
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3714      	adds	r7, #20
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr
 80086be:	bf00      	nop
 80086c0:	20000000 	.word	0x20000000
 80086c4:	10624dd3 	.word	0x10624dd3
 80086c8:	002000c5 	.word	0x002000c5

080086cc <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b088      	sub	sp, #32
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	60f8      	str	r0, [r7, #12]
 80086d4:	460b      	mov	r3, r1
 80086d6:	607a      	str	r2, [r7, #4]
 80086d8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80086da:	4b35      	ldr	r3, [pc, #212]	; (80087b0 <SDMMC_GetCmdResp6+0xe4>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a35      	ldr	r2, [pc, #212]	; (80087b4 <SDMMC_GetCmdResp6+0xe8>)
 80086e0:	fba2 2303 	umull	r2, r3, r2, r3
 80086e4:	0a5b      	lsrs	r3, r3, #9
 80086e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80086ea:	fb02 f303 	mul.w	r3, r2, r3
 80086ee:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80086f0:	69fb      	ldr	r3, [r7, #28]
 80086f2:	1e5a      	subs	r2, r3, #1
 80086f4:	61fa      	str	r2, [r7, #28]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d102      	bne.n	8008700 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80086fa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80086fe:	e052      	b.n	80087a6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008704:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008706:	69bb      	ldr	r3, [r7, #24]
 8008708:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800870c:	2b00      	cmp	r3, #0
 800870e:	d0ef      	beq.n	80086f0 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008710:	69bb      	ldr	r3, [r7, #24]
 8008712:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008716:	2b00      	cmp	r3, #0
 8008718:	d1ea      	bne.n	80086f0 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800871e:	f003 0304 	and.w	r3, r3, #4
 8008722:	2b00      	cmp	r3, #0
 8008724:	d004      	beq.n	8008730 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2204      	movs	r2, #4
 800872a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800872c:	2304      	movs	r3, #4
 800872e:	e03a      	b.n	80087a6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008734:	f003 0301 	and.w	r3, r3, #1
 8008738:	2b00      	cmp	r3, #0
 800873a:	d004      	beq.n	8008746 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2201      	movs	r2, #1
 8008740:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008742:	2301      	movs	r3, #1
 8008744:	e02f      	b.n	80087a6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008746:	68f8      	ldr	r0, [r7, #12]
 8008748:	f7ff fc22 	bl	8007f90 <SDMMC_GetCommandResponse>
 800874c:	4603      	mov	r3, r0
 800874e:	461a      	mov	r2, r3
 8008750:	7afb      	ldrb	r3, [r7, #11]
 8008752:	4293      	cmp	r3, r2
 8008754:	d001      	beq.n	800875a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008756:	2301      	movs	r3, #1
 8008758:	e025      	b.n	80087a6 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	4a16      	ldr	r2, [pc, #88]	; (80087b8 <SDMMC_GetCmdResp6+0xec>)
 800875e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008760:	2100      	movs	r1, #0
 8008762:	68f8      	ldr	r0, [r7, #12]
 8008764:	f7ff fc21 	bl	8007faa <SDMMC_GetResponse>
 8008768:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008770:	2b00      	cmp	r3, #0
 8008772:	d106      	bne.n	8008782 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	0c1b      	lsrs	r3, r3, #16
 8008778:	b29a      	uxth	r2, r3
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800877e:	2300      	movs	r3, #0
 8008780:	e011      	b.n	80087a6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008788:	2b00      	cmp	r3, #0
 800878a:	d002      	beq.n	8008792 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800878c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008790:	e009      	b.n	80087a6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008798:	2b00      	cmp	r3, #0
 800879a:	d002      	beq.n	80087a2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800879c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80087a0:	e001      	b.n	80087a6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80087a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3720      	adds	r7, #32
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	bf00      	nop
 80087b0:	20000000 	.word	0x20000000
 80087b4:	10624dd3 	.word	0x10624dd3
 80087b8:	002000c5 	.word	0x002000c5

080087bc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80087bc:	b480      	push	{r7}
 80087be:	b085      	sub	sp, #20
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80087c4:	4b22      	ldr	r3, [pc, #136]	; (8008850 <SDMMC_GetCmdResp7+0x94>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a22      	ldr	r2, [pc, #136]	; (8008854 <SDMMC_GetCmdResp7+0x98>)
 80087ca:	fba2 2303 	umull	r2, r3, r2, r3
 80087ce:	0a5b      	lsrs	r3, r3, #9
 80087d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80087d4:	fb02 f303 	mul.w	r3, r2, r3
 80087d8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	1e5a      	subs	r2, r3, #1
 80087de:	60fa      	str	r2, [r7, #12]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d102      	bne.n	80087ea <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80087e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80087e8:	e02c      	b.n	8008844 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087ee:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d0ef      	beq.n	80087da <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008800:	2b00      	cmp	r3, #0
 8008802:	d1ea      	bne.n	80087da <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008808:	f003 0304 	and.w	r3, r3, #4
 800880c:	2b00      	cmp	r3, #0
 800880e:	d004      	beq.n	800881a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2204      	movs	r2, #4
 8008814:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008816:	2304      	movs	r3, #4
 8008818:	e014      	b.n	8008844 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800881e:	f003 0301 	and.w	r3, r3, #1
 8008822:	2b00      	cmp	r3, #0
 8008824:	d004      	beq.n	8008830 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2201      	movs	r2, #1
 800882a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800882c:	2301      	movs	r3, #1
 800882e:	e009      	b.n	8008844 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008838:	2b00      	cmp	r3, #0
 800883a:	d002      	beq.n	8008842 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2240      	movs	r2, #64	; 0x40
 8008840:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008842:	2300      	movs	r3, #0

}
 8008844:	4618      	mov	r0, r3
 8008846:	3714      	adds	r7, #20
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr
 8008850:	20000000 	.word	0x20000000
 8008854:	10624dd3 	.word	0x10624dd3

08008858 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8008858:	b480      	push	{r7}
 800885a:	b085      	sub	sp, #20
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008860:	4b11      	ldr	r3, [pc, #68]	; (80088a8 <SDMMC_GetCmdError+0x50>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a11      	ldr	r2, [pc, #68]	; (80088ac <SDMMC_GetCmdError+0x54>)
 8008866:	fba2 2303 	umull	r2, r3, r2, r3
 800886a:	0a5b      	lsrs	r3, r3, #9
 800886c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008870:	fb02 f303 	mul.w	r3, r2, r3
 8008874:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	1e5a      	subs	r2, r3, #1
 800887a:	60fa      	str	r2, [r7, #12]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d102      	bne.n	8008886 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008880:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008884:	e009      	b.n	800889a <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800888a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800888e:	2b00      	cmp	r3, #0
 8008890:	d0f1      	beq.n	8008876 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	4a06      	ldr	r2, [pc, #24]	; (80088b0 <SDMMC_GetCmdError+0x58>)
 8008896:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8008898:	2300      	movs	r3, #0
}
 800889a:	4618      	mov	r0, r3
 800889c:	3714      	adds	r7, #20
 800889e:	46bd      	mov	sp, r7
 80088a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a4:	4770      	bx	lr
 80088a6:	bf00      	nop
 80088a8:	20000000 	.word	0x20000000
 80088ac:	10624dd3 	.word	0x10624dd3
 80088b0:	002000c5 	.word	0x002000c5

080088b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80088b4:	b084      	sub	sp, #16
 80088b6:	b580      	push	{r7, lr}
 80088b8:	b084      	sub	sp, #16
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
 80088be:	f107 001c 	add.w	r0, r7, #28
 80088c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	68db      	ldr	r3, [r3, #12]
 80088ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 fa66 	bl	8008da4 <USB_CoreReset>
 80088d8:	4603      	mov	r3, r0
 80088da:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80088dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d106      	bne.n	80088f0 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	639a      	str	r2, [r3, #56]	; 0x38
 80088ee:	e005      	b.n	80088fc <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80088fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3710      	adds	r7, #16
 8008902:	46bd      	mov	sp, r7
 8008904:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008908:	b004      	add	sp, #16
 800890a:	4770      	bx	lr

0800890c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800890c:	b480      	push	{r7}
 800890e:	b083      	sub	sp, #12
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	689b      	ldr	r3, [r3, #8]
 8008918:	f023 0201 	bic.w	r2, r3, #1
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008920:	2300      	movs	r3, #0
}
 8008922:	4618      	mov	r0, r3
 8008924:	370c      	adds	r7, #12
 8008926:	46bd      	mov	sp, r7
 8008928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892c:	4770      	bx	lr

0800892e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800892e:	b580      	push	{r7, lr}
 8008930:	b084      	sub	sp, #16
 8008932:	af00      	add	r7, sp, #0
 8008934:	6078      	str	r0, [r7, #4]
 8008936:	460b      	mov	r3, r1
 8008938:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800893a:	2300      	movs	r3, #0
 800893c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	68db      	ldr	r3, [r3, #12]
 8008942:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800894a:	78fb      	ldrb	r3, [r7, #3]
 800894c:	2b01      	cmp	r3, #1
 800894e:	d115      	bne.n	800897c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	68db      	ldr	r3, [r3, #12]
 8008954:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800895c:	2001      	movs	r0, #1
 800895e:	f7f9 f92b 	bl	8001bb8 <HAL_Delay>
      ms++;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	3301      	adds	r3, #1
 8008966:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 fa0d 	bl	8008d88 <USB_GetMode>
 800896e:	4603      	mov	r3, r0
 8008970:	2b01      	cmp	r3, #1
 8008972:	d01e      	beq.n	80089b2 <USB_SetCurrentMode+0x84>
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2b31      	cmp	r3, #49	; 0x31
 8008978:	d9f0      	bls.n	800895c <USB_SetCurrentMode+0x2e>
 800897a:	e01a      	b.n	80089b2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800897c:	78fb      	ldrb	r3, [r7, #3]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d115      	bne.n	80089ae <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	68db      	ldr	r3, [r3, #12]
 8008986:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800898e:	2001      	movs	r0, #1
 8008990:	f7f9 f912 	bl	8001bb8 <HAL_Delay>
      ms++;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	3301      	adds	r3, #1
 8008998:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 f9f4 	bl	8008d88 <USB_GetMode>
 80089a0:	4603      	mov	r3, r0
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d005      	beq.n	80089b2 <USB_SetCurrentMode+0x84>
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2b31      	cmp	r3, #49	; 0x31
 80089aa:	d9f0      	bls.n	800898e <USB_SetCurrentMode+0x60>
 80089ac:	e001      	b.n	80089b2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80089ae:	2301      	movs	r3, #1
 80089b0:	e005      	b.n	80089be <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2b32      	cmp	r3, #50	; 0x32
 80089b6:	d101      	bne.n	80089bc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80089b8:	2301      	movs	r3, #1
 80089ba:	e000      	b.n	80089be <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80089bc:	2300      	movs	r3, #0
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3710      	adds	r7, #16
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}
	...

080089c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80089c8:	b084      	sub	sp, #16
 80089ca:	b580      	push	{r7, lr}
 80089cc:	b086      	sub	sp, #24
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
 80089d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80089d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80089da:	2300      	movs	r3, #0
 80089dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80089e2:	2300      	movs	r3, #0
 80089e4:	613b      	str	r3, [r7, #16]
 80089e6:	e009      	b.n	80089fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	3340      	adds	r3, #64	; 0x40
 80089ee:	009b      	lsls	r3, r3, #2
 80089f0:	4413      	add	r3, r2
 80089f2:	2200      	movs	r2, #0
 80089f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	3301      	adds	r3, #1
 80089fa:	613b      	str	r3, [r7, #16]
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	2b0e      	cmp	r3, #14
 8008a00:	d9f2      	bls.n	80089e8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008a02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d11c      	bne.n	8008a42 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	68fa      	ldr	r2, [r7, #12]
 8008a12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a16:	f043 0302 	orr.w	r3, r3, #2
 8008a1a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a20:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	601a      	str	r2, [r3, #0]
 8008a40:	e005      	b.n	8008a4e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a46:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a54:	461a      	mov	r2, r3
 8008a56:	2300      	movs	r3, #0
 8008a58:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008a5a:	2103      	movs	r1, #3
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 f959 	bl	8008d14 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008a62:	2110      	movs	r1, #16
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 f8f1 	bl	8008c4c <USB_FlushTxFifo>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d001      	beq.n	8008a74 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8008a70:	2301      	movs	r3, #1
 8008a72:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f000 f91d 	bl	8008cb4 <USB_FlushRxFifo>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d001      	beq.n	8008a84 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8008a80:	2301      	movs	r3, #1
 8008a82:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a96:	461a      	mov	r2, r3
 8008a98:	2300      	movs	r3, #0
 8008a9a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	613b      	str	r3, [r7, #16]
 8008aac:	e043      	b.n	8008b36 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	015a      	lsls	r2, r3, #5
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	4413      	add	r3, r2
 8008ab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ac0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ac4:	d118      	bne.n	8008af8 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d10a      	bne.n	8008ae2 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	015a      	lsls	r2, r3, #5
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	4413      	add	r3, r2
 8008ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ad8:	461a      	mov	r2, r3
 8008ada:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008ade:	6013      	str	r3, [r2, #0]
 8008ae0:	e013      	b.n	8008b0a <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	015a      	lsls	r2, r3, #5
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	4413      	add	r3, r2
 8008aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aee:	461a      	mov	r2, r3
 8008af0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008af4:	6013      	str	r3, [r2, #0]
 8008af6:	e008      	b.n	8008b0a <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	015a      	lsls	r2, r3, #5
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	4413      	add	r3, r2
 8008b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b04:	461a      	mov	r2, r3
 8008b06:	2300      	movs	r3, #0
 8008b08:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	015a      	lsls	r2, r3, #5
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	4413      	add	r3, r2
 8008b12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b16:	461a      	mov	r2, r3
 8008b18:	2300      	movs	r3, #0
 8008b1a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	015a      	lsls	r2, r3, #5
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	4413      	add	r3, r2
 8008b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b28:	461a      	mov	r2, r3
 8008b2a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008b2e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	3301      	adds	r3, #1
 8008b34:	613b      	str	r3, [r7, #16]
 8008b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b38:	693a      	ldr	r2, [r7, #16]
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d3b7      	bcc.n	8008aae <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b3e:	2300      	movs	r3, #0
 8008b40:	613b      	str	r3, [r7, #16]
 8008b42:	e043      	b.n	8008bcc <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	015a      	lsls	r2, r3, #5
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	4413      	add	r3, r2
 8008b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b5a:	d118      	bne.n	8008b8e <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d10a      	bne.n	8008b78 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	015a      	lsls	r2, r3, #5
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	4413      	add	r3, r2
 8008b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b6e:	461a      	mov	r2, r3
 8008b70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008b74:	6013      	str	r3, [r2, #0]
 8008b76:	e013      	b.n	8008ba0 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	015a      	lsls	r2, r3, #5
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	4413      	add	r3, r2
 8008b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b84:	461a      	mov	r2, r3
 8008b86:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008b8a:	6013      	str	r3, [r2, #0]
 8008b8c:	e008      	b.n	8008ba0 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	015a      	lsls	r2, r3, #5
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	4413      	add	r3, r2
 8008b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	015a      	lsls	r2, r3, #5
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	4413      	add	r3, r2
 8008ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bac:	461a      	mov	r2, r3
 8008bae:	2300      	movs	r3, #0
 8008bb0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	015a      	lsls	r2, r3, #5
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	4413      	add	r3, r2
 8008bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008bc4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	3301      	adds	r3, #1
 8008bca:	613b      	str	r3, [r7, #16]
 8008bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bce:	693a      	ldr	r2, [r7, #16]
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d3b7      	bcc.n	8008b44 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bda:	691b      	ldr	r3, [r3, #16]
 8008bdc:	68fa      	ldr	r2, [r7, #12]
 8008bde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008be2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008be6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2200      	movs	r2, #0
 8008bec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008bf4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	699b      	ldr	r3, [r3, #24]
 8008bfa:	f043 0210 	orr.w	r2, r3, #16
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	699a      	ldr	r2, [r3, #24]
 8008c06:	4b10      	ldr	r3, [pc, #64]	; (8008c48 <USB_DevInit+0x280>)
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	687a      	ldr	r2, [r7, #4]
 8008c0c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008c0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d005      	beq.n	8008c20 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	699b      	ldr	r3, [r3, #24]
 8008c18:	f043 0208 	orr.w	r2, r3, #8
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008c20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c22:	2b01      	cmp	r3, #1
 8008c24:	d107      	bne.n	8008c36 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	699b      	ldr	r3, [r3, #24]
 8008c2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c2e:	f043 0304 	orr.w	r3, r3, #4
 8008c32:	687a      	ldr	r2, [r7, #4]
 8008c34:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008c36:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3718      	adds	r7, #24
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008c42:	b004      	add	sp, #16
 8008c44:	4770      	bx	lr
 8008c46:	bf00      	nop
 8008c48:	803c3800 	.word	0x803c3800

08008c4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b085      	sub	sp, #20
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
 8008c54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008c56:	2300      	movs	r3, #0
 8008c58:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	3301      	adds	r3, #1
 8008c5e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	4a13      	ldr	r2, [pc, #76]	; (8008cb0 <USB_FlushTxFifo+0x64>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d901      	bls.n	8008c6c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008c68:	2303      	movs	r3, #3
 8008c6a:	e01b      	b.n	8008ca4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	691b      	ldr	r3, [r3, #16]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	daf2      	bge.n	8008c5a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008c74:	2300      	movs	r3, #0
 8008c76:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	019b      	lsls	r3, r3, #6
 8008c7c:	f043 0220 	orr.w	r2, r3, #32
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	3301      	adds	r3, #1
 8008c88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	4a08      	ldr	r2, [pc, #32]	; (8008cb0 <USB_FlushTxFifo+0x64>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d901      	bls.n	8008c96 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008c92:	2303      	movs	r3, #3
 8008c94:	e006      	b.n	8008ca4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	691b      	ldr	r3, [r3, #16]
 8008c9a:	f003 0320 	and.w	r3, r3, #32
 8008c9e:	2b20      	cmp	r3, #32
 8008ca0:	d0f0      	beq.n	8008c84 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008ca2:	2300      	movs	r3, #0
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3714      	adds	r7, #20
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr
 8008cb0:	00030d40 	.word	0x00030d40

08008cb4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b085      	sub	sp, #20
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	4a11      	ldr	r2, [pc, #68]	; (8008d10 <USB_FlushRxFifo+0x5c>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d901      	bls.n	8008cd2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008cce:	2303      	movs	r3, #3
 8008cd0:	e018      	b.n	8008d04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	691b      	ldr	r3, [r3, #16]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	daf2      	bge.n	8008cc0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2210      	movs	r2, #16
 8008ce2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	4a08      	ldr	r2, [pc, #32]	; (8008d10 <USB_FlushRxFifo+0x5c>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d901      	bls.n	8008cf6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008cf2:	2303      	movs	r3, #3
 8008cf4:	e006      	b.n	8008d04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	691b      	ldr	r3, [r3, #16]
 8008cfa:	f003 0310 	and.w	r3, r3, #16
 8008cfe:	2b10      	cmp	r3, #16
 8008d00:	d0f0      	beq.n	8008ce4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008d02:	2300      	movs	r3, #0
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3714      	adds	r7, #20
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr
 8008d10:	00030d40 	.word	0x00030d40

08008d14 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b085      	sub	sp, #20
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	460b      	mov	r3, r1
 8008d1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d2a:	681a      	ldr	r2, [r3, #0]
 8008d2c:	78fb      	ldrb	r3, [r7, #3]
 8008d2e:	68f9      	ldr	r1, [r7, #12]
 8008d30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d34:	4313      	orrs	r3, r2
 8008d36:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008d38:	2300      	movs	r3, #0
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3714      	adds	r7, #20
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d44:	4770      	bx	lr

08008d46 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008d46:	b480      	push	{r7}
 8008d48:	b085      	sub	sp, #20
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	68fa      	ldr	r2, [r7, #12]
 8008d5c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008d60:	f023 0303 	bic.w	r3, r3, #3
 8008d64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	68fa      	ldr	r2, [r7, #12]
 8008d70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d74:	f043 0302 	orr.w	r3, r3, #2
 8008d78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008d7a:	2300      	movs	r3, #0
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3714      	adds	r7, #20
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr

08008d88 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b083      	sub	sp, #12
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	695b      	ldr	r3, [r3, #20]
 8008d94:	f003 0301 	and.w	r3, r3, #1
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	370c      	adds	r7, #12
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b085      	sub	sp, #20
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008dac:	2300      	movs	r3, #0
 8008dae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	3301      	adds	r3, #1
 8008db4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	4a13      	ldr	r2, [pc, #76]	; (8008e08 <USB_CoreReset+0x64>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d901      	bls.n	8008dc2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008dbe:	2303      	movs	r3, #3
 8008dc0:	e01b      	b.n	8008dfa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	691b      	ldr	r3, [r3, #16]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	daf2      	bge.n	8008db0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	691b      	ldr	r3, [r3, #16]
 8008dd2:	f043 0201 	orr.w	r2, r3, #1
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	3301      	adds	r3, #1
 8008dde:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	4a09      	ldr	r2, [pc, #36]	; (8008e08 <USB_CoreReset+0x64>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d901      	bls.n	8008dec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008de8:	2303      	movs	r3, #3
 8008dea:	e006      	b.n	8008dfa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	691b      	ldr	r3, [r3, #16]
 8008df0:	f003 0301 	and.w	r3, r3, #1
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d0f0      	beq.n	8008dda <USB_CoreReset+0x36>

  return HAL_OK;
 8008df8:	2300      	movs	r3, #0
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3714      	adds	r7, #20
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr
 8008e06:	bf00      	nop
 8008e08:	00030d40 	.word	0x00030d40

08008e0c <memset>:
 8008e0c:	4402      	add	r2, r0
 8008e0e:	4603      	mov	r3, r0
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d100      	bne.n	8008e16 <memset+0xa>
 8008e14:	4770      	bx	lr
 8008e16:	f803 1b01 	strb.w	r1, [r3], #1
 8008e1a:	e7f9      	b.n	8008e10 <memset+0x4>

08008e1c <__libc_init_array>:
 8008e1c:	b570      	push	{r4, r5, r6, lr}
 8008e1e:	4d0d      	ldr	r5, [pc, #52]	; (8008e54 <__libc_init_array+0x38>)
 8008e20:	4c0d      	ldr	r4, [pc, #52]	; (8008e58 <__libc_init_array+0x3c>)
 8008e22:	1b64      	subs	r4, r4, r5
 8008e24:	10a4      	asrs	r4, r4, #2
 8008e26:	2600      	movs	r6, #0
 8008e28:	42a6      	cmp	r6, r4
 8008e2a:	d109      	bne.n	8008e40 <__libc_init_array+0x24>
 8008e2c:	4d0b      	ldr	r5, [pc, #44]	; (8008e5c <__libc_init_array+0x40>)
 8008e2e:	4c0c      	ldr	r4, [pc, #48]	; (8008e60 <__libc_init_array+0x44>)
 8008e30:	f000 f818 	bl	8008e64 <_init>
 8008e34:	1b64      	subs	r4, r4, r5
 8008e36:	10a4      	asrs	r4, r4, #2
 8008e38:	2600      	movs	r6, #0
 8008e3a:	42a6      	cmp	r6, r4
 8008e3c:	d105      	bne.n	8008e4a <__libc_init_array+0x2e>
 8008e3e:	bd70      	pop	{r4, r5, r6, pc}
 8008e40:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e44:	4798      	blx	r3
 8008e46:	3601      	adds	r6, #1
 8008e48:	e7ee      	b.n	8008e28 <__libc_init_array+0xc>
 8008e4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e4e:	4798      	blx	r3
 8008e50:	3601      	adds	r6, #1
 8008e52:	e7f2      	b.n	8008e3a <__libc_init_array+0x1e>
 8008e54:	08008ef4 	.word	0x08008ef4
 8008e58:	08008ef4 	.word	0x08008ef4
 8008e5c:	08008ef4 	.word	0x08008ef4
 8008e60:	08008ef8 	.word	0x08008ef8

08008e64 <_init>:
 8008e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e66:	bf00      	nop
 8008e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e6a:	bc08      	pop	{r3}
 8008e6c:	469e      	mov	lr, r3
 8008e6e:	4770      	bx	lr

08008e70 <_fini>:
 8008e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e72:	bf00      	nop
 8008e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e76:	bc08      	pop	{r3}
 8008e78:	469e      	mov	lr, r3
 8008e7a:	4770      	bx	lr
