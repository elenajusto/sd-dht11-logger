
sd-dht11-logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bc0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08009d80  08009d80  00019d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e4c  08009e4c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08009e4c  08009e4c  00019e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e54  08009e54  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e54  08009e54  00019e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e58  08009e58  00019e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08009e5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a48  2000005c  08009eb8  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000aa4  08009eb8  00020aa4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021f29  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003dd3  00000000  00000000  00041ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e48  00000000  00000000  00045dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000017c8  00000000  00000000  00047c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000350ab  00000000  00000000  000493e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025d3b  00000000  00000000  0007e48b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0013bb92  00000000  00000000  000a41c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000895c  00000000  00000000  001dfd58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  001e86b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000005c 	.word	0x2000005c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08009d68 	.word	0x08009d68

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000060 	.word	0x20000060
 80001fc:	08009d68 	.word	0x08009d68

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_uldivmod>:
 8000628:	b953      	cbnz	r3, 8000640 <__aeabi_uldivmod+0x18>
 800062a:	b94a      	cbnz	r2, 8000640 <__aeabi_uldivmod+0x18>
 800062c:	2900      	cmp	r1, #0
 800062e:	bf08      	it	eq
 8000630:	2800      	cmpeq	r0, #0
 8000632:	bf1c      	itt	ne
 8000634:	f04f 31ff 	movne.w	r1, #4294967295
 8000638:	f04f 30ff 	movne.w	r0, #4294967295
 800063c:	f000 b970 	b.w	8000920 <__aeabi_idiv0>
 8000640:	f1ad 0c08 	sub.w	ip, sp, #8
 8000644:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000648:	f000 f806 	bl	8000658 <__udivmoddi4>
 800064c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000650:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000654:	b004      	add	sp, #16
 8000656:	4770      	bx	lr

08000658 <__udivmoddi4>:
 8000658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800065c:	9e08      	ldr	r6, [sp, #32]
 800065e:	460d      	mov	r5, r1
 8000660:	4604      	mov	r4, r0
 8000662:	460f      	mov	r7, r1
 8000664:	2b00      	cmp	r3, #0
 8000666:	d14a      	bne.n	80006fe <__udivmoddi4+0xa6>
 8000668:	428a      	cmp	r2, r1
 800066a:	4694      	mov	ip, r2
 800066c:	d965      	bls.n	800073a <__udivmoddi4+0xe2>
 800066e:	fab2 f382 	clz	r3, r2
 8000672:	b143      	cbz	r3, 8000686 <__udivmoddi4+0x2e>
 8000674:	fa02 fc03 	lsl.w	ip, r2, r3
 8000678:	f1c3 0220 	rsb	r2, r3, #32
 800067c:	409f      	lsls	r7, r3
 800067e:	fa20 f202 	lsr.w	r2, r0, r2
 8000682:	4317      	orrs	r7, r2
 8000684:	409c      	lsls	r4, r3
 8000686:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800068a:	fa1f f58c 	uxth.w	r5, ip
 800068e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000692:	0c22      	lsrs	r2, r4, #16
 8000694:	fb0e 7711 	mls	r7, lr, r1, r7
 8000698:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800069c:	fb01 f005 	mul.w	r0, r1, r5
 80006a0:	4290      	cmp	r0, r2
 80006a2:	d90a      	bls.n	80006ba <__udivmoddi4+0x62>
 80006a4:	eb1c 0202 	adds.w	r2, ip, r2
 80006a8:	f101 37ff 	add.w	r7, r1, #4294967295
 80006ac:	f080 811c 	bcs.w	80008e8 <__udivmoddi4+0x290>
 80006b0:	4290      	cmp	r0, r2
 80006b2:	f240 8119 	bls.w	80008e8 <__udivmoddi4+0x290>
 80006b6:	3902      	subs	r1, #2
 80006b8:	4462      	add	r2, ip
 80006ba:	1a12      	subs	r2, r2, r0
 80006bc:	b2a4      	uxth	r4, r4
 80006be:	fbb2 f0fe 	udiv	r0, r2, lr
 80006c2:	fb0e 2210 	mls	r2, lr, r0, r2
 80006c6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80006ca:	fb00 f505 	mul.w	r5, r0, r5
 80006ce:	42a5      	cmp	r5, r4
 80006d0:	d90a      	bls.n	80006e8 <__udivmoddi4+0x90>
 80006d2:	eb1c 0404 	adds.w	r4, ip, r4
 80006d6:	f100 32ff 	add.w	r2, r0, #4294967295
 80006da:	f080 8107 	bcs.w	80008ec <__udivmoddi4+0x294>
 80006de:	42a5      	cmp	r5, r4
 80006e0:	f240 8104 	bls.w	80008ec <__udivmoddi4+0x294>
 80006e4:	4464      	add	r4, ip
 80006e6:	3802      	subs	r0, #2
 80006e8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80006ec:	1b64      	subs	r4, r4, r5
 80006ee:	2100      	movs	r1, #0
 80006f0:	b11e      	cbz	r6, 80006fa <__udivmoddi4+0xa2>
 80006f2:	40dc      	lsrs	r4, r3
 80006f4:	2300      	movs	r3, #0
 80006f6:	e9c6 4300 	strd	r4, r3, [r6]
 80006fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006fe:	428b      	cmp	r3, r1
 8000700:	d908      	bls.n	8000714 <__udivmoddi4+0xbc>
 8000702:	2e00      	cmp	r6, #0
 8000704:	f000 80ed 	beq.w	80008e2 <__udivmoddi4+0x28a>
 8000708:	2100      	movs	r1, #0
 800070a:	e9c6 0500 	strd	r0, r5, [r6]
 800070e:	4608      	mov	r0, r1
 8000710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000714:	fab3 f183 	clz	r1, r3
 8000718:	2900      	cmp	r1, #0
 800071a:	d149      	bne.n	80007b0 <__udivmoddi4+0x158>
 800071c:	42ab      	cmp	r3, r5
 800071e:	d302      	bcc.n	8000726 <__udivmoddi4+0xce>
 8000720:	4282      	cmp	r2, r0
 8000722:	f200 80f8 	bhi.w	8000916 <__udivmoddi4+0x2be>
 8000726:	1a84      	subs	r4, r0, r2
 8000728:	eb65 0203 	sbc.w	r2, r5, r3
 800072c:	2001      	movs	r0, #1
 800072e:	4617      	mov	r7, r2
 8000730:	2e00      	cmp	r6, #0
 8000732:	d0e2      	beq.n	80006fa <__udivmoddi4+0xa2>
 8000734:	e9c6 4700 	strd	r4, r7, [r6]
 8000738:	e7df      	b.n	80006fa <__udivmoddi4+0xa2>
 800073a:	b902      	cbnz	r2, 800073e <__udivmoddi4+0xe6>
 800073c:	deff      	udf	#255	; 0xff
 800073e:	fab2 f382 	clz	r3, r2
 8000742:	2b00      	cmp	r3, #0
 8000744:	f040 8090 	bne.w	8000868 <__udivmoddi4+0x210>
 8000748:	1a8a      	subs	r2, r1, r2
 800074a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800074e:	fa1f fe8c 	uxth.w	lr, ip
 8000752:	2101      	movs	r1, #1
 8000754:	fbb2 f5f7 	udiv	r5, r2, r7
 8000758:	fb07 2015 	mls	r0, r7, r5, r2
 800075c:	0c22      	lsrs	r2, r4, #16
 800075e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000762:	fb0e f005 	mul.w	r0, lr, r5
 8000766:	4290      	cmp	r0, r2
 8000768:	d908      	bls.n	800077c <__udivmoddi4+0x124>
 800076a:	eb1c 0202 	adds.w	r2, ip, r2
 800076e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000772:	d202      	bcs.n	800077a <__udivmoddi4+0x122>
 8000774:	4290      	cmp	r0, r2
 8000776:	f200 80cb 	bhi.w	8000910 <__udivmoddi4+0x2b8>
 800077a:	4645      	mov	r5, r8
 800077c:	1a12      	subs	r2, r2, r0
 800077e:	b2a4      	uxth	r4, r4
 8000780:	fbb2 f0f7 	udiv	r0, r2, r7
 8000784:	fb07 2210 	mls	r2, r7, r0, r2
 8000788:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800078c:	fb0e fe00 	mul.w	lr, lr, r0
 8000790:	45a6      	cmp	lr, r4
 8000792:	d908      	bls.n	80007a6 <__udivmoddi4+0x14e>
 8000794:	eb1c 0404 	adds.w	r4, ip, r4
 8000798:	f100 32ff 	add.w	r2, r0, #4294967295
 800079c:	d202      	bcs.n	80007a4 <__udivmoddi4+0x14c>
 800079e:	45a6      	cmp	lr, r4
 80007a0:	f200 80bb 	bhi.w	800091a <__udivmoddi4+0x2c2>
 80007a4:	4610      	mov	r0, r2
 80007a6:	eba4 040e 	sub.w	r4, r4, lr
 80007aa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80007ae:	e79f      	b.n	80006f0 <__udivmoddi4+0x98>
 80007b0:	f1c1 0720 	rsb	r7, r1, #32
 80007b4:	408b      	lsls	r3, r1
 80007b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80007ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80007be:	fa05 f401 	lsl.w	r4, r5, r1
 80007c2:	fa20 f307 	lsr.w	r3, r0, r7
 80007c6:	40fd      	lsrs	r5, r7
 80007c8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007cc:	4323      	orrs	r3, r4
 80007ce:	fbb5 f8f9 	udiv	r8, r5, r9
 80007d2:	fa1f fe8c 	uxth.w	lr, ip
 80007d6:	fb09 5518 	mls	r5, r9, r8, r5
 80007da:	0c1c      	lsrs	r4, r3, #16
 80007dc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80007e0:	fb08 f50e 	mul.w	r5, r8, lr
 80007e4:	42a5      	cmp	r5, r4
 80007e6:	fa02 f201 	lsl.w	r2, r2, r1
 80007ea:	fa00 f001 	lsl.w	r0, r0, r1
 80007ee:	d90b      	bls.n	8000808 <__udivmoddi4+0x1b0>
 80007f0:	eb1c 0404 	adds.w	r4, ip, r4
 80007f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80007f8:	f080 8088 	bcs.w	800090c <__udivmoddi4+0x2b4>
 80007fc:	42a5      	cmp	r5, r4
 80007fe:	f240 8085 	bls.w	800090c <__udivmoddi4+0x2b4>
 8000802:	f1a8 0802 	sub.w	r8, r8, #2
 8000806:	4464      	add	r4, ip
 8000808:	1b64      	subs	r4, r4, r5
 800080a:	b29d      	uxth	r5, r3
 800080c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000810:	fb09 4413 	mls	r4, r9, r3, r4
 8000814:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000818:	fb03 fe0e 	mul.w	lr, r3, lr
 800081c:	45a6      	cmp	lr, r4
 800081e:	d908      	bls.n	8000832 <__udivmoddi4+0x1da>
 8000820:	eb1c 0404 	adds.w	r4, ip, r4
 8000824:	f103 35ff 	add.w	r5, r3, #4294967295
 8000828:	d26c      	bcs.n	8000904 <__udivmoddi4+0x2ac>
 800082a:	45a6      	cmp	lr, r4
 800082c:	d96a      	bls.n	8000904 <__udivmoddi4+0x2ac>
 800082e:	3b02      	subs	r3, #2
 8000830:	4464      	add	r4, ip
 8000832:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000836:	fba3 9502 	umull	r9, r5, r3, r2
 800083a:	eba4 040e 	sub.w	r4, r4, lr
 800083e:	42ac      	cmp	r4, r5
 8000840:	46c8      	mov	r8, r9
 8000842:	46ae      	mov	lr, r5
 8000844:	d356      	bcc.n	80008f4 <__udivmoddi4+0x29c>
 8000846:	d053      	beq.n	80008f0 <__udivmoddi4+0x298>
 8000848:	b156      	cbz	r6, 8000860 <__udivmoddi4+0x208>
 800084a:	ebb0 0208 	subs.w	r2, r0, r8
 800084e:	eb64 040e 	sbc.w	r4, r4, lr
 8000852:	fa04 f707 	lsl.w	r7, r4, r7
 8000856:	40ca      	lsrs	r2, r1
 8000858:	40cc      	lsrs	r4, r1
 800085a:	4317      	orrs	r7, r2
 800085c:	e9c6 7400 	strd	r7, r4, [r6]
 8000860:	4618      	mov	r0, r3
 8000862:	2100      	movs	r1, #0
 8000864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000868:	f1c3 0120 	rsb	r1, r3, #32
 800086c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000870:	fa20 f201 	lsr.w	r2, r0, r1
 8000874:	fa25 f101 	lsr.w	r1, r5, r1
 8000878:	409d      	lsls	r5, r3
 800087a:	432a      	orrs	r2, r5
 800087c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000880:	fa1f fe8c 	uxth.w	lr, ip
 8000884:	fbb1 f0f7 	udiv	r0, r1, r7
 8000888:	fb07 1510 	mls	r5, r7, r0, r1
 800088c:	0c11      	lsrs	r1, r2, #16
 800088e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000892:	fb00 f50e 	mul.w	r5, r0, lr
 8000896:	428d      	cmp	r5, r1
 8000898:	fa04 f403 	lsl.w	r4, r4, r3
 800089c:	d908      	bls.n	80008b0 <__udivmoddi4+0x258>
 800089e:	eb1c 0101 	adds.w	r1, ip, r1
 80008a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80008a6:	d22f      	bcs.n	8000908 <__udivmoddi4+0x2b0>
 80008a8:	428d      	cmp	r5, r1
 80008aa:	d92d      	bls.n	8000908 <__udivmoddi4+0x2b0>
 80008ac:	3802      	subs	r0, #2
 80008ae:	4461      	add	r1, ip
 80008b0:	1b49      	subs	r1, r1, r5
 80008b2:	b292      	uxth	r2, r2
 80008b4:	fbb1 f5f7 	udiv	r5, r1, r7
 80008b8:	fb07 1115 	mls	r1, r7, r5, r1
 80008bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008c0:	fb05 f10e 	mul.w	r1, r5, lr
 80008c4:	4291      	cmp	r1, r2
 80008c6:	d908      	bls.n	80008da <__udivmoddi4+0x282>
 80008c8:	eb1c 0202 	adds.w	r2, ip, r2
 80008cc:	f105 38ff 	add.w	r8, r5, #4294967295
 80008d0:	d216      	bcs.n	8000900 <__udivmoddi4+0x2a8>
 80008d2:	4291      	cmp	r1, r2
 80008d4:	d914      	bls.n	8000900 <__udivmoddi4+0x2a8>
 80008d6:	3d02      	subs	r5, #2
 80008d8:	4462      	add	r2, ip
 80008da:	1a52      	subs	r2, r2, r1
 80008dc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80008e0:	e738      	b.n	8000754 <__udivmoddi4+0xfc>
 80008e2:	4631      	mov	r1, r6
 80008e4:	4630      	mov	r0, r6
 80008e6:	e708      	b.n	80006fa <__udivmoddi4+0xa2>
 80008e8:	4639      	mov	r1, r7
 80008ea:	e6e6      	b.n	80006ba <__udivmoddi4+0x62>
 80008ec:	4610      	mov	r0, r2
 80008ee:	e6fb      	b.n	80006e8 <__udivmoddi4+0x90>
 80008f0:	4548      	cmp	r0, r9
 80008f2:	d2a9      	bcs.n	8000848 <__udivmoddi4+0x1f0>
 80008f4:	ebb9 0802 	subs.w	r8, r9, r2
 80008f8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80008fc:	3b01      	subs	r3, #1
 80008fe:	e7a3      	b.n	8000848 <__udivmoddi4+0x1f0>
 8000900:	4645      	mov	r5, r8
 8000902:	e7ea      	b.n	80008da <__udivmoddi4+0x282>
 8000904:	462b      	mov	r3, r5
 8000906:	e794      	b.n	8000832 <__udivmoddi4+0x1da>
 8000908:	4640      	mov	r0, r8
 800090a:	e7d1      	b.n	80008b0 <__udivmoddi4+0x258>
 800090c:	46d0      	mov	r8, sl
 800090e:	e77b      	b.n	8000808 <__udivmoddi4+0x1b0>
 8000910:	3d02      	subs	r5, #2
 8000912:	4462      	add	r2, ip
 8000914:	e732      	b.n	800077c <__udivmoddi4+0x124>
 8000916:	4608      	mov	r0, r1
 8000918:	e70a      	b.n	8000730 <__udivmoddi4+0xd8>
 800091a:	4464      	add	r4, ip
 800091c:	3802      	subs	r0, #2
 800091e:	e742      	b.n	80007a6 <__udivmoddi4+0x14e>

08000920 <__aeabi_idiv0>:
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop

08000924 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000928:	f001 fb4b 	bl	8001fc2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800092c:	f000 f89e 	bl	8000a6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000930:	f000 fb7c 	bl	800102c <MX_GPIO_Init>
  MX_FMC_Init();
 8000934:	f000 fb14 	bl	8000f60 <MX_FMC_Init>
  MX_I2C1_Init();
 8000938:	f000 f8ec 	bl	8000b14 <MX_I2C1_Init>
  MX_SAI1_Init();
 800093c:	f000 f92a 	bl	8000b94 <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 8000940:	f000 f990 	bl	8000c64 <MX_SDMMC1_SD_Init>
  MX_SPI2_Init();
 8000944:	f000 f9b4 	bl	8000cb0 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000948:	f000 fa44 	bl	8000dd4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800094c:	f000 fa8e 	bl	8000e6c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000950:	f000 fad8 	bl	8000f04 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 8000954:	f000 f9ea 	bl	8000d2c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);			// Start TIM1 for microsecond delay function
 8000958:	4835      	ldr	r0, [pc, #212]	; (8000a30 <main+0x10c>)
 800095a:	f006 fa95 	bl	8006e88 <HAL_TIM_Base_Start>

  sprintf(msg, "Program is running");
 800095e:	4935      	ldr	r1, [pc, #212]	; (8000a34 <main+0x110>)
 8000960:	4835      	ldr	r0, [pc, #212]	; (8000a38 <main+0x114>)
 8000962:	f008 fd5d 	bl	8009420 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000966:	4834      	ldr	r0, [pc, #208]	; (8000a38 <main+0x114>)
 8000968:	f7ff fc4a 	bl	8000200 <strlen>
 800096c:	4603      	mov	r3, r0
 800096e:	b29a      	uxth	r2, r3
 8000970:	f04f 33ff 	mov.w	r3, #4294967295
 8000974:	4930      	ldr	r1, [pc, #192]	; (8000a38 <main+0x114>)
 8000976:	4831      	ldr	r0, [pc, #196]	; (8000a3c <main+0x118>)
 8000978:	f006 fdc4 	bl	8007504 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  dht11Start();
 800097c:	f000 fdde 	bl	800153c <dht11Start>
	  Presence = dht11CheckResponse();
 8000980:	f000 fe00 	bl	8001584 <dht11CheckResponse>
 8000984:	4603      	mov	r3, r0
 8000986:	461a      	mov	r2, r3
 8000988:	4b2d      	ldr	r3, [pc, #180]	; (8000a40 <main+0x11c>)
 800098a:	701a      	strb	r2, [r3, #0]
	  Rh_byte1 = dht11Read();
 800098c:	f000 fe2a 	bl	80015e4 <dht11Read>
 8000990:	4603      	mov	r3, r0
 8000992:	461a      	mov	r2, r3
 8000994:	4b2b      	ldr	r3, [pc, #172]	; (8000a44 <main+0x120>)
 8000996:	701a      	strb	r2, [r3, #0]
	  Rh_byte2 = dht11Read();
 8000998:	f000 fe24 	bl	80015e4 <dht11Read>
 800099c:	4603      	mov	r3, r0
 800099e:	461a      	mov	r2, r3
 80009a0:	4b29      	ldr	r3, [pc, #164]	; (8000a48 <main+0x124>)
 80009a2:	701a      	strb	r2, [r3, #0]
	  Temp_byte1 = dht11Read();
 80009a4:	f000 fe1e 	bl	80015e4 <dht11Read>
 80009a8:	4603      	mov	r3, r0
 80009aa:	461a      	mov	r2, r3
 80009ac:	4b27      	ldr	r3, [pc, #156]	; (8000a4c <main+0x128>)
 80009ae:	701a      	strb	r2, [r3, #0]
	  Temp_byte2 = dht11Read();
 80009b0:	f000 fe18 	bl	80015e4 <dht11Read>
 80009b4:	4603      	mov	r3, r0
 80009b6:	461a      	mov	r2, r3
 80009b8:	4b25      	ldr	r3, [pc, #148]	; (8000a50 <main+0x12c>)
 80009ba:	701a      	strb	r2, [r3, #0]
	  SUM = dht11Read();
 80009bc:	f000 fe12 	bl	80015e4 <dht11Read>
 80009c0:	4603      	mov	r3, r0
 80009c2:	b29a      	uxth	r2, r3
 80009c4:	4b23      	ldr	r3, [pc, #140]	; (8000a54 <main+0x130>)
 80009c6:	801a      	strh	r2, [r3, #0]

	  TEMP = Temp_byte1;
 80009c8:	4b20      	ldr	r3, [pc, #128]	; (8000a4c <main+0x128>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	b29a      	uxth	r2, r3
 80009ce:	4b22      	ldr	r3, [pc, #136]	; (8000a58 <main+0x134>)
 80009d0:	801a      	strh	r2, [r3, #0]
	  RH = Rh_byte1;
 80009d2:	4b1c      	ldr	r3, [pc, #112]	; (8000a44 <main+0x120>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	b29a      	uxth	r2, r3
 80009d8:	4b20      	ldr	r3, [pc, #128]	; (8000a5c <main+0x138>)
 80009da:	801a      	strh	r2, [r3, #0]

	  Temperature = (float) TEMP;
 80009dc:	4b1e      	ldr	r3, [pc, #120]	; (8000a58 <main+0x134>)
 80009de:	881b      	ldrh	r3, [r3, #0]
 80009e0:	ee07 3a90 	vmov	s15, r3
 80009e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009e8:	4b1d      	ldr	r3, [pc, #116]	; (8000a60 <main+0x13c>)
 80009ea:	edc3 7a00 	vstr	s15, [r3]
	  Humidity = (float) RH;
 80009ee:	4b1b      	ldr	r3, [pc, #108]	; (8000a5c <main+0x138>)
 80009f0:	881b      	ldrh	r3, [r3, #0]
 80009f2:	ee07 3a90 	vmov	s15, r3
 80009f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009fa:	4b1a      	ldr	r3, [pc, #104]	; (8000a64 <main+0x140>)
 80009fc:	edc3 7a00 	vstr	s15, [r3]

	  sprintf(msg, "Temperature: %d\r\n", Temperature);
 8000a00:	4b17      	ldr	r3, [pc, #92]	; (8000a60 <main+0x13c>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff fdb7 	bl	8000578 <__aeabi_f2d>
 8000a0a:	4602      	mov	r2, r0
 8000a0c:	460b      	mov	r3, r1
 8000a0e:	4916      	ldr	r1, [pc, #88]	; (8000a68 <main+0x144>)
 8000a10:	4809      	ldr	r0, [pc, #36]	; (8000a38 <main+0x114>)
 8000a12:	f008 fd05 	bl	8009420 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000a16:	4808      	ldr	r0, [pc, #32]	; (8000a38 <main+0x114>)
 8000a18:	f7ff fbf2 	bl	8000200 <strlen>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	b29a      	uxth	r2, r3
 8000a20:	f04f 33ff 	mov.w	r3, #4294967295
 8000a24:	4904      	ldr	r1, [pc, #16]	; (8000a38 <main+0x114>)
 8000a26:	4805      	ldr	r0, [pc, #20]	; (8000a3c <main+0x118>)
 8000a28:	f006 fd6c 	bl	8007504 <HAL_UART_Transmit>
	  dht11Start();
 8000a2c:	e7a6      	b.n	800097c <main+0x58>
 8000a2e:	bf00      	nop
 8000a30:	20000244 	.word	0x20000244
 8000a34:	08009d80 	.word	0x08009d80
 8000a38:	2000092c 	.word	0x2000092c
 8000a3c:	20000290 	.word	0x20000290
 8000a40:	20000928 	.word	0x20000928
 8000a44:	20000914 	.word	0x20000914
 8000a48:	20000915 	.word	0x20000915
 8000a4c:	20000916 	.word	0x20000916
 8000a50:	20000917 	.word	0x20000917
 8000a54:	20000918 	.word	0x20000918
 8000a58:	2000091c 	.word	0x2000091c
 8000a5c:	2000091a 	.word	0x2000091a
 8000a60:	20000920 	.word	0x20000920
 8000a64:	20000924 	.word	0x20000924
 8000a68:	08009d94 	.word	0x08009d94

08000a6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b096      	sub	sp, #88	; 0x58
 8000a70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	2244      	movs	r2, #68	; 0x44
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f008 fcf0 	bl	8009460 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a80:	463b      	mov	r3, r7
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
 8000a8c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f002 f872 	bl	8002b78 <HAL_PWREx_ControlVoltageScaling>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000a9a:	f000 fded 	bl	8001678 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI;
 8000a9e:	2330      	movs	r3, #48	; 0x30
 8000aa0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000aae:	2360      	movs	r3, #96	; 0x60
 8000ab0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000aba:	2301      	movs	r3, #1
 8000abc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000abe:	233c      	movs	r3, #60	; 0x3c
 8000ac0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 8000ac2:	2305      	movs	r3, #5
 8000ac4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000aca:	2302      	movs	r3, #2
 8000acc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ace:	f107 0314 	add.w	r3, r7, #20
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f002 f914 	bl	8002d00 <HAL_RCC_OscConfig>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000ade:	f000 fdcb 	bl	8001678 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae2:	230f      	movs	r3, #15
 8000ae4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aea:	2300      	movs	r3, #0
 8000aec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aee:	2300      	movs	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000af2:	2300      	movs	r3, #0
 8000af4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000af6:	463b      	mov	r3, r7
 8000af8:	2105      	movs	r1, #5
 8000afa:	4618      	mov	r0, r3
 8000afc:	f002 fd1a 	bl	8003534 <HAL_RCC_ClockConfig>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000b06:	f000 fdb7 	bl	8001678 <Error_Handler>
  }
}
 8000b0a:	bf00      	nop
 8000b0c:	3758      	adds	r7, #88	; 0x58
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
	...

08000b14 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b18:	4b1b      	ldr	r3, [pc, #108]	; (8000b88 <MX_I2C1_Init+0x74>)
 8000b1a:	4a1c      	ldr	r2, [pc, #112]	; (8000b8c <MX_I2C1_Init+0x78>)
 8000b1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000b1e:	4b1a      	ldr	r3, [pc, #104]	; (8000b88 <MX_I2C1_Init+0x74>)
 8000b20:	4a1b      	ldr	r2, [pc, #108]	; (8000b90 <MX_I2C1_Init+0x7c>)
 8000b22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b24:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <MX_I2C1_Init+0x74>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b2a:	4b17      	ldr	r3, [pc, #92]	; (8000b88 <MX_I2C1_Init+0x74>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b30:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <MX_I2C1_Init+0x74>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b36:	4b14      	ldr	r3, [pc, #80]	; (8000b88 <MX_I2C1_Init+0x74>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b3c:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <MX_I2C1_Init+0x74>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b42:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <MX_I2C1_Init+0x74>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b48:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <MX_I2C1_Init+0x74>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b4e:	480e      	ldr	r0, [pc, #56]	; (8000b88 <MX_I2C1_Init+0x74>)
 8000b50:	f001 fd78 	bl	8002644 <HAL_I2C_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b5a:	f000 fd8d 	bl	8001678 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b5e:	2100      	movs	r1, #0
 8000b60:	4809      	ldr	r0, [pc, #36]	; (8000b88 <MX_I2C1_Init+0x74>)
 8000b62:	f001 fe0a 	bl	800277a <HAL_I2CEx_ConfigAnalogFilter>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b6c:	f000 fd84 	bl	8001678 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b70:	2100      	movs	r1, #0
 8000b72:	4805      	ldr	r0, [pc, #20]	; (8000b88 <MX_I2C1_Init+0x74>)
 8000b74:	f001 fe4c 	bl	8002810 <HAL_I2CEx_ConfigDigitalFilter>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b7e:	f000 fd7b 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000078 	.word	0x20000078
 8000b8c:	40005400 	.word	0x40005400
 8000b90:	307075b1 	.word	0x307075b1

08000b94 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000b98:	4b2f      	ldr	r3, [pc, #188]	; (8000c58 <MX_SAI1_Init+0xc4>)
 8000b9a:	4a30      	ldr	r2, [pc, #192]	; (8000c5c <MX_SAI1_Init+0xc8>)
 8000b9c:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000b9e:	4b2e      	ldr	r3, [pc, #184]	; (8000c58 <MX_SAI1_Init+0xc4>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000ba4:	4b2c      	ldr	r3, [pc, #176]	; (8000c58 <MX_SAI1_Init+0xc4>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8000baa:	4b2b      	ldr	r3, [pc, #172]	; (8000c58 <MX_SAI1_Init+0xc4>)
 8000bac:	2240      	movs	r2, #64	; 0x40
 8000bae:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000bb0:	4b29      	ldr	r3, [pc, #164]	; (8000c58 <MX_SAI1_Init+0xc4>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000bb6:	4b28      	ldr	r3, [pc, #160]	; (8000c58 <MX_SAI1_Init+0xc4>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000bbc:	4b26      	ldr	r3, [pc, #152]	; (8000c58 <MX_SAI1_Init+0xc4>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000bc2:	4b25      	ldr	r3, [pc, #148]	; (8000c58 <MX_SAI1_Init+0xc4>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000bc8:	4b23      	ldr	r3, [pc, #140]	; (8000c58 <MX_SAI1_Init+0xc4>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8000bce:	4b22      	ldr	r3, [pc, #136]	; (8000c58 <MX_SAI1_Init+0xc4>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000bd4:	4b20      	ldr	r3, [pc, #128]	; (8000c58 <MX_SAI1_Init+0xc4>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000bda:	4b1f      	ldr	r3, [pc, #124]	; (8000c58 <MX_SAI1_Init+0xc4>)
 8000bdc:	4a20      	ldr	r2, [pc, #128]	; (8000c60 <MX_SAI1_Init+0xcc>)
 8000bde:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000be0:	4b1d      	ldr	r3, [pc, #116]	; (8000c58 <MX_SAI1_Init+0xc4>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000be6:	4b1c      	ldr	r3, [pc, #112]	; (8000c58 <MX_SAI1_Init+0xc4>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000bec:	4b1a      	ldr	r3, [pc, #104]	; (8000c58 <MX_SAI1_Init+0xc4>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000bf2:	4b19      	ldr	r3, [pc, #100]	; (8000c58 <MX_SAI1_Init+0xc4>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 8000bf8:	4b17      	ldr	r3, [pc, #92]	; (8000c58 <MX_SAI1_Init+0xc4>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 0;
 8000c00:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <MX_SAI1_Init+0xc4>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000c06:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <MX_SAI1_Init+0xc4>)
 8000c08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c0c:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8000c0e:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <MX_SAI1_Init+0xc4>)
 8000c10:	2208      	movs	r2, #8
 8000c12:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000c14:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <MX_SAI1_Init+0xc4>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000c1a:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <MX_SAI1_Init+0xc4>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000c20:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <MX_SAI1_Init+0xc4>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000c26:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <MX_SAI1_Init+0xc4>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000c2c:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <MX_SAI1_Init+0xc4>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <MX_SAI1_Init+0xc4>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8000c38:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <MX_SAI1_Init+0xc4>)
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <MX_SAI1_Init+0xc4>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000c44:	4804      	ldr	r0, [pc, #16]	; (8000c58 <MX_SAI1_Init+0xc4>)
 8000c46:	f004 fcd9 	bl	80055fc <HAL_SAI_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 8000c50:	f000 fd12 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	200000cc 	.word	0x200000cc
 8000c5c:	40015404 	.word	0x40015404
 8000c60:	0002ee00 	.word	0x0002ee00

08000c64 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000c68:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <MX_SDMMC1_SD_Init+0x44>)
 8000c6a:	4a10      	ldr	r2, [pc, #64]	; (8000cac <MX_SDMMC1_SD_Init+0x48>)
 8000c6c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000c6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <MX_SDMMC1_SD_Init+0x44>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000c74:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <MX_SDMMC1_SD_Init+0x44>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000c7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <MX_SDMMC1_SD_Init+0x44>)
 8000c7c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c80:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000c82:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <MX_SDMMC1_SD_Init+0x44>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000c88:	4b07      	ldr	r3, [pc, #28]	; (8000ca8 <MX_SDMMC1_SD_Init+0x44>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 8000c8e:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <MX_SDMMC1_SD_Init+0x44>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000c94:	4804      	ldr	r0, [pc, #16]	; (8000ca8 <MX_SDMMC1_SD_Init+0x44>)
 8000c96:	f004 fec9 	bl	8005a2c <HAL_SD_Init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_SDMMC1_SD_Init+0x40>
  {
    Error_Handler();
 8000ca0:	f000 fcea 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20000160 	.word	0x20000160
 8000cac:	50062400 	.word	0x50062400

08000cb0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000cb4:	4b1b      	ldr	r3, [pc, #108]	; (8000d24 <MX_SPI2_Init+0x74>)
 8000cb6:	4a1c      	ldr	r2, [pc, #112]	; (8000d28 <MX_SPI2_Init+0x78>)
 8000cb8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000cba:	4b1a      	ldr	r3, [pc, #104]	; (8000d24 <MX_SPI2_Init+0x74>)
 8000cbc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cc0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000cc2:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <MX_SPI2_Init+0x74>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000cc8:	4b16      	ldr	r3, [pc, #88]	; (8000d24 <MX_SPI2_Init+0x74>)
 8000cca:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000cce:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cd0:	4b14      	ldr	r3, [pc, #80]	; (8000d24 <MX_SPI2_Init+0x74>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cd6:	4b13      	ldr	r3, [pc, #76]	; (8000d24 <MX_SPI2_Init+0x74>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000cdc:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <MX_SPI2_Init+0x74>)
 8000cde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ce2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000ce4:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <MX_SPI2_Init+0x74>)
 8000ce6:	2208      	movs	r2, #8
 8000ce8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cea:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <MX_SPI2_Init+0x74>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <MX_SPI2_Init+0x74>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <MX_SPI2_Init+0x74>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000cfc:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <MX_SPI2_Init+0x74>)
 8000cfe:	2207      	movs	r2, #7
 8000d00:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d02:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <MX_SPI2_Init+0x74>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <MX_SPI2_Init+0x74>)
 8000d0a:	2208      	movs	r2, #8
 8000d0c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d0e:	4805      	ldr	r0, [pc, #20]	; (8000d24 <MX_SPI2_Init+0x74>)
 8000d10:	f005 ff77 	bl	8006c02 <HAL_SPI_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000d1a:	f000 fcad 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	200001e0 	.word	0x200001e0
 8000d28:	40003800 	.word	0x40003800

08000d2c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b088      	sub	sp, #32
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d32:	f107 0310 	add.w	r3, r7, #16
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]
 8000d3c:	609a      	str	r2, [r3, #8]
 8000d3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d40:	1d3b      	adds	r3, r7, #4
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d4a:	4b20      	ldr	r3, [pc, #128]	; (8000dcc <MX_TIM1_Init+0xa0>)
 8000d4c:	4a20      	ldr	r2, [pc, #128]	; (8000dd0 <MX_TIM1_Init+0xa4>)
 8000d4e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 120-1;
 8000d50:	4b1e      	ldr	r3, [pc, #120]	; (8000dcc <MX_TIM1_Init+0xa0>)
 8000d52:	2277      	movs	r2, #119	; 0x77
 8000d54:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d56:	4b1d      	ldr	r3, [pc, #116]	; (8000dcc <MX_TIM1_Init+0xa0>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d5c:	4b1b      	ldr	r3, [pc, #108]	; (8000dcc <MX_TIM1_Init+0xa0>)
 8000d5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d62:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d64:	4b19      	ldr	r3, [pc, #100]	; (8000dcc <MX_TIM1_Init+0xa0>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d6a:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <MX_TIM1_Init+0xa0>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d70:	4b16      	ldr	r3, [pc, #88]	; (8000dcc <MX_TIM1_Init+0xa0>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d76:	4815      	ldr	r0, [pc, #84]	; (8000dcc <MX_TIM1_Init+0xa0>)
 8000d78:	f006 f82e 	bl	8006dd8 <HAL_TIM_Base_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000d82:	f000 fc79 	bl	8001678 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d8a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d8c:	f107 0310 	add.w	r3, r7, #16
 8000d90:	4619      	mov	r1, r3
 8000d92:	480e      	ldr	r0, [pc, #56]	; (8000dcc <MX_TIM1_Init+0xa0>)
 8000d94:	f006 f8e0 	bl	8006f58 <HAL_TIM_ConfigClockSource>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000d9e:	f000 fc6b 	bl	8001678 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000da2:	2300      	movs	r3, #0
 8000da4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000da6:	2300      	movs	r3, #0
 8000da8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000daa:	2300      	movs	r3, #0
 8000dac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000dae:	1d3b      	adds	r3, r7, #4
 8000db0:	4619      	mov	r1, r3
 8000db2:	4806      	ldr	r0, [pc, #24]	; (8000dcc <MX_TIM1_Init+0xa0>)
 8000db4:	f006 face 	bl	8007354 <HAL_TIMEx_MasterConfigSynchronization>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000dbe:	f000 fc5b 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000dc2:	bf00      	nop
 8000dc4:	3720      	adds	r7, #32
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000244 	.word	0x20000244
 8000dd0:	40012c00 	.word	0x40012c00

08000dd4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dd8:	4b22      	ldr	r3, [pc, #136]	; (8000e64 <MX_USART2_UART_Init+0x90>)
 8000dda:	4a23      	ldr	r2, [pc, #140]	; (8000e68 <MX_USART2_UART_Init+0x94>)
 8000ddc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dde:	4b21      	ldr	r3, [pc, #132]	; (8000e64 <MX_USART2_UART_Init+0x90>)
 8000de0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000de4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000de6:	4b1f      	ldr	r3, [pc, #124]	; (8000e64 <MX_USART2_UART_Init+0x90>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dec:	4b1d      	ldr	r3, [pc, #116]	; (8000e64 <MX_USART2_UART_Init+0x90>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000df2:	4b1c      	ldr	r3, [pc, #112]	; (8000e64 <MX_USART2_UART_Init+0x90>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000df8:	4b1a      	ldr	r3, [pc, #104]	; (8000e64 <MX_USART2_UART_Init+0x90>)
 8000dfa:	220c      	movs	r2, #12
 8000dfc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dfe:	4b19      	ldr	r3, [pc, #100]	; (8000e64 <MX_USART2_UART_Init+0x90>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e04:	4b17      	ldr	r3, [pc, #92]	; (8000e64 <MX_USART2_UART_Init+0x90>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e0a:	4b16      	ldr	r3, [pc, #88]	; (8000e64 <MX_USART2_UART_Init+0x90>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e10:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <MX_USART2_UART_Init+0x90>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e16:	4b13      	ldr	r3, [pc, #76]	; (8000e64 <MX_USART2_UART_Init+0x90>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e1c:	4811      	ldr	r0, [pc, #68]	; (8000e64 <MX_USART2_UART_Init+0x90>)
 8000e1e:	f006 fb21 	bl	8007464 <HAL_UART_Init>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000e28:	f000 fc26 	bl	8001678 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	480d      	ldr	r0, [pc, #52]	; (8000e64 <MX_USART2_UART_Init+0x90>)
 8000e30:	f007 f946 	bl	80080c0 <HAL_UARTEx_SetTxFifoThreshold>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000e3a:	f000 fc1d 	bl	8001678 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e3e:	2100      	movs	r1, #0
 8000e40:	4808      	ldr	r0, [pc, #32]	; (8000e64 <MX_USART2_UART_Init+0x90>)
 8000e42:	f007 f97b 	bl	800813c <HAL_UARTEx_SetRxFifoThreshold>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000e4c:	f000 fc14 	bl	8001678 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000e50:	4804      	ldr	r0, [pc, #16]	; (8000e64 <MX_USART2_UART_Init+0x90>)
 8000e52:	f007 f8fc 	bl	800804e <HAL_UARTEx_DisableFifoMode>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000e5c:	f000 fc0c 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000290 	.word	0x20000290
 8000e68:	40004400 	.word	0x40004400

08000e6c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e70:	4b22      	ldr	r3, [pc, #136]	; (8000efc <MX_USART3_UART_Init+0x90>)
 8000e72:	4a23      	ldr	r2, [pc, #140]	; (8000f00 <MX_USART3_UART_Init+0x94>)
 8000e74:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e76:	4b21      	ldr	r3, [pc, #132]	; (8000efc <MX_USART3_UART_Init+0x90>)
 8000e78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e7c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e7e:	4b1f      	ldr	r3, [pc, #124]	; (8000efc <MX_USART3_UART_Init+0x90>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e84:	4b1d      	ldr	r3, [pc, #116]	; (8000efc <MX_USART3_UART_Init+0x90>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e8a:	4b1c      	ldr	r3, [pc, #112]	; (8000efc <MX_USART3_UART_Init+0x90>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e90:	4b1a      	ldr	r3, [pc, #104]	; (8000efc <MX_USART3_UART_Init+0x90>)
 8000e92:	220c      	movs	r2, #12
 8000e94:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e96:	4b19      	ldr	r3, [pc, #100]	; (8000efc <MX_USART3_UART_Init+0x90>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e9c:	4b17      	ldr	r3, [pc, #92]	; (8000efc <MX_USART3_UART_Init+0x90>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ea2:	4b16      	ldr	r3, [pc, #88]	; (8000efc <MX_USART3_UART_Init+0x90>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ea8:	4b14      	ldr	r3, [pc, #80]	; (8000efc <MX_USART3_UART_Init+0x90>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eae:	4b13      	ldr	r3, [pc, #76]	; (8000efc <MX_USART3_UART_Init+0x90>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000eb4:	4811      	ldr	r0, [pc, #68]	; (8000efc <MX_USART3_UART_Init+0x90>)
 8000eb6:	f006 fad5 	bl	8007464 <HAL_UART_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ec0:	f000 fbda 	bl	8001678 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	480d      	ldr	r0, [pc, #52]	; (8000efc <MX_USART3_UART_Init+0x90>)
 8000ec8:	f007 f8fa 	bl	80080c0 <HAL_UARTEx_SetTxFifoThreshold>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ed2:	f000 fbd1 	bl	8001678 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4808      	ldr	r0, [pc, #32]	; (8000efc <MX_USART3_UART_Init+0x90>)
 8000eda:	f007 f92f 	bl	800813c <HAL_UARTEx_SetRxFifoThreshold>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ee4:	f000 fbc8 	bl	8001678 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ee8:	4804      	ldr	r0, [pc, #16]	; (8000efc <MX_USART3_UART_Init+0x90>)
 8000eea:	f007 f8b0 	bl	800804e <HAL_UARTEx_DisableFifoMode>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ef4:	f000 fbc0 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20000324 	.word	0x20000324
 8000f00:	40004800 	.word	0x40004800

08000f04 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000f08:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f0a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f0e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f12:	2206      	movs	r2, #6
 8000f14:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000f16:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f18:	2202      	movs	r2, #2
 8000f1a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f1c:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f1e:	2202      	movs	r2, #2
 8000f20:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000f22:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000f28:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000f2e:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000f34:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000f3a:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000f46:	4805      	ldr	r0, [pc, #20]	; (8000f5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f48:	f001 fcae 	bl	80028a8 <HAL_PCD_Init>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000f52:	f000 fb91 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	200003b8 	.word	0x200003b8

08000f60 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b088      	sub	sp, #32
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000f66:	463b      	mov	r3, r7
 8000f68:	2220      	movs	r2, #32
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f008 fa77 	bl	8009460 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000f72:	4b2c      	ldr	r3, [pc, #176]	; (8001024 <MX_FMC_Init+0xc4>)
 8000f74:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000f78:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000f7a:	4b2a      	ldr	r3, [pc, #168]	; (8001024 <MX_FMC_Init+0xc4>)
 8000f7c:	4a2a      	ldr	r2, [pc, #168]	; (8001028 <MX_FMC_Init+0xc8>)
 8000f7e:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000f80:	4b28      	ldr	r3, [pc, #160]	; (8001024 <MX_FMC_Init+0xc4>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000f86:	4b27      	ldr	r3, [pc, #156]	; (8001024 <MX_FMC_Init+0xc4>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_PSRAM;
 8000f8c:	4b25      	ldr	r3, [pc, #148]	; (8001024 <MX_FMC_Init+0xc4>)
 8000f8e:	2204      	movs	r2, #4
 8000f90:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000f92:	4b24      	ldr	r3, [pc, #144]	; (8001024 <MX_FMC_Init+0xc4>)
 8000f94:	2210      	movs	r2, #16
 8000f96:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_ENABLE;
 8000f98:	4b22      	ldr	r3, [pc, #136]	; (8001024 <MX_FMC_Init+0xc4>)
 8000f9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f9e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000fa0:	4b20      	ldr	r3, [pc, #128]	; (8001024 <MX_FMC_Init+0xc4>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000fa6:	4b1f      	ldr	r3, [pc, #124]	; (8001024 <MX_FMC_Init+0xc4>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8000fac:	4b1d      	ldr	r3, [pc, #116]	; (8001024 <MX_FMC_Init+0xc4>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_ENABLE;
 8000fb2:	4b1c      	ldr	r3, [pc, #112]	; (8001024 <MX_FMC_Init+0xc4>)
 8000fb4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fb8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000fba:	4b1a      	ldr	r3, [pc, #104]	; (8001024 <MX_FMC_Init+0xc4>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000fc0:	4b18      	ldr	r3, [pc, #96]	; (8001024 <MX_FMC_Init+0xc4>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_ENABLE;
 8000fc6:	4b17      	ldr	r3, [pc, #92]	; (8001024 <MX_FMC_Init+0xc4>)
 8000fc8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000fcc:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000fce:	4b15      	ldr	r3, [pc, #84]	; (8001024 <MX_FMC_Init+0xc4>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000fd4:	4b13      	ldr	r3, [pc, #76]	; (8001024 <MX_FMC_Init+0xc4>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.NBLSetupTime = 0;
 8000fda:	4b12      	ldr	r3, [pc, #72]	; (8001024 <MX_FMC_Init+0xc4>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	645a      	str	r2, [r3, #68]	; 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000fe0:	4b10      	ldr	r3, [pc, #64]	; (8001024 <MX_FMC_Init+0xc4>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000fe6:	230f      	movs	r3, #15
 8000fe8:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8000fea:	230f      	movs	r3, #15
 8000fec:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8000fee:	23ff      	movs	r3, #255	; 0xff
 8000ff0:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000ff6:	230f      	movs	r3, #15
 8000ff8:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000ffa:	2310      	movs	r3, #16
 8000ffc:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 2;
 8000ffe:	2302      	movs	r3, #2
 8001000:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8001002:	2300      	movs	r3, #0
 8001004:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001006:	463b      	mov	r3, r7
 8001008:	2200      	movs	r2, #0
 800100a:	4619      	mov	r1, r3
 800100c:	4805      	ldr	r0, [pc, #20]	; (8001024 <MX_FMC_Init+0xc4>)
 800100e:	f005 fe9b 	bl	8006d48 <HAL_SRAM_Init>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_FMC_Init+0xbc>
  {
    Error_Handler( );
 8001018:	f000 fb2e 	bl	8001678 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800101c:	bf00      	nop
 800101e:	3720      	adds	r7, #32
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	200008c4 	.word	0x200008c4
 8001028:	a0000104 	.word	0xa0000104

0800102c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08e      	sub	sp, #56	; 0x38
 8001030:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001032:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
 8001040:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001042:	4bb2      	ldr	r3, [pc, #712]	; (800130c <MX_GPIO_Init+0x2e0>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001046:	4ab1      	ldr	r2, [pc, #708]	; (800130c <MX_GPIO_Init+0x2e0>)
 8001048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800104c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800104e:	4baf      	ldr	r3, [pc, #700]	; (800130c <MX_GPIO_Init+0x2e0>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001056:	623b      	str	r3, [r7, #32]
 8001058:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800105a:	4bac      	ldr	r3, [pc, #688]	; (800130c <MX_GPIO_Init+0x2e0>)
 800105c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105e:	4aab      	ldr	r2, [pc, #684]	; (800130c <MX_GPIO_Init+0x2e0>)
 8001060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001064:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001066:	4ba9      	ldr	r3, [pc, #676]	; (800130c <MX_GPIO_Init+0x2e0>)
 8001068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800106e:	61fb      	str	r3, [r7, #28]
 8001070:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001072:	4ba6      	ldr	r3, [pc, #664]	; (800130c <MX_GPIO_Init+0x2e0>)
 8001074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001076:	4aa5      	ldr	r2, [pc, #660]	; (800130c <MX_GPIO_Init+0x2e0>)
 8001078:	f043 0310 	orr.w	r3, r3, #16
 800107c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800107e:	4ba3      	ldr	r3, [pc, #652]	; (800130c <MX_GPIO_Init+0x2e0>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001082:	f003 0310 	and.w	r3, r3, #16
 8001086:	61bb      	str	r3, [r7, #24]
 8001088:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800108a:	4ba0      	ldr	r3, [pc, #640]	; (800130c <MX_GPIO_Init+0x2e0>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108e:	4a9f      	ldr	r2, [pc, #636]	; (800130c <MX_GPIO_Init+0x2e0>)
 8001090:	f043 0302 	orr.w	r3, r3, #2
 8001094:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001096:	4b9d      	ldr	r3, [pc, #628]	; (800130c <MX_GPIO_Init+0x2e0>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	617b      	str	r3, [r7, #20]
 80010a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a2:	4b9a      	ldr	r3, [pc, #616]	; (800130c <MX_GPIO_Init+0x2e0>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a6:	4a99      	ldr	r2, [pc, #612]	; (800130c <MX_GPIO_Init+0x2e0>)
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ae:	4b97      	ldr	r3, [pc, #604]	; (800130c <MX_GPIO_Init+0x2e0>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010ba:	4b94      	ldr	r3, [pc, #592]	; (800130c <MX_GPIO_Init+0x2e0>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010be:	4a93      	ldr	r2, [pc, #588]	; (800130c <MX_GPIO_Init+0x2e0>)
 80010c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c6:	4b91      	ldr	r3, [pc, #580]	; (800130c <MX_GPIO_Init+0x2e0>)
 80010c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 80010d2:	f001 fe05 	bl	8002ce0 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010d6:	4b8d      	ldr	r3, [pc, #564]	; (800130c <MX_GPIO_Init+0x2e0>)
 80010d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010da:	4a8c      	ldr	r2, [pc, #560]	; (800130c <MX_GPIO_Init+0x2e0>)
 80010dc:	f043 0308 	orr.w	r3, r3, #8
 80010e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e2:	4b8a      	ldr	r3, [pc, #552]	; (800130c <MX_GPIO_Init+0x2e0>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e6:	f003 0308 	and.w	r3, r3, #8
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ee:	4b87      	ldr	r3, [pc, #540]	; (800130c <MX_GPIO_Init+0x2e0>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f2:	4a86      	ldr	r2, [pc, #536]	; (800130c <MX_GPIO_Init+0x2e0>)
 80010f4:	f043 0304 	orr.w	r3, r3, #4
 80010f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010fa:	4b84      	ldr	r3, [pc, #528]	; (800130c <MX_GPIO_Init+0x2e0>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fe:	f003 0304 	and.w	r3, r3, #4
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001106:	4b81      	ldr	r3, [pc, #516]	; (800130c <MX_GPIO_Init+0x2e0>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110a:	4a80      	ldr	r2, [pc, #512]	; (800130c <MX_GPIO_Init+0x2e0>)
 800110c:	f043 0320 	orr.w	r3, r3, #32
 8001110:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001112:	4b7e      	ldr	r3, [pc, #504]	; (800130c <MX_GPIO_Init+0x2e0>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001116:	f003 0320 	and.w	r3, r3, #32
 800111a:	603b      	str	r3, [r7, #0]
 800111c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 800111e:	2200      	movs	r2, #0
 8001120:	f244 0114 	movw	r1, #16404	; 0x4014
 8001124:	487a      	ldr	r0, [pc, #488]	; (8001310 <MX_GPIO_Init+0x2e4>)
 8001126:	f001 fa75 	bl	8002614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(JOY_SEL_GPIO_Port, JOY_SEL_Pin, GPIO_PIN_RESET);
 800112a:	2200      	movs	r2, #0
 800112c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001130:	4878      	ldr	r0, [pc, #480]	; (8001314 <MX_GPIO_Init+0x2e8>)
 8001132:	f001 fa6f 	bl	8002614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT_SIGNAL_GPIO_Port, DHT_SIGNAL_Pin, GPIO_PIN_RESET);
 8001136:	2200      	movs	r2, #0
 8001138:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800113c:	4876      	ldr	r0, [pc, #472]	; (8001318 <MX_GPIO_Init+0x2ec>)
 800113e:	f001 fa69 	bl	8002614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	2140      	movs	r1, #64	; 0x40
 8001146:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800114a:	f001 fa63 	bl	8002614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_Port, MFX_WAKEUP_Pin, GPIO_PIN_RESET);
 800114e:	2200      	movs	r2, #0
 8001150:	2104      	movs	r1, #4
 8001152:	4872      	ldr	r0, [pc, #456]	; (800131c <MX_GPIO_Init+0x2f0>)
 8001154:	f001 fa5e 	bl	8002614 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OCTOSPIM_P2_IO1_Pin OCTOSPIM_P2_IO2_Pin OCTOSPIM_P2_CLK_Pin OCTOSPIM_P2_IO0_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO1_Pin|OCTOSPIM_P2_IO2_Pin|OCTOSPIM_P2_CLK_Pin|OCTOSPIM_P2_IO0_Pin;
 8001158:	f44f 6364 	mov.w	r3, #3648	; 0xe40
 800115c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115e:	2302      	movs	r3, #2
 8001160:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001166:	2303      	movs	r3, #3
 8001168:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 800116a:	2305      	movs	r3, #5
 800116c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800116e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001172:	4619      	mov	r1, r3
 8001174:	486a      	ldr	r0, [pc, #424]	; (8001320 <MX_GPIO_Init+0x2f4>)
 8001176:	f001 f8a3 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MIC_VDD_Pin DSI_SPI_USART_CS_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin;
 800117a:	f244 0314 	movw	r3, #16404	; 0x4014
 800117e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001180:	2301      	movs	r3, #1
 8001182:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001188:	2300      	movs	r3, #0
 800118a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800118c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001190:	4619      	mov	r1, r3
 8001192:	485f      	ldr	r0, [pc, #380]	; (8001310 <MX_GPIO_Init+0x2e4>)
 8001194:	f001 f894 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001198:	2310      	movs	r3, #16
 800119a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119c:	2302      	movs	r3, #2
 800119e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a4:	2300      	movs	r3, #0
 80011a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80011a8:	2302      	movs	r3, #2
 80011aa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80011ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b0:	4619      	mov	r1, r3
 80011b2:	485a      	ldr	r0, [pc, #360]	; (800131c <MX_GPIO_Init+0x2f0>)
 80011b4:	f001 f884 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D7_Pin DCMI_D5_Pin DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 80011b8:	23b0      	movs	r3, #176	; 0xb0
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011bc:	2302      	movs	r3, #2
 80011be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c4:	2300      	movs	r3, #0
 80011c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80011c8:	230a      	movs	r3, #10
 80011ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80011cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d0:	4619      	mov	r1, r3
 80011d2:	4853      	ldr	r0, [pc, #332]	; (8001320 <MX_GPIO_Init+0x2f4>)
 80011d4:	f001 f874 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOSPIM_P2_IO6_Pin OCTOSPIM_P2_DQS_Pin OCTOSPIM_P2_IO7_Pin OCTOSPIM_P2_CS_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO6_Pin|OCTOSPIM_P2_DQS_Pin|OCTOSPIM_P2_IO7_Pin|OCTOSPIM_P2_CS_Pin;
 80011d8:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 80011dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011de:	2302      	movs	r3, #2
 80011e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e6:	2303      	movs	r3, #3
 80011e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 80011ea:	2305      	movs	r3, #5
 80011ec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f2:	4619      	mov	r1, r3
 80011f4:	4848      	ldr	r0, [pc, #288]	; (8001318 <MX_GPIO_Init+0x2ec>)
 80011f6:	f001 f863 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 80011fa:	2302      	movs	r3, #2
 80011fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011fe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001202:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8001208:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800120c:	4619      	mov	r1, r3
 800120e:	4844      	ldr	r0, [pc, #272]	; (8001320 <MX_GPIO_Init+0x2f4>)
 8001210:	f001 f856 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D3_Pin DCMI_PIXCLK_Pin DCMI_D2_Pin */
  GPIO_InitStruct.Pin = DCMI_D3_Pin|DCMI_PIXCLK_Pin|DCMI_D2_Pin;
 8001214:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121a:	2302      	movs	r3, #2
 800121c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001222:	2300      	movs	r3, #0
 8001224:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8001226:	230a      	movs	r3, #10
 8001228:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800122a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800122e:	4619      	mov	r1, r3
 8001230:	4837      	ldr	r0, [pc, #220]	; (8001310 <MX_GPIO_Init+0x2e4>)
 8001232:	f001 f845 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 8001236:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800123a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123c:	2302      	movs	r3, #2
 800123e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001244:	2300      	movs	r3, #0
 8001246:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001248:	2303      	movs	r3, #3
 800124a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 800124c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001250:	4619      	mov	r1, r3
 8001252:	482f      	ldr	r0, [pc, #188]	; (8001310 <MX_GPIO_Init+0x2e4>)
 8001254:	f001 f834 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOPSIM_P2_IO4_Pin OCTOSPIM_P2_IO5_Pin OCTOSPI_P2_IO3_Pin */
  GPIO_InitStruct.Pin = OCTOPSIM_P2_IO4_Pin|OCTOSPIM_P2_IO5_Pin|OCTOSPI_P2_IO3_Pin;
 8001258:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125e:	2302      	movs	r3, #2
 8001260:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001266:	2303      	movs	r3, #3
 8001268:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 800126a:	2305      	movs	r3, #5
 800126c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800126e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001272:	4619      	mov	r1, r3
 8001274:	4826      	ldr	r0, [pc, #152]	; (8001310 <MX_GPIO_Init+0x2e4>)
 8001276:	f001 f823 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_SEL_Pin */
  GPIO_InitStruct.Pin = JOY_SEL_Pin;
 800127a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001280:	2301      	movs	r3, #1
 8001282:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001288:	2300      	movs	r3, #0
 800128a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(JOY_SEL_GPIO_Port, &GPIO_InitStruct);
 800128c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001290:	4619      	mov	r1, r3
 8001292:	4820      	ldr	r0, [pc, #128]	; (8001314 <MX_GPIO_Init+0x2e8>)
 8001294:	f001 f814 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT_SIGNAL_Pin */
  GPIO_InitStruct.Pin = DHT_SIGNAL_Pin;
 8001298:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129e:	2301      	movs	r3, #1
 80012a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a6:	2300      	movs	r3, #0
 80012a8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DHT_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 80012aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ae:	4619      	mov	r1, r3
 80012b0:	4819      	ldr	r0, [pc, #100]	; (8001318 <MX_GPIO_Init+0x2ec>)
 80012b2:	f001 f805 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_14_Pin ARD_15_Pin */
  GPIO_InitStruct.Pin = ARD_14_Pin|ARD_15_Pin;
 80012b6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012bc:	2312      	movs	r3, #18
 80012be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c4:	2303      	movs	r3, #3
 80012c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80012c8:	2304      	movs	r3, #4
 80012ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d0:	4619      	mov	r1, r3
 80012d2:	4811      	ldr	r0, [pc, #68]	; (8001318 <MX_GPIO_Init+0x2ec>)
 80012d4:	f000 fff4 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_INT_Pin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
 80012d8:	2340      	movs	r3, #64	; 0x40
 80012da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012dc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 80012e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ea:	4619      	mov	r1, r3
 80012ec:	4809      	ldr	r0, [pc, #36]	; (8001314 <MX_GPIO_Init+0x2e8>)
 80012ee:	f000 ffe7 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFDATIN3_Pin DF_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFDATIN3_Pin|DF_CKOUT_Pin;
 80012f2:	2384      	movs	r3, #132	; 0x84
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f6:	2302      	movs	r3, #2
 80012f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fe:	2300      	movs	r3, #0
 8001300:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001302:	2306      	movs	r3, #6
 8001304:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001306:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800130a:	e00b      	b.n	8001324 <MX_GPIO_Init+0x2f8>
 800130c:	40021000 	.word	0x40021000
 8001310:	48001c00 	.word	0x48001c00
 8001314:	48000800 	.word	0x48000800
 8001318:	48001800 	.word	0x48001800
 800131c:	48000400 	.word	0x48000400
 8001320:	48002000 	.word	0x48002000
 8001324:	4619      	mov	r1, r3
 8001326:	4857      	ldr	r0, [pc, #348]	; (8001484 <MX_GPIO_Init+0x458>)
 8001328:	f000 ffca 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D0_Pin ARD_D1_Pin */
  GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 800132c:	2303      	movs	r3, #3
 800132e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001330:	2302      	movs	r3, #2
 8001332:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001338:	2303      	movs	r3, #3
 800133a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800133c:	2308      	movs	r3, #8
 800133e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001340:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001344:	4619      	mov	r1, r3
 8001346:	484f      	ldr	r0, [pc, #316]	; (8001484 <MX_GPIO_Init+0x458>)
 8001348:	f000 ffba 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A2_Pin ARD_A1_Pin */
  GPIO_InitStruct.Pin = ARD_A2_Pin|ARD_A1_Pin;
 800134c:	2318      	movs	r3, #24
 800134e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001350:	230b      	movs	r3, #11
 8001352:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001358:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135c:	4619      	mov	r1, r3
 800135e:	4849      	ldr	r0, [pc, #292]	; (8001484 <MX_GPIO_Init+0x458>)
 8001360:	f000 ffae 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A4_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A4_Pin|ARD_A0_Pin;
 8001364:	2381      	movs	r3, #129	; 0x81
 8001366:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001368:	230b      	movs	r3, #11
 800136a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001374:	4619      	mov	r1, r3
 8001376:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800137a:	f000 ffa1 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_PWM_Pin */
  GPIO_InitStruct.Pin = STMOD_PWM_Pin;
 800137e:	2320      	movs	r3, #32
 8001380:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001382:	2302      	movs	r3, #2
 8001384:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138a:	2300      	movs	r3, #0
 800138c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800138e:	2301      	movs	r3, #1
 8001390:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(STMOD_PWM_GPIO_Port, &GPIO_InitStruct);
 8001392:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001396:	4619      	mov	r1, r3
 8001398:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800139c:	f000 ff90 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 80013a0:	2340      	movs	r3, #64	; 0x40
 80013a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a4:	2301      	movs	r3, #1
 80013a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ac:	2300      	movs	r3, #0
 80013ae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 80013b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b4:	4619      	mov	r1, r3
 80013b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ba:	f000 ff81 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 80013be:	2302      	movs	r3, #2
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c2:	2302      	movs	r3, #2
 80013c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ca:	2300      	movs	r3, #0
 80013cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80013ce:	2302      	movs	r3, #2
 80013d0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 80013d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d6:	4619      	mov	r1, r3
 80013d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013dc:	f000 ff70 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_TE_Pin */
  GPIO_InitStruct.Pin = DSI_TE_Pin;
 80013e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e6:	2302      	movs	r3, #2
 80013e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ee:	2300      	movs	r3, #0
 80013f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_DSI;
 80013f2:	230b      	movs	r3, #11
 80013f4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 80013f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013fa:	4619      	mov	r1, r3
 80013fc:	4822      	ldr	r0, [pc, #136]	; (8001488 <MX_GPIO_Init+0x45c>)
 80013fe:	f000 ff5f 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_HSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin;
 8001402:	2310      	movs	r3, #16
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001406:	2302      	movs	r3, #2
 8001408:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140e:	2300      	movs	r3, #0
 8001410:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8001412:	230a      	movs	r3, #10
 8001414:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DCMI_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8001416:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800141a:	4619      	mov	r1, r3
 800141c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001420:	f000 ff4e 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_A3_Pin */
  GPIO_InitStruct.Pin = ARD_A3_Pin;
 8001424:	2301      	movs	r3, #1
 8001426:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001428:	230b      	movs	r3, #11
 800142a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 8001430:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001434:	4619      	mov	r1, r3
 8001436:	4815      	ldr	r0, [pc, #84]	; (800148c <MX_GPIO_Init+0x460>)
 8001438:	f000 ff42 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_WAKEUP_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 800143c:	2304      	movs	r3, #4
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001440:	2301      	movs	r3, #1
 8001442:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001448:	2300      	movs	r3, #0
 800144a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 800144c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001450:	4619      	mov	r1, r3
 8001452:	480e      	ldr	r0, [pc, #56]	; (800148c <MX_GPIO_Init+0x460>)
 8001454:	f000 ff34 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFDATIN1_Pin */
  GPIO_InitStruct.Pin = DFDATIN1_Pin;
 8001458:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145e:	2302      	movs	r3, #2
 8001460:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001466:	2300      	movs	r3, #0
 8001468:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800146a:	2306      	movs	r3, #6
 800146c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 800146e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001472:	4619      	mov	r1, r3
 8001474:	4805      	ldr	r0, [pc, #20]	; (800148c <MX_GPIO_Init+0x460>)
 8001476:	f000 ff23 	bl	80022c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800147a:	bf00      	nop
 800147c:	3738      	adds	r7, #56	; 0x38
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	48000800 	.word	0x48000800
 8001488:	48001400 	.word	0x48001400
 800148c:	48000400 	.word	0x48000400

08001490 <delay_us>:

/* USER CODE BEGIN 4 */

void delay_us (uint16_t us){
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  			 // set the counter value a 0
 800149a:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <delay_us+0x30>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2200      	movs	r2, #0
 80014a0:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the microsecond (us) input
 80014a2:	bf00      	nop
 80014a4:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <delay_us+0x30>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014aa:	88fb      	ldrh	r3, [r7, #6]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d3f9      	bcc.n	80014a4 <delay_us+0x14>
}
 80014b0:	bf00      	nop
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	20000244 	.word	0x20000244

080014c4 <setPinOutput>:

void setPinOutput(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b088      	sub	sp, #32
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	460b      	mov	r3, r1
 80014ce:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d0:	f107 030c 	add.w	r3, r7, #12
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80014e0:	887b      	ldrh	r3, [r7, #2]
 80014e2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e4:	2301      	movs	r3, #1
 80014e6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e8:	2300      	movs	r3, #0
 80014ea:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80014ec:	f107 030c 	add.w	r3, r7, #12
 80014f0:	4619      	mov	r1, r3
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f000 fee4 	bl	80022c0 <HAL_GPIO_Init>
}
 80014f8:	bf00      	nop
 80014fa:	3720      	adds	r7, #32
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <setPinInput>:

void setPinInput(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8001500:	b580      	push	{r7, lr}
 8001502:	b088      	sub	sp, #32
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	460b      	mov	r3, r1
 800150a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150c:	f107 030c 	add.w	r3, r7, #12
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800151c:	887b      	ldrh	r3, [r7, #2]
 800151e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001520:	2300      	movs	r3, #0
 8001522:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001524:	2301      	movs	r3, #1
 8001526:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001528:	f107 030c 	add.w	r3, r7, #12
 800152c:	4619      	mov	r1, r3
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f000 fec6 	bl	80022c0 <HAL_GPIO_Init>
}
 8001534:	bf00      	nop
 8001536:	3720      	adds	r7, #32
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <dht11Start>:

void dht11Start(void){
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
	setPinOutput(DHT_SIGNAL_GPIO_Port, DHT_SIGNAL_Pin);
 8001540:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001544:	480e      	ldr	r0, [pc, #56]	; (8001580 <dht11Start+0x44>)
 8001546:	f7ff ffbd 	bl	80014c4 <setPinOutput>
	HAL_GPIO_WritePin(DHT_SIGNAL_GPIO_Port, DHT_SIGNAL_Pin, 0);   // Pull pin low
 800154a:	2200      	movs	r2, #0
 800154c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001550:	480b      	ldr	r0, [pc, #44]	; (8001580 <dht11Start+0x44>)
 8001552:	f001 f85f 	bl	8002614 <HAL_GPIO_WritePin>
	delay_us(18000);	// 18 ms
 8001556:	f244 6050 	movw	r0, #18000	; 0x4650
 800155a:	f7ff ff99 	bl	8001490 <delay_us>
	HAL_GPIO_WritePin(DHT_SIGNAL_GPIO_Port, DHT_SIGNAL_Pin, 1);   // Pull pin high
 800155e:	2201      	movs	r2, #1
 8001560:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001564:	4806      	ldr	r0, [pc, #24]	; (8001580 <dht11Start+0x44>)
 8001566:	f001 f855 	bl	8002614 <HAL_GPIO_WritePin>
	delay_us(20);		// 20 us
 800156a:	2014      	movs	r0, #20
 800156c:	f7ff ff90 	bl	8001490 <delay_us>
	setPinInput(DHT_SIGNAL_GPIO_Port, DHT_SIGNAL_Pin);
 8001570:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001574:	4802      	ldr	r0, [pc, #8]	; (8001580 <dht11Start+0x44>)
 8001576:	f7ff ffc3 	bl	8001500 <setPinInput>
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	48001800 	.word	0x48001800

08001584 <dht11CheckResponse>:

uint8_t dht11CheckResponse(void){
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 800158a:	2300      	movs	r3, #0
 800158c:	71fb      	strb	r3, [r7, #7]
	delay_us(40);		// 40 us
 800158e:	2028      	movs	r0, #40	; 0x28
 8001590:	f7ff ff7e 	bl	8001490 <delay_us>
	if (!(HAL_GPIO_ReadPin(DHT_SIGNAL_GPIO_Port, DHT_SIGNAL_Pin))){
 8001594:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001598:	4811      	ldr	r0, [pc, #68]	; (80015e0 <dht11CheckResponse+0x5c>)
 800159a:	f001 f823 	bl	80025e4 <HAL_GPIO_ReadPin>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d10f      	bne.n	80015c4 <dht11CheckResponse+0x40>
		delay_us(80);
 80015a4:	2050      	movs	r0, #80	; 0x50
 80015a6:	f7ff ff73 	bl	8001490 <delay_us>
		if ((HAL_GPIO_ReadPin(DHT_SIGNAL_GPIO_Port, DHT_SIGNAL_Pin))) Response = 1;
 80015aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015ae:	480c      	ldr	r0, [pc, #48]	; (80015e0 <dht11CheckResponse+0x5c>)
 80015b0:	f001 f818 	bl	80025e4 <HAL_GPIO_ReadPin>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d002      	beq.n	80015c0 <dht11CheckResponse+0x3c>
 80015ba:	2301      	movs	r3, #1
 80015bc:	71fb      	strb	r3, [r7, #7]
 80015be:	e001      	b.n	80015c4 <dht11CheckResponse+0x40>
		else Response = -1;
 80015c0:	23ff      	movs	r3, #255	; 0xff
 80015c2:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin(DHT_SIGNAL_GPIO_Port, DHT_SIGNAL_Pin)));   // Wait for pin to go low
 80015c4:	bf00      	nop
 80015c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015ca:	4805      	ldr	r0, [pc, #20]	; (80015e0 <dht11CheckResponse+0x5c>)
 80015cc:	f001 f80a 	bl	80025e4 <HAL_GPIO_ReadPin>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1f7      	bne.n	80015c6 <dht11CheckResponse+0x42>
	return Response;
 80015d6:	79fb      	ldrb	r3, [r7, #7]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	48001800 	.word	0x48001800

080015e4 <dht11Read>:

uint8_t dht11Read(void){
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++){
 80015ea:	2300      	movs	r3, #0
 80015ec:	71bb      	strb	r3, [r7, #6]
 80015ee:	bf00      	nop
 80015f0:	79bb      	ldrb	r3, [r7, #6]
 80015f2:	2b07      	cmp	r3, #7
 80015f4:	d839      	bhi.n	800166a <dht11Read+0x86>
		while (!(HAL_GPIO_ReadPin(DHT_SIGNAL_GPIO_Port, DHT_SIGNAL_Pin)));   // wait for pin to go high
 80015f6:	bf00      	nop
 80015f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015fc:	481d      	ldr	r0, [pc, #116]	; (8001674 <dht11Read+0x90>)
 80015fe:	f000 fff1 	bl	80025e4 <HAL_GPIO_ReadPin>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d0f7      	beq.n	80015f8 <dht11Read+0x14>
		delay_us(40);		   // 40 us
 8001608:	2028      	movs	r0, #40	; 0x28
 800160a:	f7ff ff41 	bl	8001490 <delay_us>
		if (!(HAL_GPIO_ReadPin(DHT_SIGNAL_GPIO_Port, DHT_SIGNAL_Pin))){		 // if the pin is low
 800160e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001612:	4818      	ldr	r0, [pc, #96]	; (8001674 <dht11Read+0x90>)
 8001614:	f000 ffe6 	bl	80025e4 <HAL_GPIO_ReadPin>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d10e      	bne.n	800163c <dht11Read+0x58>
			i&= ~(1<<(7-j));   // write 0
 800161e:	79bb      	ldrb	r3, [r7, #6]
 8001620:	f1c3 0307 	rsb	r3, r3, #7
 8001624:	2201      	movs	r2, #1
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	b25b      	sxtb	r3, r3
 800162c:	43db      	mvns	r3, r3
 800162e:	b25a      	sxtb	r2, r3
 8001630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001634:	4013      	ands	r3, r2
 8001636:	b25b      	sxtb	r3, r3
 8001638:	71fb      	strb	r3, [r7, #7]
 800163a:	e014      	b.n	8001666 <dht11Read+0x82>
		} else {
			i|= (1<<(7-j));    // write 1
 800163c:	79bb      	ldrb	r3, [r7, #6]
 800163e:	f1c3 0307 	rsb	r3, r3, #7
 8001642:	2201      	movs	r2, #1
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	b25a      	sxtb	r2, r3
 800164a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164e:	4313      	orrs	r3, r2
 8001650:	b25b      	sxtb	r3, r3
 8001652:	71fb      	strb	r3, [r7, #7]
			while ((HAL_GPIO_ReadPin (DHT_SIGNAL_GPIO_Port, DHT_SIGNAL_Pin)));  // wait for  pin to go low
 8001654:	bf00      	nop
 8001656:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800165a:	4806      	ldr	r0, [pc, #24]	; (8001674 <dht11Read+0x90>)
 800165c:	f000 ffc2 	bl	80025e4 <HAL_GPIO_ReadPin>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1f7      	bne.n	8001656 <dht11Read+0x72>
		}
		return i;
 8001666:	79fb      	ldrb	r3, [r7, #7]
 8001668:	e7ff      	b.n	800166a <dht11Read+0x86>
	}
}
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	48001800 	.word	0x48001800

08001678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800167c:	b672      	cpsid	i
}
 800167e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001680:	e7fe      	b.n	8001680 <Error_Handler+0x8>
	...

08001684 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800168a:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <HAL_MspInit+0x44>)
 800168c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800168e:	4a0e      	ldr	r2, [pc, #56]	; (80016c8 <HAL_MspInit+0x44>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	6613      	str	r3, [r2, #96]	; 0x60
 8001696:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <HAL_MspInit+0x44>)
 8001698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	607b      	str	r3, [r7, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016a2:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <HAL_MspInit+0x44>)
 80016a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a6:	4a08      	ldr	r2, [pc, #32]	; (80016c8 <HAL_MspInit+0x44>)
 80016a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ac:	6593      	str	r3, [r2, #88]	; 0x58
 80016ae:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <HAL_MspInit+0x44>)
 80016b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b6:	603b      	str	r3, [r7, #0]
 80016b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	40021000 	.word	0x40021000

080016cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b0b2      	sub	sp, #200	; 0xc8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016e4:	f107 0318 	add.w	r3, r7, #24
 80016e8:	229c      	movs	r2, #156	; 0x9c
 80016ea:	2100      	movs	r1, #0
 80016ec:	4618      	mov	r0, r3
 80016ee:	f007 feb7 	bl	8009460 <memset>
  if(hi2c->Instance==I2C1)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a33      	ldr	r2, [pc, #204]	; (80017c4 <HAL_I2C_MspInit+0xf8>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d15e      	bne.n	80017ba <HAL_I2C_MspInit+0xee>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80016fc:	2340      	movs	r3, #64	; 0x40
 80016fe:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001700:	2300      	movs	r3, #0
 8001702:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001704:	f107 0318 	add.w	r3, r7, #24
 8001708:	4618      	mov	r0, r3
 800170a:	f002 f9cd 	bl	8003aa8 <HAL_RCCEx_PeriphCLKConfig>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001714:	f7ff ffb0 	bl	8001678 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001718:	4b2b      	ldr	r3, [pc, #172]	; (80017c8 <HAL_I2C_MspInit+0xfc>)
 800171a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171c:	4a2a      	ldr	r2, [pc, #168]	; (80017c8 <HAL_I2C_MspInit+0xfc>)
 800171e:	f043 0302 	orr.w	r3, r3, #2
 8001722:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001724:	4b28      	ldr	r3, [pc, #160]	; (80017c8 <HAL_I2C_MspInit+0xfc>)
 8001726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001728:	f003 0302 	and.w	r3, r3, #2
 800172c:	617b      	str	r3, [r7, #20]
 800172e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001730:	4b25      	ldr	r3, [pc, #148]	; (80017c8 <HAL_I2C_MspInit+0xfc>)
 8001732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001734:	4a24      	ldr	r2, [pc, #144]	; (80017c8 <HAL_I2C_MspInit+0xfc>)
 8001736:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800173a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800173c:	4b22      	ldr	r3, [pc, #136]	; (80017c8 <HAL_I2C_MspInit+0xfc>)
 800173e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001744:	613b      	str	r3, [r7, #16]
 8001746:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8001748:	f001 faca 	bl	8002ce0 <HAL_PWREx_EnableVddIO2>
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PG13     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin;
 800174c:	2340      	movs	r3, #64	; 0x40
 800174e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001752:	2312      	movs	r3, #18
 8001754:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001758:	2301      	movs	r3, #1
 800175a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175e:	2303      	movs	r3, #3
 8001760:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001764:	2304      	movs	r3, #4
 8001766:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(I2C1_SCL_GPIO_Port, &GPIO_InitStruct);
 800176a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800176e:	4619      	mov	r1, r3
 8001770:	4816      	ldr	r0, [pc, #88]	; (80017cc <HAL_I2C_MspInit+0x100>)
 8001772:	f000 fda5 	bl	80022c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C1_SDA_Pin;
 8001776:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800177a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800177e:	2312      	movs	r3, #18
 8001780:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001784:	2301      	movs	r3, #1
 8001786:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178a:	2303      	movs	r3, #3
 800178c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001790:	2304      	movs	r3, #4
 8001792:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(I2C1_SDA_GPIO_Port, &GPIO_InitStruct);
 8001796:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800179a:	4619      	mov	r1, r3
 800179c:	480c      	ldr	r0, [pc, #48]	; (80017d0 <HAL_I2C_MspInit+0x104>)
 800179e:	f000 fd8f 	bl	80022c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017a2:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <HAL_I2C_MspInit+0xfc>)
 80017a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a6:	4a08      	ldr	r2, [pc, #32]	; (80017c8 <HAL_I2C_MspInit+0xfc>)
 80017a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017ac:	6593      	str	r3, [r2, #88]	; 0x58
 80017ae:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <HAL_I2C_MspInit+0xfc>)
 80017b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017ba:	bf00      	nop
 80017bc:	37c8      	adds	r7, #200	; 0xc8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40005400 	.word	0x40005400
 80017c8:	40021000 	.word	0x40021000
 80017cc:	48000400 	.word	0x48000400
 80017d0:	48001800 	.word	0x48001800

080017d4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b0b2      	sub	sp, #200	; 0xc8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017dc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017ec:	f107 0318 	add.w	r3, r7, #24
 80017f0:	229c      	movs	r2, #156	; 0x9c
 80017f2:	2100      	movs	r1, #0
 80017f4:	4618      	mov	r0, r3
 80017f6:	f007 fe33 	bl	8009460 <memset>
  if(hsd->Instance==SDMMC1)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a33      	ldr	r2, [pc, #204]	; (80018cc <HAL_SD_MspInit+0xf8>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d15f      	bne.n	80018c4 <HAL_SD_MspInit+0xf0>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8001804:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001808:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 800180a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800180e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001812:	f107 0318 	add.w	r3, r7, #24
 8001816:	4618      	mov	r0, r3
 8001818:	f002 f946 	bl	8003aa8 <HAL_RCCEx_PeriphCLKConfig>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 8001822:	f7ff ff29 	bl	8001678 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001826:	4b2a      	ldr	r3, [pc, #168]	; (80018d0 <HAL_SD_MspInit+0xfc>)
 8001828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182a:	4a29      	ldr	r2, [pc, #164]	; (80018d0 <HAL_SD_MspInit+0xfc>)
 800182c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001830:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001832:	4b27      	ldr	r3, [pc, #156]	; (80018d0 <HAL_SD_MspInit+0xfc>)
 8001834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800183e:	4b24      	ldr	r3, [pc, #144]	; (80018d0 <HAL_SD_MspInit+0xfc>)
 8001840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001842:	4a23      	ldr	r2, [pc, #140]	; (80018d0 <HAL_SD_MspInit+0xfc>)
 8001844:	f043 0308 	orr.w	r3, r3, #8
 8001848:	64d3      	str	r3, [r2, #76]	; 0x4c
 800184a:	4b21      	ldr	r3, [pc, #132]	; (80018d0 <HAL_SD_MspInit+0xfc>)
 800184c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184e:	f003 0308 	and.w	r3, r3, #8
 8001852:	613b      	str	r3, [r7, #16]
 8001854:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001856:	4b1e      	ldr	r3, [pc, #120]	; (80018d0 <HAL_SD_MspInit+0xfc>)
 8001858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185a:	4a1d      	ldr	r2, [pc, #116]	; (80018d0 <HAL_SD_MspInit+0xfc>)
 800185c:	f043 0304 	orr.w	r3, r3, #4
 8001860:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001862:	4b1b      	ldr	r3, [pc, #108]	; (80018d0 <HAL_SD_MspInit+0xfc>)
 8001864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001866:	f003 0304 	and.w	r3, r3, #4
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 800186e:	2304      	movs	r3, #4
 8001870:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001874:	2302      	movs	r3, #2
 8001876:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001880:	2303      	movs	r3, #3
 8001882:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001886:	230c      	movs	r3, #12
 8001888:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 800188c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001890:	4619      	mov	r1, r3
 8001892:	4810      	ldr	r0, [pc, #64]	; (80018d4 <HAL_SD_MspInit+0x100>)
 8001894:	f000 fd14 	bl	80022c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D0_Pin
 8001898:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800189c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                          |uSD_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a0:	2302      	movs	r3, #2
 80018a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ac:	2303      	movs	r3, #3
 80018ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80018b2:	230c      	movs	r3, #12
 80018b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018b8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80018bc:	4619      	mov	r1, r3
 80018be:	4806      	ldr	r0, [pc, #24]	; (80018d8 <HAL_SD_MspInit+0x104>)
 80018c0:	f000 fcfe 	bl	80022c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80018c4:	bf00      	nop
 80018c6:	37c8      	adds	r7, #200	; 0xc8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	50062400 	.word	0x50062400
 80018d0:	40021000 	.word	0x40021000
 80018d4:	48000c00 	.word	0x48000c00
 80018d8:	48000800 	.word	0x48000800

080018dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08a      	sub	sp, #40	; 0x28
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e4:	f107 0314 	add.w	r3, r7, #20
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
 80018f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a25      	ldr	r2, [pc, #148]	; (8001990 <HAL_SPI_MspInit+0xb4>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d144      	bne.n	8001988 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80018fe:	4b25      	ldr	r3, [pc, #148]	; (8001994 <HAL_SPI_MspInit+0xb8>)
 8001900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001902:	4a24      	ldr	r2, [pc, #144]	; (8001994 <HAL_SPI_MspInit+0xb8>)
 8001904:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001908:	6593      	str	r3, [r2, #88]	; 0x58
 800190a:	4b22      	ldr	r3, [pc, #136]	; (8001994 <HAL_SPI_MspInit+0xb8>)
 800190c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001912:	613b      	str	r3, [r7, #16]
 8001914:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001916:	4b1f      	ldr	r3, [pc, #124]	; (8001994 <HAL_SPI_MspInit+0xb8>)
 8001918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191a:	4a1e      	ldr	r2, [pc, #120]	; (8001994 <HAL_SPI_MspInit+0xb8>)
 800191c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001920:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001922:	4b1c      	ldr	r3, [pc, #112]	; (8001994 <HAL_SPI_MspInit+0xb8>)
 8001924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800192e:	4b19      	ldr	r3, [pc, #100]	; (8001994 <HAL_SPI_MspInit+0xb8>)
 8001930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001932:	4a18      	ldr	r2, [pc, #96]	; (8001994 <HAL_SPI_MspInit+0xb8>)
 8001934:	f043 0302 	orr.w	r3, r3, #2
 8001938:	64d3      	str	r3, [r2, #76]	; 0x4c
 800193a:	4b16      	ldr	r3, [pc, #88]	; (8001994 <HAL_SPI_MspInit+0xb8>)
 800193c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	60bb      	str	r3, [r7, #8]
 8001944:	68bb      	ldr	r3, [r7, #8]
    PI0     ------> SPI2_NSS
    PB15     ------> SPI2_MOSI
    PB14     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = ARD_10_Pin;
 8001946:	2301      	movs	r3, #1
 8001948:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194a:	2302      	movs	r3, #2
 800194c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001952:	2303      	movs	r3, #3
 8001954:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001956:	2305      	movs	r3, #5
 8001958:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_10_GPIO_Port, &GPIO_InitStruct);
 800195a:	f107 0314 	add.w	r3, r7, #20
 800195e:	4619      	mov	r1, r3
 8001960:	480d      	ldr	r0, [pc, #52]	; (8001998 <HAL_SPI_MspInit+0xbc>)
 8001962:	f000 fcad 	bl	80022c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_MOSI_Pin|SPI2_MISO_Pin|SPI2_CLK_Pin;
 8001966:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800196a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196c:	2302      	movs	r3, #2
 800196e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001974:	2303      	movs	r3, #3
 8001976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001978:	2305      	movs	r3, #5
 800197a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	4619      	mov	r1, r3
 8001982:	4806      	ldr	r0, [pc, #24]	; (800199c <HAL_SPI_MspInit+0xc0>)
 8001984:	f000 fc9c 	bl	80022c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001988:	bf00      	nop
 800198a:	3728      	adds	r7, #40	; 0x28
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40003800 	.word	0x40003800
 8001994:	40021000 	.word	0x40021000
 8001998:	48002000 	.word	0x48002000
 800199c:	48000400 	.word	0x48000400

080019a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a0a      	ldr	r2, [pc, #40]	; (80019d8 <HAL_TIM_Base_MspInit+0x38>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d10b      	bne.n	80019ca <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019b2:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <HAL_TIM_Base_MspInit+0x3c>)
 80019b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019b6:	4a09      	ldr	r2, [pc, #36]	; (80019dc <HAL_TIM_Base_MspInit+0x3c>)
 80019b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019bc:	6613      	str	r3, [r2, #96]	; 0x60
 80019be:	4b07      	ldr	r3, [pc, #28]	; (80019dc <HAL_TIM_Base_MspInit+0x3c>)
 80019c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80019ca:	bf00      	nop
 80019cc:	3714      	adds	r7, #20
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	40012c00 	.word	0x40012c00
 80019dc:	40021000 	.word	0x40021000

080019e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b0b4      	sub	sp, #208	; 0xd0
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]
 80019f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019f8:	f107 0320 	add.w	r3, r7, #32
 80019fc:	229c      	movs	r2, #156	; 0x9c
 80019fe:	2100      	movs	r1, #0
 8001a00:	4618      	mov	r0, r3
 8001a02:	f007 fd2d 	bl	8009460 <memset>
  if(huart->Instance==USART2)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a54      	ldr	r2, [pc, #336]	; (8001b5c <HAL_UART_MspInit+0x17c>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d13c      	bne.n	8001a8a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a10:	2302      	movs	r3, #2
 8001a12:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a14:	2300      	movs	r3, #0
 8001a16:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a18:	f107 0320 	add.w	r3, r7, #32
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f002 f843 	bl	8003aa8 <HAL_RCCEx_PeriphCLKConfig>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a28:	f7ff fe26 	bl	8001678 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a2c:	4b4c      	ldr	r3, [pc, #304]	; (8001b60 <HAL_UART_MspInit+0x180>)
 8001a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a30:	4a4b      	ldr	r2, [pc, #300]	; (8001b60 <HAL_UART_MspInit+0x180>)
 8001a32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a36:	6593      	str	r3, [r2, #88]	; 0x58
 8001a38:	4b49      	ldr	r3, [pc, #292]	; (8001b60 <HAL_UART_MspInit+0x180>)
 8001a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a40:	61fb      	str	r3, [r7, #28]
 8001a42:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a44:	4b46      	ldr	r3, [pc, #280]	; (8001b60 <HAL_UART_MspInit+0x180>)
 8001a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a48:	4a45      	ldr	r2, [pc, #276]	; (8001b60 <HAL_UART_MspInit+0x180>)
 8001a4a:	f043 0301 	orr.w	r3, r3, #1
 8001a4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a50:	4b43      	ldr	r3, [pc, #268]	; (8001b60 <HAL_UART_MspInit+0x180>)
 8001a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a54:	f003 0301 	and.w	r3, r3, #1
 8001a58:	61bb      	str	r3, [r7, #24]
 8001a5a:	69bb      	ldr	r3, [r7, #24]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_TX_Pin;
 8001a5c:	230c      	movs	r3, #12
 8001a5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a62:	2302      	movs	r3, #2
 8001a64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a74:	2307      	movs	r3, #7
 8001a76:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a7a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001a7e:	4619      	mov	r1, r3
 8001a80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a84:	f000 fc1c 	bl	80022c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001a88:	e063      	b.n	8001b52 <HAL_UART_MspInit+0x172>
  else if(huart->Instance==USART3)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a35      	ldr	r2, [pc, #212]	; (8001b64 <HAL_UART_MspInit+0x184>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d15e      	bne.n	8001b52 <HAL_UART_MspInit+0x172>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a94:	2304      	movs	r3, #4
 8001a96:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a9c:	f107 0320 	add.w	r3, r7, #32
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f002 f801 	bl	8003aa8 <HAL_RCCEx_PeriphCLKConfig>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8001aac:	f7ff fde4 	bl	8001678 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ab0:	4b2b      	ldr	r3, [pc, #172]	; (8001b60 <HAL_UART_MspInit+0x180>)
 8001ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab4:	4a2a      	ldr	r2, [pc, #168]	; (8001b60 <HAL_UART_MspInit+0x180>)
 8001ab6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aba:	6593      	str	r3, [r2, #88]	; 0x58
 8001abc:	4b28      	ldr	r3, [pc, #160]	; (8001b60 <HAL_UART_MspInit+0x180>)
 8001abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ac4:	617b      	str	r3, [r7, #20]
 8001ac6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac8:	4b25      	ldr	r3, [pc, #148]	; (8001b60 <HAL_UART_MspInit+0x180>)
 8001aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001acc:	4a24      	ldr	r2, [pc, #144]	; (8001b60 <HAL_UART_MspInit+0x180>)
 8001ace:	f043 0301 	orr.w	r3, r3, #1
 8001ad2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ad4:	4b22      	ldr	r3, [pc, #136]	; (8001b60 <HAL_UART_MspInit+0x180>)
 8001ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad8:	f003 0301 	and.w	r3, r3, #1
 8001adc:	613b      	str	r3, [r7, #16]
 8001ade:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae0:	4b1f      	ldr	r3, [pc, #124]	; (8001b60 <HAL_UART_MspInit+0x180>)
 8001ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae4:	4a1e      	ldr	r2, [pc, #120]	; (8001b60 <HAL_UART_MspInit+0x180>)
 8001ae6:	f043 0302 	orr.w	r3, r3, #2
 8001aea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aec:	4b1c      	ldr	r3, [pc, #112]	; (8001b60 <HAL_UART_MspInit+0x180>)
 8001aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART3_RTS_Pin;
 8001af8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001afc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b00:	2302      	movs	r3, #2
 8001b02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b12:	2307      	movs	r3, #7
 8001b14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(USART3_RTS_GPIO_Port, &GPIO_InitStruct);
 8001b18:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b22:	f000 fbcd 	bl	80022c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART3_RX_Pin|USART3_TX_Pin;
 8001b26:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b2a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b40:	2307      	movs	r3, #7
 8001b42:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b46:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4806      	ldr	r0, [pc, #24]	; (8001b68 <HAL_UART_MspInit+0x188>)
 8001b4e:	f000 fbb7 	bl	80022c0 <HAL_GPIO_Init>
}
 8001b52:	bf00      	nop
 8001b54:	37d0      	adds	r7, #208	; 0xd0
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40004400 	.word	0x40004400
 8001b60:	40021000 	.word	0x40021000
 8001b64:	40004800 	.word	0x40004800
 8001b68:	48000400 	.word	0x48000400

08001b6c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b0b2      	sub	sp, #200	; 0xc8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b74:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	60da      	str	r2, [r3, #12]
 8001b82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b84:	f107 0318 	add.w	r3, r7, #24
 8001b88:	229c      	movs	r2, #156	; 0x9c
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f007 fc67 	bl	8009460 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b9a:	d16c      	bne.n	8001c76 <HAL_PCD_MspInit+0x10a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001b9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ba0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ba8:	f107 0318 	add.w	r3, r7, #24
 8001bac:	4618      	mov	r0, r3
 8001bae:	f001 ff7b 	bl	8003aa8 <HAL_RCCEx_PeriphCLKConfig>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001bb8:	f7ff fd5e 	bl	8001678 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bbc:	4b30      	ldr	r3, [pc, #192]	; (8001c80 <HAL_PCD_MspInit+0x114>)
 8001bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc0:	4a2f      	ldr	r2, [pc, #188]	; (8001c80 <HAL_PCD_MspInit+0x114>)
 8001bc2:	f043 0301 	orr.w	r3, r3, #1
 8001bc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bc8:	4b2d      	ldr	r3, [pc, #180]	; (8001c80 <HAL_PCD_MspInit+0x114>)
 8001bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	617b      	str	r3, [r7, #20]
 8001bd2:	697b      	ldr	r3, [r7, #20]
    PA10     ------> USB_OTG_FS_ID
    PA12     ------> USB_OTG_FS_DP
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = USB_OTGFS_ID_Pin|USB_OTG_FS_DP_Pin|USB_OTGFS_DM_Pin;
 8001bd4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001bd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be8:	2303      	movs	r3, #3
 8001bea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001bee:	230a      	movs	r3, #10
 8001bf0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bfe:	f000 fb5f 	bl	80022c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTGFS_VBUS_Pin;
 8001c02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(USB_OTGFS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001c16:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c20:	f000 fb4e 	bl	80022c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001c24:	4b16      	ldr	r3, [pc, #88]	; (8001c80 <HAL_PCD_MspInit+0x114>)
 8001c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c28:	4a15      	ldr	r2, [pc, #84]	; (8001c80 <HAL_PCD_MspInit+0x114>)
 8001c2a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c30:	4b13      	ldr	r3, [pc, #76]	; (8001c80 <HAL_PCD_MspInit+0x114>)
 8001c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c38:	613b      	str	r3, [r7, #16]
 8001c3a:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c3c:	4b10      	ldr	r3, [pc, #64]	; (8001c80 <HAL_PCD_MspInit+0x114>)
 8001c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d114      	bne.n	8001c72 <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c48:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <HAL_PCD_MspInit+0x114>)
 8001c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4c:	4a0c      	ldr	r2, [pc, #48]	; (8001c80 <HAL_PCD_MspInit+0x114>)
 8001c4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c52:	6593      	str	r3, [r2, #88]	; 0x58
 8001c54:	4b0a      	ldr	r3, [pc, #40]	; (8001c80 <HAL_PCD_MspInit+0x114>)
 8001c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001c60:	f001 f82e 	bl	8002cc0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c64:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <HAL_PCD_MspInit+0x114>)
 8001c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c68:	4a05      	ldr	r2, [pc, #20]	; (8001c80 <HAL_PCD_MspInit+0x114>)
 8001c6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c6e:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001c70:	e001      	b.n	8001c76 <HAL_PCD_MspInit+0x10a>
      HAL_PWREx_EnableVddUSB();
 8001c72:	f001 f825 	bl	8002cc0 <HAL_PWREx_EnableVddUSB>
}
 8001c76:	bf00      	nop
 8001c78:	37c8      	adds	r7, #200	; 0xc8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40021000 	.word	0x40021000

08001c84 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001c8a:	1d3b      	adds	r3, r7, #4
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001c98:	4b32      	ldr	r3, [pc, #200]	; (8001d64 <HAL_FMC_MspInit+0xe0>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d15d      	bne.n	8001d5c <HAL_FMC_MspInit+0xd8>
    return;
  }
  FMC_Initialized = 1;
 8001ca0:	4b30      	ldr	r3, [pc, #192]	; (8001d64 <HAL_FMC_MspInit+0xe0>)
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001ca6:	4b30      	ldr	r3, [pc, #192]	; (8001d68 <HAL_FMC_MspInit+0xe4>)
 8001ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001caa:	4a2f      	ldr	r2, [pc, #188]	; (8001d68 <HAL_FMC_MspInit+0xe4>)
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	6513      	str	r3, [r2, #80]	; 0x50
 8001cb2:	4b2d      	ldr	r3, [pc, #180]	; (8001d68 <HAL_FMC_MspInit+0xe4>)
 8001cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	603b      	str	r3, [r7, #0]
 8001cbc:	683b      	ldr	r3, [r7, #0]
  PF13   ------> FMC_A7
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|PSRAM_A20_Pin|PSRAM_A19_Pin
 8001cbe:	f64f 739b 	movw	r3, #65435	; 0xff9b
 8001cc2:	607b      	str	r3, [r7, #4]
                          |D7_Pin|D6_Pin|D12_Pin|D5_Pin
                          |D11_Pin|D4_Pin|D10_Pin|D9_Pin
                          |D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001cd0:	230c      	movs	r3, #12
 8001cd2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cd4:	1d3b      	adds	r3, r7, #4
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4824      	ldr	r0, [pc, #144]	; (8001d6c <HAL_FMC_MspInit+0xe8>)
 8001cda:	f000 faf1 	bl	80022c0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|PSRAM_OE_Pin|D3_Pin|PSRAM_WE_Pin
 8001cde:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8001ce2:	607b      	str	r3, [r7, #4]
                          |PSRAM_WAIT_Pin|PSRAM_CLK_Pin|PSRAM_NE1_Pin|PSRAM_A18_Pin
                          |D1_Pin|D0_Pin|PSRAM_A17_Pin|PSRAM_A16_Pin
                          |D15_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cec:	2303      	movs	r3, #3
 8001cee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001cf0:	230c      	movs	r3, #12
 8001cf2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cf4:	1d3b      	adds	r3, r7, #4
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	481d      	ldr	r0, [pc, #116]	; (8001d70 <HAL_FMC_MspInit+0xec>)
 8001cfa:	f000 fae1 	bl	80022c0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_ADV_Pin;
 8001cfe:	2380      	movs	r3, #128	; 0x80
 8001d00:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d02:	2302      	movs	r3, #2
 8001d04:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d0e:	230c      	movs	r3, #12
 8001d10:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PSRAM_ADV_GPIO_Port, &GPIO_InitStruct);
 8001d12:	1d3b      	adds	r3, r7, #4
 8001d14:	4619      	mov	r1, r3
 8001d16:	4817      	ldr	r0, [pc, #92]	; (8001d74 <HAL_FMC_MspInit+0xf0>)
 8001d18:	f000 fad2 	bl	80022c0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 8001d1c:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001d20:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d22:	2302      	movs	r3, #2
 8001d24:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d2e:	230c      	movs	r3, #12
 8001d30:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d32:	1d3b      	adds	r3, r7, #4
 8001d34:	4619      	mov	r1, r3
 8001d36:	4810      	ldr	r0, [pc, #64]	; (8001d78 <HAL_FMC_MspInit+0xf4>)
 8001d38:	f000 fac2 	bl	80022c0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A15_Pin|PSRAM_A11_Pin
 8001d3c:	233f      	movs	r3, #63	; 0x3f
 8001d3e:	607b      	str	r3, [r7, #4]
                          |PSRAM_A12_Pin|PSRAM_A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d40:	2302      	movs	r3, #2
 8001d42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d44:	2300      	movs	r3, #0
 8001d46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d4c:	230c      	movs	r3, #12
 8001d4e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d50:	1d3b      	adds	r3, r7, #4
 8001d52:	4619      	mov	r1, r3
 8001d54:	4809      	ldr	r0, [pc, #36]	; (8001d7c <HAL_FMC_MspInit+0xf8>)
 8001d56:	f000 fab3 	bl	80022c0 <HAL_GPIO_Init>
 8001d5a:	e000      	b.n	8001d5e <HAL_FMC_MspInit+0xda>
    return;
 8001d5c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001d5e:	3718      	adds	r7, #24
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	2000094c 	.word	0x2000094c
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	48001000 	.word	0x48001000
 8001d70:	48000c00 	.word	0x48000c00
 8001d74:	48000400 	.word	0x48000400
 8001d78:	48001400 	.word	0x48001400
 8001d7c:	48001800 	.word	0x48001800

08001d80 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001d88:	f7ff ff7c 	bl	8001c84 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001d8c:	bf00      	nop
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b0b0      	sub	sp, #192	; 0xc0
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d9c:	f107 0310 	add.w	r3, r7, #16
 8001da0:	229c      	movs	r2, #156	; 0x9c
 8001da2:	2100      	movs	r1, #0
 8001da4:	4618      	mov	r0, r3
 8001da6:	f007 fb5b 	bl	8009460 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a32      	ldr	r2, [pc, #200]	; (8001e78 <HAL_SAI_MspInit+0xe4>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d15d      	bne.n	8001e70 <HAL_SAI_MspInit+0xdc>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8001db4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001db8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	67fb      	str	r3, [r7, #124]	; 0x7c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001dc6:	2310      	movs	r3, #16
 8001dc8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001dca:	2302      	movs	r3, #2
 8001dcc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 8001dd6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001dda:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ddc:	f107 0310 	add.w	r3, r7, #16
 8001de0:	4618      	mov	r0, r3
 8001de2:	f001 fe61 	bl	8003aa8 <HAL_RCCEx_PeriphCLKConfig>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <HAL_SAI_MspInit+0x5c>
    {
      Error_Handler();
 8001dec:	f7ff fc44 	bl	8001678 <Error_Handler>
    }

    if (SAI1_client == 0)
 8001df0:	4b22      	ldr	r3, [pc, #136]	; (8001e7c <HAL_SAI_MspInit+0xe8>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d10b      	bne.n	8001e10 <HAL_SAI_MspInit+0x7c>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001df8:	4b21      	ldr	r3, [pc, #132]	; (8001e80 <HAL_SAI_MspInit+0xec>)
 8001dfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dfc:	4a20      	ldr	r2, [pc, #128]	; (8001e80 <HAL_SAI_MspInit+0xec>)
 8001dfe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e02:	6613      	str	r3, [r2, #96]	; 0x60
 8001e04:	4b1e      	ldr	r3, [pc, #120]	; (8001e80 <HAL_SAI_MspInit+0xec>)
 8001e06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 8001e10:	4b1a      	ldr	r3, [pc, #104]	; (8001e7c <HAL_SAI_MspInit+0xe8>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	3301      	adds	r3, #1
 8001e16:	4a19      	ldr	r2, [pc, #100]	; (8001e7c <HAL_SAI_MspInit+0xe8>)
 8001e18:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PB9     ------> SAI1_FS_A
    PE6     ------> SAI1_SD_A
    PE5     ------> SAI1_SCK_A
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin|SAI1_FSA_Pin;
 8001e1a:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001e1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e22:	2302      	movs	r3, #2
 8001e24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001e34:	230d      	movs	r3, #13
 8001e36:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e3a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4810      	ldr	r0, [pc, #64]	; (8001e84 <HAL_SAI_MspInit+0xf0>)
 8001e42:	f000 fa3d 	bl	80022c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCKA_Pin|SAI1_SDA_Pin|SAI1_SCKA_Pin;
 8001e46:	2364      	movs	r3, #100	; 0x64
 8001e48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001e5e:	230d      	movs	r3, #13
 8001e60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e64:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4807      	ldr	r0, [pc, #28]	; (8001e88 <HAL_SAI_MspInit+0xf4>)
 8001e6c:	f000 fa28 	bl	80022c0 <HAL_GPIO_Init>

    }
}
 8001e70:	bf00      	nop
 8001e72:	37c0      	adds	r7, #192	; 0xc0
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40015404 	.word	0x40015404
 8001e7c:	20000950 	.word	0x20000950
 8001e80:	40021000 	.word	0x40021000
 8001e84:	48000400 	.word	0x48000400
 8001e88:	48001000 	.word	0x48001000

08001e8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e90:	e7fe      	b.n	8001e90 <NMI_Handler+0x4>

08001e92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e92:	b480      	push	{r7}
 8001e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e96:	e7fe      	b.n	8001e96 <HardFault_Handler+0x4>

08001e98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e9c:	e7fe      	b.n	8001e9c <MemManage_Handler+0x4>

08001e9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ea2:	e7fe      	b.n	8001ea2 <BusFault_Handler+0x4>

08001ea4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ea8:	e7fe      	b.n	8001ea8 <UsageFault_Handler+0x4>

08001eaa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ed8:	f000 f8c8 	bl	800206c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001edc:	bf00      	nop
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ee8:	4a14      	ldr	r2, [pc, #80]	; (8001f3c <_sbrk+0x5c>)
 8001eea:	4b15      	ldr	r3, [pc, #84]	; (8001f40 <_sbrk+0x60>)
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ef4:	4b13      	ldr	r3, [pc, #76]	; (8001f44 <_sbrk+0x64>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d102      	bne.n	8001f02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001efc:	4b11      	ldr	r3, [pc, #68]	; (8001f44 <_sbrk+0x64>)
 8001efe:	4a12      	ldr	r2, [pc, #72]	; (8001f48 <_sbrk+0x68>)
 8001f00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f02:	4b10      	ldr	r3, [pc, #64]	; (8001f44 <_sbrk+0x64>)
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4413      	add	r3, r2
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d207      	bcs.n	8001f20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f10:	f007 faae 	bl	8009470 <__errno>
 8001f14:	4603      	mov	r3, r0
 8001f16:	220c      	movs	r2, #12
 8001f18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f1e:	e009      	b.n	8001f34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f20:	4b08      	ldr	r3, [pc, #32]	; (8001f44 <_sbrk+0x64>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f26:	4b07      	ldr	r3, [pc, #28]	; (8001f44 <_sbrk+0x64>)
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	4a05      	ldr	r2, [pc, #20]	; (8001f44 <_sbrk+0x64>)
 8001f30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f32:	68fb      	ldr	r3, [r7, #12]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3718      	adds	r7, #24
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	200a0000 	.word	0x200a0000
 8001f40:	00000400 	.word	0x00000400
 8001f44:	20000954 	.word	0x20000954
 8001f48:	20000aa8 	.word	0x20000aa8

08001f4c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f50:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <SystemInit+0x20>)
 8001f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f56:	4a05      	ldr	r2, [pc, #20]	; (8001f6c <SystemInit+0x20>)
 8001f58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001f60:	bf00      	nop
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	e000ed00 	.word	0xe000ed00

08001f70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fa8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f74:	f7ff ffea 	bl	8001f4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f78:	480c      	ldr	r0, [pc, #48]	; (8001fac <LoopForever+0x6>)
  ldr r1, =_edata
 8001f7a:	490d      	ldr	r1, [pc, #52]	; (8001fb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f7c:	4a0d      	ldr	r2, [pc, #52]	; (8001fb4 <LoopForever+0xe>)
  movs r3, #0
 8001f7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f80:	e002      	b.n	8001f88 <LoopCopyDataInit>

08001f82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f86:	3304      	adds	r3, #4

08001f88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f8c:	d3f9      	bcc.n	8001f82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f8e:	4a0a      	ldr	r2, [pc, #40]	; (8001fb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f90:	4c0a      	ldr	r4, [pc, #40]	; (8001fbc <LoopForever+0x16>)
  movs r3, #0
 8001f92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f94:	e001      	b.n	8001f9a <LoopFillZerobss>

08001f96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f98:	3204      	adds	r2, #4

08001f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f9c:	d3fb      	bcc.n	8001f96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f9e:	f007 fa6d 	bl	800947c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fa2:	f7fe fcbf 	bl	8000924 <main>

08001fa6 <LoopForever>:

LoopForever:
    b LoopForever
 8001fa6:	e7fe      	b.n	8001fa6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001fa8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001fac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fb0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001fb4:	08009e5c 	.word	0x08009e5c
  ldr r2, =_sbss
 8001fb8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001fbc:	20000aa4 	.word	0x20000aa4

08001fc0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fc0:	e7fe      	b.n	8001fc0 <ADC1_IRQHandler>

08001fc2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b082      	sub	sp, #8
 8001fc6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fcc:	2003      	movs	r0, #3
 8001fce:	f000 f943 	bl	8002258 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fd2:	2000      	movs	r0, #0
 8001fd4:	f000 f80e 	bl	8001ff4 <HAL_InitTick>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d002      	beq.n	8001fe4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	71fb      	strb	r3, [r7, #7]
 8001fe2:	e001      	b.n	8001fe8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001fe4:	f7ff fb4e 	bl	8001684 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
	...

08001ff4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002000:	4b17      	ldr	r3, [pc, #92]	; (8002060 <HAL_InitTick+0x6c>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d023      	beq.n	8002050 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002008:	4b16      	ldr	r3, [pc, #88]	; (8002064 <HAL_InitTick+0x70>)
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	4b14      	ldr	r3, [pc, #80]	; (8002060 <HAL_InitTick+0x6c>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	4619      	mov	r1, r3
 8002012:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002016:	fbb3 f3f1 	udiv	r3, r3, r1
 800201a:	fbb2 f3f3 	udiv	r3, r2, r3
 800201e:	4618      	mov	r0, r3
 8002020:	f000 f941 	bl	80022a6 <HAL_SYSTICK_Config>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d10f      	bne.n	800204a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2b0f      	cmp	r3, #15
 800202e:	d809      	bhi.n	8002044 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002030:	2200      	movs	r2, #0
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	f04f 30ff 	mov.w	r0, #4294967295
 8002038:	f000 f919 	bl	800226e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800203c:	4a0a      	ldr	r2, [pc, #40]	; (8002068 <HAL_InitTick+0x74>)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6013      	str	r3, [r2, #0]
 8002042:	e007      	b.n	8002054 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	73fb      	strb	r3, [r7, #15]
 8002048:	e004      	b.n	8002054 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	73fb      	strb	r3, [r7, #15]
 800204e:	e001      	b.n	8002054 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002054:	7bfb      	ldrb	r3, [r7, #15]
}
 8002056:	4618      	mov	r0, r3
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	20000008 	.word	0x20000008
 8002064:	20000000 	.word	0x20000000
 8002068:	20000004 	.word	0x20000004

0800206c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002070:	4b06      	ldr	r3, [pc, #24]	; (800208c <HAL_IncTick+0x20>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	461a      	mov	r2, r3
 8002076:	4b06      	ldr	r3, [pc, #24]	; (8002090 <HAL_IncTick+0x24>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4413      	add	r3, r2
 800207c:	4a04      	ldr	r2, [pc, #16]	; (8002090 <HAL_IncTick+0x24>)
 800207e:	6013      	str	r3, [r2, #0]
}
 8002080:	bf00      	nop
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	20000008 	.word	0x20000008
 8002090:	20000958 	.word	0x20000958

08002094 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  return uwTick;
 8002098:	4b03      	ldr	r3, [pc, #12]	; (80020a8 <HAL_GetTick+0x14>)
 800209a:	681b      	ldr	r3, [r3, #0]
}
 800209c:	4618      	mov	r0, r3
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	20000958 	.word	0x20000958

080020ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020b4:	f7ff ffee 	bl	8002094 <HAL_GetTick>
 80020b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c4:	d005      	beq.n	80020d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80020c6:	4b0a      	ldr	r3, [pc, #40]	; (80020f0 <HAL_Delay+0x44>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	461a      	mov	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4413      	add	r3, r2
 80020d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020d2:	bf00      	nop
 80020d4:	f7ff ffde 	bl	8002094 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d8f7      	bhi.n	80020d4 <HAL_Delay+0x28>
  {
  }
}
 80020e4:	bf00      	nop
 80020e6:	bf00      	nop
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000008 	.word	0x20000008

080020f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f003 0307 	and.w	r3, r3, #7
 8002102:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002104:	4b0c      	ldr	r3, [pc, #48]	; (8002138 <__NVIC_SetPriorityGrouping+0x44>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800210a:	68ba      	ldr	r2, [r7, #8]
 800210c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002110:	4013      	ands	r3, r2
 8002112:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800211c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002124:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002126:	4a04      	ldr	r2, [pc, #16]	; (8002138 <__NVIC_SetPriorityGrouping+0x44>)
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	60d3      	str	r3, [r2, #12]
}
 800212c:	bf00      	nop
 800212e:	3714      	adds	r7, #20
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	e000ed00 	.word	0xe000ed00

0800213c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002140:	4b04      	ldr	r3, [pc, #16]	; (8002154 <__NVIC_GetPriorityGrouping+0x18>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	0a1b      	lsrs	r3, r3, #8
 8002146:	f003 0307 	and.w	r3, r3, #7
}
 800214a:	4618      	mov	r0, r3
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	e000ed00 	.word	0xe000ed00

08002158 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	4603      	mov	r3, r0
 8002160:	6039      	str	r1, [r7, #0]
 8002162:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002168:	2b00      	cmp	r3, #0
 800216a:	db0a      	blt.n	8002182 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	b2da      	uxtb	r2, r3
 8002170:	490c      	ldr	r1, [pc, #48]	; (80021a4 <__NVIC_SetPriority+0x4c>)
 8002172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002176:	0112      	lsls	r2, r2, #4
 8002178:	b2d2      	uxtb	r2, r2
 800217a:	440b      	add	r3, r1
 800217c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002180:	e00a      	b.n	8002198 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	b2da      	uxtb	r2, r3
 8002186:	4908      	ldr	r1, [pc, #32]	; (80021a8 <__NVIC_SetPriority+0x50>)
 8002188:	79fb      	ldrb	r3, [r7, #7]
 800218a:	f003 030f 	and.w	r3, r3, #15
 800218e:	3b04      	subs	r3, #4
 8002190:	0112      	lsls	r2, r2, #4
 8002192:	b2d2      	uxtb	r2, r2
 8002194:	440b      	add	r3, r1
 8002196:	761a      	strb	r2, [r3, #24]
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	e000e100 	.word	0xe000e100
 80021a8:	e000ed00 	.word	0xe000ed00

080021ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b089      	sub	sp, #36	; 0x24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	f1c3 0307 	rsb	r3, r3, #7
 80021c6:	2b04      	cmp	r3, #4
 80021c8:	bf28      	it	cs
 80021ca:	2304      	movcs	r3, #4
 80021cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	3304      	adds	r3, #4
 80021d2:	2b06      	cmp	r3, #6
 80021d4:	d902      	bls.n	80021dc <NVIC_EncodePriority+0x30>
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	3b03      	subs	r3, #3
 80021da:	e000      	b.n	80021de <NVIC_EncodePriority+0x32>
 80021dc:	2300      	movs	r3, #0
 80021de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e0:	f04f 32ff 	mov.w	r2, #4294967295
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	43da      	mvns	r2, r3
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	401a      	ands	r2, r3
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021f4:	f04f 31ff 	mov.w	r1, #4294967295
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	fa01 f303 	lsl.w	r3, r1, r3
 80021fe:	43d9      	mvns	r1, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002204:	4313      	orrs	r3, r2
         );
}
 8002206:	4618      	mov	r0, r3
 8002208:	3724      	adds	r7, #36	; 0x24
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
	...

08002214 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3b01      	subs	r3, #1
 8002220:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002224:	d301      	bcc.n	800222a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002226:	2301      	movs	r3, #1
 8002228:	e00f      	b.n	800224a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800222a:	4a0a      	ldr	r2, [pc, #40]	; (8002254 <SysTick_Config+0x40>)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3b01      	subs	r3, #1
 8002230:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002232:	210f      	movs	r1, #15
 8002234:	f04f 30ff 	mov.w	r0, #4294967295
 8002238:	f7ff ff8e 	bl	8002158 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800223c:	4b05      	ldr	r3, [pc, #20]	; (8002254 <SysTick_Config+0x40>)
 800223e:	2200      	movs	r2, #0
 8002240:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002242:	4b04      	ldr	r3, [pc, #16]	; (8002254 <SysTick_Config+0x40>)
 8002244:	2207      	movs	r2, #7
 8002246:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	e000e010 	.word	0xe000e010

08002258 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f7ff ff47 	bl	80020f4 <__NVIC_SetPriorityGrouping>
}
 8002266:	bf00      	nop
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b086      	sub	sp, #24
 8002272:	af00      	add	r7, sp, #0
 8002274:	4603      	mov	r3, r0
 8002276:	60b9      	str	r1, [r7, #8]
 8002278:	607a      	str	r2, [r7, #4]
 800227a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800227c:	2300      	movs	r3, #0
 800227e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002280:	f7ff ff5c 	bl	800213c <__NVIC_GetPriorityGrouping>
 8002284:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	68b9      	ldr	r1, [r7, #8]
 800228a:	6978      	ldr	r0, [r7, #20]
 800228c:	f7ff ff8e 	bl	80021ac <NVIC_EncodePriority>
 8002290:	4602      	mov	r2, r0
 8002292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002296:	4611      	mov	r1, r2
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff ff5d 	bl	8002158 <__NVIC_SetPriority>
}
 800229e:	bf00      	nop
 80022a0:	3718      	adds	r7, #24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b082      	sub	sp, #8
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7ff ffb0 	bl	8002214 <SysTick_Config>
 80022b4:	4603      	mov	r3, r0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
	...

080022c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b087      	sub	sp, #28
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022ca:	2300      	movs	r3, #0
 80022cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ce:	e166      	b.n	800259e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	2101      	movs	r1, #1
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	fa01 f303 	lsl.w	r3, r1, r3
 80022dc:	4013      	ands	r3, r2
 80022de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f000 8158 	beq.w	8002598 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d005      	beq.n	8002300 <HAL_GPIO_Init+0x40>
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f003 0303 	and.w	r3, r3, #3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d130      	bne.n	8002362 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	2203      	movs	r2, #3
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	43db      	mvns	r3, r3
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	4013      	ands	r3, r2
 8002316:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	68da      	ldr	r2, [r3, #12]
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	4313      	orrs	r3, r2
 8002328:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002336:	2201      	movs	r2, #1
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	43db      	mvns	r3, r3
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	4013      	ands	r3, r2
 8002344:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	091b      	lsrs	r3, r3, #4
 800234c:	f003 0201 	and.w	r2, r3, #1
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	4313      	orrs	r3, r2
 800235a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f003 0303 	and.w	r3, r3, #3
 800236a:	2b03      	cmp	r3, #3
 800236c:	d017      	beq.n	800239e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	2203      	movs	r2, #3
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	43db      	mvns	r3, r3
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	4013      	ands	r3, r2
 8002384:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	689a      	ldr	r2, [r3, #8]
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	4313      	orrs	r3, r2
 8002396:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f003 0303 	and.w	r3, r3, #3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d123      	bne.n	80023f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	08da      	lsrs	r2, r3, #3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	3208      	adds	r2, #8
 80023b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	220f      	movs	r2, #15
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43db      	mvns	r3, r3
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	4013      	ands	r3, r2
 80023cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	691a      	ldr	r2, [r3, #16]
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	08da      	lsrs	r2, r3, #3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3208      	adds	r2, #8
 80023ec:	6939      	ldr	r1, [r7, #16]
 80023ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	2203      	movs	r2, #3
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	43db      	mvns	r3, r3
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	4013      	ands	r3, r2
 8002408:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f003 0203 	and.w	r2, r3, #3
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	4313      	orrs	r3, r2
 800241e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800242e:	2b00      	cmp	r3, #0
 8002430:	f000 80b2 	beq.w	8002598 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002434:	4b61      	ldr	r3, [pc, #388]	; (80025bc <HAL_GPIO_Init+0x2fc>)
 8002436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002438:	4a60      	ldr	r2, [pc, #384]	; (80025bc <HAL_GPIO_Init+0x2fc>)
 800243a:	f043 0301 	orr.w	r3, r3, #1
 800243e:	6613      	str	r3, [r2, #96]	; 0x60
 8002440:	4b5e      	ldr	r3, [pc, #376]	; (80025bc <HAL_GPIO_Init+0x2fc>)
 8002442:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	60bb      	str	r3, [r7, #8]
 800244a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800244c:	4a5c      	ldr	r2, [pc, #368]	; (80025c0 <HAL_GPIO_Init+0x300>)
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	089b      	lsrs	r3, r3, #2
 8002452:	3302      	adds	r3, #2
 8002454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002458:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	f003 0303 	and.w	r3, r3, #3
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	220f      	movs	r2, #15
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	43db      	mvns	r3, r3
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	4013      	ands	r3, r2
 800246e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002476:	d02b      	beq.n	80024d0 <HAL_GPIO_Init+0x210>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a52      	ldr	r2, [pc, #328]	; (80025c4 <HAL_GPIO_Init+0x304>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d025      	beq.n	80024cc <HAL_GPIO_Init+0x20c>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a51      	ldr	r2, [pc, #324]	; (80025c8 <HAL_GPIO_Init+0x308>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d01f      	beq.n	80024c8 <HAL_GPIO_Init+0x208>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4a50      	ldr	r2, [pc, #320]	; (80025cc <HAL_GPIO_Init+0x30c>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d019      	beq.n	80024c4 <HAL_GPIO_Init+0x204>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a4f      	ldr	r2, [pc, #316]	; (80025d0 <HAL_GPIO_Init+0x310>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d013      	beq.n	80024c0 <HAL_GPIO_Init+0x200>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a4e      	ldr	r2, [pc, #312]	; (80025d4 <HAL_GPIO_Init+0x314>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d00d      	beq.n	80024bc <HAL_GPIO_Init+0x1fc>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a4d      	ldr	r2, [pc, #308]	; (80025d8 <HAL_GPIO_Init+0x318>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d007      	beq.n	80024b8 <HAL_GPIO_Init+0x1f8>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4a4c      	ldr	r2, [pc, #304]	; (80025dc <HAL_GPIO_Init+0x31c>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d101      	bne.n	80024b4 <HAL_GPIO_Init+0x1f4>
 80024b0:	2307      	movs	r3, #7
 80024b2:	e00e      	b.n	80024d2 <HAL_GPIO_Init+0x212>
 80024b4:	2308      	movs	r3, #8
 80024b6:	e00c      	b.n	80024d2 <HAL_GPIO_Init+0x212>
 80024b8:	2306      	movs	r3, #6
 80024ba:	e00a      	b.n	80024d2 <HAL_GPIO_Init+0x212>
 80024bc:	2305      	movs	r3, #5
 80024be:	e008      	b.n	80024d2 <HAL_GPIO_Init+0x212>
 80024c0:	2304      	movs	r3, #4
 80024c2:	e006      	b.n	80024d2 <HAL_GPIO_Init+0x212>
 80024c4:	2303      	movs	r3, #3
 80024c6:	e004      	b.n	80024d2 <HAL_GPIO_Init+0x212>
 80024c8:	2302      	movs	r3, #2
 80024ca:	e002      	b.n	80024d2 <HAL_GPIO_Init+0x212>
 80024cc:	2301      	movs	r3, #1
 80024ce:	e000      	b.n	80024d2 <HAL_GPIO_Init+0x212>
 80024d0:	2300      	movs	r3, #0
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	f002 0203 	and.w	r2, r2, #3
 80024d8:	0092      	lsls	r2, r2, #2
 80024da:	4093      	lsls	r3, r2
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	4313      	orrs	r3, r2
 80024e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024e2:	4937      	ldr	r1, [pc, #220]	; (80025c0 <HAL_GPIO_Init+0x300>)
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	089b      	lsrs	r3, r3, #2
 80024e8:	3302      	adds	r3, #2
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024f0:	4b3b      	ldr	r3, [pc, #236]	; (80025e0 <HAL_GPIO_Init+0x320>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	43db      	mvns	r3, r3
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	4013      	ands	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d003      	beq.n	8002514 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	4313      	orrs	r3, r2
 8002512:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002514:	4a32      	ldr	r2, [pc, #200]	; (80025e0 <HAL_GPIO_Init+0x320>)
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800251a:	4b31      	ldr	r3, [pc, #196]	; (80025e0 <HAL_GPIO_Init+0x320>)
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	43db      	mvns	r3, r3
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	4013      	ands	r3, r2
 8002528:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	4313      	orrs	r3, r2
 800253c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800253e:	4a28      	ldr	r2, [pc, #160]	; (80025e0 <HAL_GPIO_Init+0x320>)
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002544:	4b26      	ldr	r3, [pc, #152]	; (80025e0 <HAL_GPIO_Init+0x320>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	43db      	mvns	r3, r3
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	4013      	ands	r3, r2
 8002552:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d003      	beq.n	8002568 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	4313      	orrs	r3, r2
 8002566:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002568:	4a1d      	ldr	r2, [pc, #116]	; (80025e0 <HAL_GPIO_Init+0x320>)
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800256e:	4b1c      	ldr	r3, [pc, #112]	; (80025e0 <HAL_GPIO_Init+0x320>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	43db      	mvns	r3, r3
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	4013      	ands	r3, r2
 800257c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	4313      	orrs	r3, r2
 8002590:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002592:	4a13      	ldr	r2, [pc, #76]	; (80025e0 <HAL_GPIO_Init+0x320>)
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	3301      	adds	r3, #1
 800259c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	fa22 f303 	lsr.w	r3, r2, r3
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f47f ae91 	bne.w	80022d0 <HAL_GPIO_Init+0x10>
  }
}
 80025ae:	bf00      	nop
 80025b0:	bf00      	nop
 80025b2:	371c      	adds	r7, #28
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	40021000 	.word	0x40021000
 80025c0:	40010000 	.word	0x40010000
 80025c4:	48000400 	.word	0x48000400
 80025c8:	48000800 	.word	0x48000800
 80025cc:	48000c00 	.word	0x48000c00
 80025d0:	48001000 	.word	0x48001000
 80025d4:	48001400 	.word	0x48001400
 80025d8:	48001800 	.word	0x48001800
 80025dc:	48001c00 	.word	0x48001c00
 80025e0:	40010400 	.word	0x40010400

080025e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	460b      	mov	r3, r1
 80025ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	691a      	ldr	r2, [r3, #16]
 80025f4:	887b      	ldrh	r3, [r7, #2]
 80025f6:	4013      	ands	r3, r2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d002      	beq.n	8002602 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025fc:	2301      	movs	r3, #1
 80025fe:	73fb      	strb	r3, [r7, #15]
 8002600:	e001      	b.n	8002606 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002602:	2300      	movs	r3, #0
 8002604:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002606:	7bfb      	ldrb	r3, [r7, #15]
}
 8002608:	4618      	mov	r0, r3
 800260a:	3714      	adds	r7, #20
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	460b      	mov	r3, r1
 800261e:	807b      	strh	r3, [r7, #2]
 8002620:	4613      	mov	r3, r2
 8002622:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002624:	787b      	ldrb	r3, [r7, #1]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d003      	beq.n	8002632 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800262a:	887a      	ldrh	r2, [r7, #2]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002630:	e002      	b.n	8002638 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002632:	887a      	ldrh	r2, [r7, #2]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e08d      	b.n	8002772 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d106      	bne.n	8002670 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f7ff f82e 	bl	80016cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2224      	movs	r2, #36	; 0x24
 8002674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f022 0201 	bic.w	r2, r2, #1
 8002686:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685a      	ldr	r2, [r3, #4]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002694:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d107      	bne.n	80026be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	689a      	ldr	r2, [r3, #8]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026ba:	609a      	str	r2, [r3, #8]
 80026bc:	e006      	b.n	80026cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689a      	ldr	r2, [r3, #8]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80026ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d108      	bne.n	80026e6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026e2:	605a      	str	r2, [r3, #4]
 80026e4:	e007      	b.n	80026f6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	685a      	ldr	r2, [r3, #4]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	6812      	ldr	r2, [r2, #0]
 8002700:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002704:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002708:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68da      	ldr	r2, [r3, #12]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002718:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	691a      	ldr	r2, [r3, #16]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	430a      	orrs	r2, r1
 8002732:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	69d9      	ldr	r1, [r3, #28]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a1a      	ldr	r2, [r3, #32]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	430a      	orrs	r2, r1
 8002742:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f042 0201 	orr.w	r2, r2, #1
 8002752:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2220      	movs	r2, #32
 800275e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800277a:	b480      	push	{r7}
 800277c:	b083      	sub	sp, #12
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
 8002782:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b20      	cmp	r3, #32
 800278e:	d138      	bne.n	8002802 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002796:	2b01      	cmp	r3, #1
 8002798:	d101      	bne.n	800279e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800279a:	2302      	movs	r3, #2
 800279c:	e032      	b.n	8002804 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2224      	movs	r2, #36	; 0x24
 80027aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 0201 	bic.w	r2, r2, #1
 80027bc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80027cc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	6819      	ldr	r1, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	430a      	orrs	r2, r1
 80027dc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f042 0201 	orr.w	r2, r2, #1
 80027ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2220      	movs	r2, #32
 80027f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027fe:	2300      	movs	r3, #0
 8002800:	e000      	b.n	8002804 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002802:	2302      	movs	r3, #2
  }
}
 8002804:	4618      	mov	r0, r3
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b20      	cmp	r3, #32
 8002824:	d139      	bne.n	800289a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800282c:	2b01      	cmp	r3, #1
 800282e:	d101      	bne.n	8002834 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002830:	2302      	movs	r3, #2
 8002832:	e033      	b.n	800289c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2224      	movs	r2, #36	; 0x24
 8002840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f022 0201 	bic.w	r2, r2, #1
 8002852:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002862:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	021b      	lsls	r3, r3, #8
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	4313      	orrs	r3, r2
 800286c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f042 0201 	orr.w	r2, r2, #1
 8002884:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2220      	movs	r2, #32
 800288a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002896:	2300      	movs	r3, #0
 8002898:	e000      	b.n	800289c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800289a:	2302      	movs	r3, #2
  }
}
 800289c:	4618      	mov	r0, r3
 800289e:	3714      	adds	r7, #20
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80028a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028aa:	b08f      	sub	sp, #60	; 0x3c
 80028ac:	af0a      	add	r7, sp, #40	; 0x28
 80028ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e116      	b.n	8002ae8 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d106      	bne.n	80028da <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f7ff f949 	bl	8001b6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2203      	movs	r2, #3
 80028de:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d102      	bne.n	80028f4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f006 fb11 	bl	8008f20 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	603b      	str	r3, [r7, #0]
 8002904:	687e      	ldr	r6, [r7, #4]
 8002906:	466d      	mov	r5, sp
 8002908:	f106 0410 	add.w	r4, r6, #16
 800290c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800290e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002910:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002912:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002914:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002918:	e885 0003 	stmia.w	r5, {r0, r1}
 800291c:	1d33      	adds	r3, r6, #4
 800291e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002920:	6838      	ldr	r0, [r7, #0]
 8002922:	f006 fad1 	bl	8008ec8 <USB_CoreInit>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d005      	beq.n	8002938 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2202      	movs	r2, #2
 8002930:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e0d7      	b.n	8002ae8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2100      	movs	r1, #0
 800293e:	4618      	mov	r0, r3
 8002940:	f006 faff 	bl	8008f42 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002944:	2300      	movs	r3, #0
 8002946:	73fb      	strb	r3, [r7, #15]
 8002948:	e04a      	b.n	80029e0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800294a:	7bfa      	ldrb	r2, [r7, #15]
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	4613      	mov	r3, r2
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	4413      	add	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	440b      	add	r3, r1
 8002958:	333d      	adds	r3, #61	; 0x3d
 800295a:	2201      	movs	r2, #1
 800295c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800295e:	7bfa      	ldrb	r2, [r7, #15]
 8002960:	6879      	ldr	r1, [r7, #4]
 8002962:	4613      	mov	r3, r2
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	4413      	add	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	440b      	add	r3, r1
 800296c:	333c      	adds	r3, #60	; 0x3c
 800296e:	7bfa      	ldrb	r2, [r7, #15]
 8002970:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002972:	7bfa      	ldrb	r2, [r7, #15]
 8002974:	7bfb      	ldrb	r3, [r7, #15]
 8002976:	b298      	uxth	r0, r3
 8002978:	6879      	ldr	r1, [r7, #4]
 800297a:	4613      	mov	r3, r2
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	4413      	add	r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	440b      	add	r3, r1
 8002984:	3356      	adds	r3, #86	; 0x56
 8002986:	4602      	mov	r2, r0
 8002988:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800298a:	7bfa      	ldrb	r2, [r7, #15]
 800298c:	6879      	ldr	r1, [r7, #4]
 800298e:	4613      	mov	r3, r2
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	4413      	add	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	440b      	add	r3, r1
 8002998:	3340      	adds	r3, #64	; 0x40
 800299a:	2200      	movs	r2, #0
 800299c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800299e:	7bfa      	ldrb	r2, [r7, #15]
 80029a0:	6879      	ldr	r1, [r7, #4]
 80029a2:	4613      	mov	r3, r2
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	4413      	add	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	440b      	add	r3, r1
 80029ac:	3344      	adds	r3, #68	; 0x44
 80029ae:	2200      	movs	r2, #0
 80029b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80029b2:	7bfa      	ldrb	r2, [r7, #15]
 80029b4:	6879      	ldr	r1, [r7, #4]
 80029b6:	4613      	mov	r3, r2
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	4413      	add	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	440b      	add	r3, r1
 80029c0:	3348      	adds	r3, #72	; 0x48
 80029c2:	2200      	movs	r2, #0
 80029c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80029c6:	7bfa      	ldrb	r2, [r7, #15]
 80029c8:	6879      	ldr	r1, [r7, #4]
 80029ca:	4613      	mov	r3, r2
 80029cc:	00db      	lsls	r3, r3, #3
 80029ce:	4413      	add	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	440b      	add	r3, r1
 80029d4:	334c      	adds	r3, #76	; 0x4c
 80029d6:	2200      	movs	r2, #0
 80029d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029da:	7bfb      	ldrb	r3, [r7, #15]
 80029dc:	3301      	adds	r3, #1
 80029de:	73fb      	strb	r3, [r7, #15]
 80029e0:	7bfa      	ldrb	r2, [r7, #15]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d3af      	bcc.n	800294a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029ea:	2300      	movs	r3, #0
 80029ec:	73fb      	strb	r3, [r7, #15]
 80029ee:	e044      	b.n	8002a7a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80029f0:	7bfa      	ldrb	r2, [r7, #15]
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	4613      	mov	r3, r2
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	4413      	add	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	440b      	add	r3, r1
 80029fe:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002a02:	2200      	movs	r2, #0
 8002a04:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a06:	7bfa      	ldrb	r2, [r7, #15]
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	4413      	add	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	440b      	add	r3, r1
 8002a14:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002a18:	7bfa      	ldrb	r2, [r7, #15]
 8002a1a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a1c:	7bfa      	ldrb	r2, [r7, #15]
 8002a1e:	6879      	ldr	r1, [r7, #4]
 8002a20:	4613      	mov	r3, r2
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	4413      	add	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	440b      	add	r3, r1
 8002a2a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002a2e:	2200      	movs	r2, #0
 8002a30:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a32:	7bfa      	ldrb	r2, [r7, #15]
 8002a34:	6879      	ldr	r1, [r7, #4]
 8002a36:	4613      	mov	r3, r2
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	4413      	add	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	440b      	add	r3, r1
 8002a40:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a48:	7bfa      	ldrb	r2, [r7, #15]
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	4413      	add	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	440b      	add	r3, r1
 8002a56:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a5e:	7bfa      	ldrb	r2, [r7, #15]
 8002a60:	6879      	ldr	r1, [r7, #4]
 8002a62:	4613      	mov	r3, r2
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	4413      	add	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	440b      	add	r3, r1
 8002a6c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a74:	7bfb      	ldrb	r3, [r7, #15]
 8002a76:	3301      	adds	r3, #1
 8002a78:	73fb      	strb	r3, [r7, #15]
 8002a7a:	7bfa      	ldrb	r2, [r7, #15]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d3b5      	bcc.n	80029f0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	603b      	str	r3, [r7, #0]
 8002a8a:	687e      	ldr	r6, [r7, #4]
 8002a8c:	466d      	mov	r5, sp
 8002a8e:	f106 0410 	add.w	r4, r6, #16
 8002a92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a9a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a9e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002aa2:	1d33      	adds	r3, r6, #4
 8002aa4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002aa6:	6838      	ldr	r0, [r7, #0]
 8002aa8:	f006 fa98 	bl	8008fdc <USB_DevInit>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d005      	beq.n	8002abe <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2202      	movs	r2, #2
 8002ab6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e014      	b.n	8002ae8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d102      	bne.n	8002adc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 f80a 	bl	8002af0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f006 fc3a 	bl	800935a <USB_DevDisconnect>

  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3714      	adds	r7, #20
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002af0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b22:	f043 0303 	orr.w	r3, r3, #3
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3714      	adds	r7, #20
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b3c:	4b0d      	ldr	r3, [pc, #52]	; (8002b74 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b48:	d102      	bne.n	8002b50 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002b4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b4e:	e00b      	b.n	8002b68 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002b50:	4b08      	ldr	r3, [pc, #32]	; (8002b74 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002b52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b5e:	d102      	bne.n	8002b66 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002b60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b64:	e000      	b.n	8002b68 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002b66:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	40007000 	.word	0x40007000

08002b78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d141      	bne.n	8002c0a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b86:	4b4b      	ldr	r3, [pc, #300]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b92:	d131      	bne.n	8002bf8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b94:	4b47      	ldr	r3, [pc, #284]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b9a:	4a46      	ldr	r2, [pc, #280]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ba0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ba4:	4b43      	ldr	r3, [pc, #268]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002bac:	4a41      	ldr	r2, [pc, #260]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bb2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002bb4:	4b40      	ldr	r3, [pc, #256]	; (8002cb8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2232      	movs	r2, #50	; 0x32
 8002bba:	fb02 f303 	mul.w	r3, r2, r3
 8002bbe:	4a3f      	ldr	r2, [pc, #252]	; (8002cbc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc4:	0c9b      	lsrs	r3, r3, #18
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bca:	e002      	b.n	8002bd2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bd2:	4b38      	ldr	r3, [pc, #224]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bde:	d102      	bne.n	8002be6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1f2      	bne.n	8002bcc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002be6:	4b33      	ldr	r3, [pc, #204]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bf2:	d158      	bne.n	8002ca6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e057      	b.n	8002ca8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002bf8:	4b2e      	ldr	r3, [pc, #184]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bfe:	4a2d      	ldr	r2, [pc, #180]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002c08:	e04d      	b.n	8002ca6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c10:	d141      	bne.n	8002c96 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c12:	4b28      	ldr	r3, [pc, #160]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c1e:	d131      	bne.n	8002c84 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c20:	4b24      	ldr	r3, [pc, #144]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c26:	4a23      	ldr	r2, [pc, #140]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c30:	4b20      	ldr	r3, [pc, #128]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c38:	4a1e      	ldr	r2, [pc, #120]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c3e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002c40:	4b1d      	ldr	r3, [pc, #116]	; (8002cb8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2232      	movs	r2, #50	; 0x32
 8002c46:	fb02 f303 	mul.w	r3, r2, r3
 8002c4a:	4a1c      	ldr	r2, [pc, #112]	; (8002cbc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c50:	0c9b      	lsrs	r3, r3, #18
 8002c52:	3301      	adds	r3, #1
 8002c54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c56:	e002      	b.n	8002c5e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c5e:	4b15      	ldr	r3, [pc, #84]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c6a:	d102      	bne.n	8002c72 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1f2      	bne.n	8002c58 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c72:	4b10      	ldr	r3, [pc, #64]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c7e:	d112      	bne.n	8002ca6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e011      	b.n	8002ca8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c84:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c8a:	4a0a      	ldr	r2, [pc, #40]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002c94:	e007      	b.n	8002ca6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c96:	4b07      	ldr	r3, [pc, #28]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c9e:	4a05      	ldr	r2, [pc, #20]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ca0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ca4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr
 8002cb4:	40007000 	.word	0x40007000
 8002cb8:	20000000 	.word	0x20000000
 8002cbc:	431bde83 	.word	0x431bde83

08002cc0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002cc4:	4b05      	ldr	r3, [pc, #20]	; (8002cdc <HAL_PWREx_EnableVddUSB+0x1c>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	4a04      	ldr	r2, [pc, #16]	; (8002cdc <HAL_PWREx_EnableVddUSB+0x1c>)
 8002cca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cce:	6053      	str	r3, [r2, #4]
}
 8002cd0:	bf00      	nop
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	40007000 	.word	0x40007000

08002ce0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002ce4:	4b05      	ldr	r3, [pc, #20]	; (8002cfc <HAL_PWREx_EnableVddIO2+0x1c>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	4a04      	ldr	r2, [pc, #16]	; (8002cfc <HAL_PWREx_EnableVddIO2+0x1c>)
 8002cea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cee:	6053      	str	r3, [r2, #4]
}
 8002cf0:	bf00      	nop
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	40007000 	.word	0x40007000

08002d00 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b088      	sub	sp, #32
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d102      	bne.n	8002d14 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	f000 bc08 	b.w	8003524 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d14:	4b96      	ldr	r3, [pc, #600]	; (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f003 030c 	and.w	r3, r3, #12
 8002d1c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d1e:	4b94      	ldr	r3, [pc, #592]	; (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	f003 0303 	and.w	r3, r3, #3
 8002d26:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0310 	and.w	r3, r3, #16
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f000 80e4 	beq.w	8002efe <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d007      	beq.n	8002d4c <HAL_RCC_OscConfig+0x4c>
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	2b0c      	cmp	r3, #12
 8002d40:	f040 808b 	bne.w	8002e5a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	f040 8087 	bne.w	8002e5a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d4c:	4b88      	ldr	r3, [pc, #544]	; (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d005      	beq.n	8002d64 <HAL_RCC_OscConfig+0x64>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d101      	bne.n	8002d64 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e3df      	b.n	8003524 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a1a      	ldr	r2, [r3, #32]
 8002d68:	4b81      	ldr	r3, [pc, #516]	; (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0308 	and.w	r3, r3, #8
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d004      	beq.n	8002d7e <HAL_RCC_OscConfig+0x7e>
 8002d74:	4b7e      	ldr	r3, [pc, #504]	; (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d7c:	e005      	b.n	8002d8a <HAL_RCC_OscConfig+0x8a>
 8002d7e:	4b7c      	ldr	r3, [pc, #496]	; (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002d80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d84:	091b      	lsrs	r3, r3, #4
 8002d86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d223      	bcs.n	8002dd6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f000 fdca 	bl	800392c <RCC_SetFlashLatencyFromMSIRange>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e3c0      	b.n	8003524 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002da2:	4b73      	ldr	r3, [pc, #460]	; (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a72      	ldr	r2, [pc, #456]	; (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002da8:	f043 0308 	orr.w	r3, r3, #8
 8002dac:	6013      	str	r3, [r2, #0]
 8002dae:	4b70      	ldr	r3, [pc, #448]	; (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	496d      	ldr	r1, [pc, #436]	; (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dc0:	4b6b      	ldr	r3, [pc, #428]	; (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	69db      	ldr	r3, [r3, #28]
 8002dcc:	021b      	lsls	r3, r3, #8
 8002dce:	4968      	ldr	r1, [pc, #416]	; (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	604b      	str	r3, [r1, #4]
 8002dd4:	e025      	b.n	8002e22 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dd6:	4b66      	ldr	r3, [pc, #408]	; (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a65      	ldr	r2, [pc, #404]	; (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002ddc:	f043 0308 	orr.w	r3, r3, #8
 8002de0:	6013      	str	r3, [r2, #0]
 8002de2:	4b63      	ldr	r3, [pc, #396]	; (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	4960      	ldr	r1, [pc, #384]	; (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002df4:	4b5e      	ldr	r3, [pc, #376]	; (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	69db      	ldr	r3, [r3, #28]
 8002e00:	021b      	lsls	r3, r3, #8
 8002e02:	495b      	ldr	r1, [pc, #364]	; (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d109      	bne.n	8002e22 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a1b      	ldr	r3, [r3, #32]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f000 fd8a 	bl	800392c <RCC_SetFlashLatencyFromMSIRange>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e380      	b.n	8003524 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e22:	f000 fcc1 	bl	80037a8 <HAL_RCC_GetSysClockFreq>
 8002e26:	4602      	mov	r2, r0
 8002e28:	4b51      	ldr	r3, [pc, #324]	; (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	091b      	lsrs	r3, r3, #4
 8002e2e:	f003 030f 	and.w	r3, r3, #15
 8002e32:	4950      	ldr	r1, [pc, #320]	; (8002f74 <HAL_RCC_OscConfig+0x274>)
 8002e34:	5ccb      	ldrb	r3, [r1, r3]
 8002e36:	f003 031f 	and.w	r3, r3, #31
 8002e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e3e:	4a4e      	ldr	r2, [pc, #312]	; (8002f78 <HAL_RCC_OscConfig+0x278>)
 8002e40:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e42:	4b4e      	ldr	r3, [pc, #312]	; (8002f7c <HAL_RCC_OscConfig+0x27c>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7ff f8d4 	bl	8001ff4 <HAL_InitTick>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002e50:	7bfb      	ldrb	r3, [r7, #15]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d052      	beq.n	8002efc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002e56:	7bfb      	ldrb	r3, [r7, #15]
 8002e58:	e364      	b.n	8003524 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d032      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e62:	4b43      	ldr	r3, [pc, #268]	; (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a42      	ldr	r2, [pc, #264]	; (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002e68:	f043 0301 	orr.w	r3, r3, #1
 8002e6c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e6e:	f7ff f911 	bl	8002094 <HAL_GetTick>
 8002e72:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e74:	e008      	b.n	8002e88 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e76:	f7ff f90d 	bl	8002094 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e34d      	b.n	8003524 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e88:	4b39      	ldr	r3, [pc, #228]	; (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d0f0      	beq.n	8002e76 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e94:	4b36      	ldr	r3, [pc, #216]	; (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a35      	ldr	r2, [pc, #212]	; (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002e9a:	f043 0308 	orr.w	r3, r3, #8
 8002e9e:	6013      	str	r3, [r2, #0]
 8002ea0:	4b33      	ldr	r3, [pc, #204]	; (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	4930      	ldr	r1, [pc, #192]	; (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002eb2:	4b2f      	ldr	r3, [pc, #188]	; (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	021b      	lsls	r3, r3, #8
 8002ec0:	492b      	ldr	r1, [pc, #172]	; (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	604b      	str	r3, [r1, #4]
 8002ec6:	e01a      	b.n	8002efe <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ec8:	4b29      	ldr	r3, [pc, #164]	; (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a28      	ldr	r2, [pc, #160]	; (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002ece:	f023 0301 	bic.w	r3, r3, #1
 8002ed2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ed4:	f7ff f8de 	bl	8002094 <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002edc:	f7ff f8da 	bl	8002094 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e31a      	b.n	8003524 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002eee:	4b20      	ldr	r3, [pc, #128]	; (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1f0      	bne.n	8002edc <HAL_RCC_OscConfig+0x1dc>
 8002efa:	e000      	b.n	8002efe <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002efc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d073      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	2b08      	cmp	r3, #8
 8002f0e:	d005      	beq.n	8002f1c <HAL_RCC_OscConfig+0x21c>
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	2b0c      	cmp	r3, #12
 8002f14:	d10e      	bne.n	8002f34 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	2b03      	cmp	r3, #3
 8002f1a:	d10b      	bne.n	8002f34 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f1c:	4b14      	ldr	r3, [pc, #80]	; (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d063      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x2f0>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d15f      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e2f7      	b.n	8003524 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f3c:	d106      	bne.n	8002f4c <HAL_RCC_OscConfig+0x24c>
 8002f3e:	4b0c      	ldr	r3, [pc, #48]	; (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a0b      	ldr	r2, [pc, #44]	; (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f48:	6013      	str	r3, [r2, #0]
 8002f4a:	e025      	b.n	8002f98 <HAL_RCC_OscConfig+0x298>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f54:	d114      	bne.n	8002f80 <HAL_RCC_OscConfig+0x280>
 8002f56:	4b06      	ldr	r3, [pc, #24]	; (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a05      	ldr	r2, [pc, #20]	; (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002f5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f60:	6013      	str	r3, [r2, #0]
 8002f62:	4b03      	ldr	r3, [pc, #12]	; (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a02      	ldr	r2, [pc, #8]	; (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f6c:	6013      	str	r3, [r2, #0]
 8002f6e:	e013      	b.n	8002f98 <HAL_RCC_OscConfig+0x298>
 8002f70:	40021000 	.word	0x40021000
 8002f74:	08009da8 	.word	0x08009da8
 8002f78:	20000000 	.word	0x20000000
 8002f7c:	20000004 	.word	0x20000004
 8002f80:	4ba0      	ldr	r3, [pc, #640]	; (8003204 <HAL_RCC_OscConfig+0x504>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a9f      	ldr	r2, [pc, #636]	; (8003204 <HAL_RCC_OscConfig+0x504>)
 8002f86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f8a:	6013      	str	r3, [r2, #0]
 8002f8c:	4b9d      	ldr	r3, [pc, #628]	; (8003204 <HAL_RCC_OscConfig+0x504>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a9c      	ldr	r2, [pc, #624]	; (8003204 <HAL_RCC_OscConfig+0x504>)
 8002f92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d013      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa0:	f7ff f878 	bl	8002094 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fa8:	f7ff f874 	bl	8002094 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b64      	cmp	r3, #100	; 0x64
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e2b4      	b.n	8003524 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fba:	4b92      	ldr	r3, [pc, #584]	; (8003204 <HAL_RCC_OscConfig+0x504>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d0f0      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x2a8>
 8002fc6:	e014      	b.n	8002ff2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc8:	f7ff f864 	bl	8002094 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fd0:	f7ff f860 	bl	8002094 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b64      	cmp	r3, #100	; 0x64
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e2a0      	b.n	8003524 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fe2:	4b88      	ldr	r3, [pc, #544]	; (8003204 <HAL_RCC_OscConfig+0x504>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1f0      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x2d0>
 8002fee:	e000      	b.n	8002ff2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ff0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d060      	beq.n	80030c0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	2b04      	cmp	r3, #4
 8003002:	d005      	beq.n	8003010 <HAL_RCC_OscConfig+0x310>
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	2b0c      	cmp	r3, #12
 8003008:	d119      	bne.n	800303e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	2b02      	cmp	r3, #2
 800300e:	d116      	bne.n	800303e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003010:	4b7c      	ldr	r3, [pc, #496]	; (8003204 <HAL_RCC_OscConfig+0x504>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003018:	2b00      	cmp	r3, #0
 800301a:	d005      	beq.n	8003028 <HAL_RCC_OscConfig+0x328>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d101      	bne.n	8003028 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e27d      	b.n	8003524 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003028:	4b76      	ldr	r3, [pc, #472]	; (8003204 <HAL_RCC_OscConfig+0x504>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	061b      	lsls	r3, r3, #24
 8003036:	4973      	ldr	r1, [pc, #460]	; (8003204 <HAL_RCC_OscConfig+0x504>)
 8003038:	4313      	orrs	r3, r2
 800303a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800303c:	e040      	b.n	80030c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d023      	beq.n	800308e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003046:	4b6f      	ldr	r3, [pc, #444]	; (8003204 <HAL_RCC_OscConfig+0x504>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a6e      	ldr	r2, [pc, #440]	; (8003204 <HAL_RCC_OscConfig+0x504>)
 800304c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003050:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003052:	f7ff f81f 	bl	8002094 <HAL_GetTick>
 8003056:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003058:	e008      	b.n	800306c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800305a:	f7ff f81b 	bl	8002094 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b02      	cmp	r3, #2
 8003066:	d901      	bls.n	800306c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e25b      	b.n	8003524 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800306c:	4b65      	ldr	r3, [pc, #404]	; (8003204 <HAL_RCC_OscConfig+0x504>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003074:	2b00      	cmp	r3, #0
 8003076:	d0f0      	beq.n	800305a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003078:	4b62      	ldr	r3, [pc, #392]	; (8003204 <HAL_RCC_OscConfig+0x504>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	061b      	lsls	r3, r3, #24
 8003086:	495f      	ldr	r1, [pc, #380]	; (8003204 <HAL_RCC_OscConfig+0x504>)
 8003088:	4313      	orrs	r3, r2
 800308a:	604b      	str	r3, [r1, #4]
 800308c:	e018      	b.n	80030c0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800308e:	4b5d      	ldr	r3, [pc, #372]	; (8003204 <HAL_RCC_OscConfig+0x504>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a5c      	ldr	r2, [pc, #368]	; (8003204 <HAL_RCC_OscConfig+0x504>)
 8003094:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003098:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309a:	f7fe fffb 	bl	8002094 <HAL_GetTick>
 800309e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030a0:	e008      	b.n	80030b4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030a2:	f7fe fff7 	bl	8002094 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d901      	bls.n	80030b4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e237      	b.n	8003524 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030b4:	4b53      	ldr	r3, [pc, #332]	; (8003204 <HAL_RCC_OscConfig+0x504>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d1f0      	bne.n	80030a2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0308 	and.w	r3, r3, #8
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d03c      	beq.n	8003146 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	695b      	ldr	r3, [r3, #20]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d01c      	beq.n	800310e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030d4:	4b4b      	ldr	r3, [pc, #300]	; (8003204 <HAL_RCC_OscConfig+0x504>)
 80030d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030da:	4a4a      	ldr	r2, [pc, #296]	; (8003204 <HAL_RCC_OscConfig+0x504>)
 80030dc:	f043 0301 	orr.w	r3, r3, #1
 80030e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e4:	f7fe ffd6 	bl	8002094 <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030ea:	e008      	b.n	80030fe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030ec:	f7fe ffd2 	bl	8002094 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e212      	b.n	8003524 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030fe:	4b41      	ldr	r3, [pc, #260]	; (8003204 <HAL_RCC_OscConfig+0x504>)
 8003100:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d0ef      	beq.n	80030ec <HAL_RCC_OscConfig+0x3ec>
 800310c:	e01b      	b.n	8003146 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800310e:	4b3d      	ldr	r3, [pc, #244]	; (8003204 <HAL_RCC_OscConfig+0x504>)
 8003110:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003114:	4a3b      	ldr	r2, [pc, #236]	; (8003204 <HAL_RCC_OscConfig+0x504>)
 8003116:	f023 0301 	bic.w	r3, r3, #1
 800311a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800311e:	f7fe ffb9 	bl	8002094 <HAL_GetTick>
 8003122:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003124:	e008      	b.n	8003138 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003126:	f7fe ffb5 	bl	8002094 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d901      	bls.n	8003138 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e1f5      	b.n	8003524 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003138:	4b32      	ldr	r3, [pc, #200]	; (8003204 <HAL_RCC_OscConfig+0x504>)
 800313a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1ef      	bne.n	8003126 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0304 	and.w	r3, r3, #4
 800314e:	2b00      	cmp	r3, #0
 8003150:	f000 80a6 	beq.w	80032a0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003154:	2300      	movs	r3, #0
 8003156:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003158:	4b2a      	ldr	r3, [pc, #168]	; (8003204 <HAL_RCC_OscConfig+0x504>)
 800315a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800315c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d10d      	bne.n	8003180 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003164:	4b27      	ldr	r3, [pc, #156]	; (8003204 <HAL_RCC_OscConfig+0x504>)
 8003166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003168:	4a26      	ldr	r2, [pc, #152]	; (8003204 <HAL_RCC_OscConfig+0x504>)
 800316a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800316e:	6593      	str	r3, [r2, #88]	; 0x58
 8003170:	4b24      	ldr	r3, [pc, #144]	; (8003204 <HAL_RCC_OscConfig+0x504>)
 8003172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003178:	60bb      	str	r3, [r7, #8]
 800317a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800317c:	2301      	movs	r3, #1
 800317e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003180:	4b21      	ldr	r3, [pc, #132]	; (8003208 <HAL_RCC_OscConfig+0x508>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003188:	2b00      	cmp	r3, #0
 800318a:	d118      	bne.n	80031be <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800318c:	4b1e      	ldr	r3, [pc, #120]	; (8003208 <HAL_RCC_OscConfig+0x508>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a1d      	ldr	r2, [pc, #116]	; (8003208 <HAL_RCC_OscConfig+0x508>)
 8003192:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003196:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003198:	f7fe ff7c 	bl	8002094 <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800319e:	e008      	b.n	80031b2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031a0:	f7fe ff78 	bl	8002094 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e1b8      	b.n	8003524 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031b2:	4b15      	ldr	r3, [pc, #84]	; (8003208 <HAL_RCC_OscConfig+0x508>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d0f0      	beq.n	80031a0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d108      	bne.n	80031d8 <HAL_RCC_OscConfig+0x4d8>
 80031c6:	4b0f      	ldr	r3, [pc, #60]	; (8003204 <HAL_RCC_OscConfig+0x504>)
 80031c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031cc:	4a0d      	ldr	r2, [pc, #52]	; (8003204 <HAL_RCC_OscConfig+0x504>)
 80031ce:	f043 0301 	orr.w	r3, r3, #1
 80031d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031d6:	e029      	b.n	800322c <HAL_RCC_OscConfig+0x52c>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	2b05      	cmp	r3, #5
 80031de:	d115      	bne.n	800320c <HAL_RCC_OscConfig+0x50c>
 80031e0:	4b08      	ldr	r3, [pc, #32]	; (8003204 <HAL_RCC_OscConfig+0x504>)
 80031e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e6:	4a07      	ldr	r2, [pc, #28]	; (8003204 <HAL_RCC_OscConfig+0x504>)
 80031e8:	f043 0304 	orr.w	r3, r3, #4
 80031ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031f0:	4b04      	ldr	r3, [pc, #16]	; (8003204 <HAL_RCC_OscConfig+0x504>)
 80031f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f6:	4a03      	ldr	r2, [pc, #12]	; (8003204 <HAL_RCC_OscConfig+0x504>)
 80031f8:	f043 0301 	orr.w	r3, r3, #1
 80031fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003200:	e014      	b.n	800322c <HAL_RCC_OscConfig+0x52c>
 8003202:	bf00      	nop
 8003204:	40021000 	.word	0x40021000
 8003208:	40007000 	.word	0x40007000
 800320c:	4b9d      	ldr	r3, [pc, #628]	; (8003484 <HAL_RCC_OscConfig+0x784>)
 800320e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003212:	4a9c      	ldr	r2, [pc, #624]	; (8003484 <HAL_RCC_OscConfig+0x784>)
 8003214:	f023 0301 	bic.w	r3, r3, #1
 8003218:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800321c:	4b99      	ldr	r3, [pc, #612]	; (8003484 <HAL_RCC_OscConfig+0x784>)
 800321e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003222:	4a98      	ldr	r2, [pc, #608]	; (8003484 <HAL_RCC_OscConfig+0x784>)
 8003224:	f023 0304 	bic.w	r3, r3, #4
 8003228:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d016      	beq.n	8003262 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003234:	f7fe ff2e 	bl	8002094 <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800323a:	e00a      	b.n	8003252 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800323c:	f7fe ff2a 	bl	8002094 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	f241 3288 	movw	r2, #5000	; 0x1388
 800324a:	4293      	cmp	r3, r2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e168      	b.n	8003524 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003252:	4b8c      	ldr	r3, [pc, #560]	; (8003484 <HAL_RCC_OscConfig+0x784>)
 8003254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d0ed      	beq.n	800323c <HAL_RCC_OscConfig+0x53c>
 8003260:	e015      	b.n	800328e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003262:	f7fe ff17 	bl	8002094 <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003268:	e00a      	b.n	8003280 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800326a:	f7fe ff13 	bl	8002094 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	f241 3288 	movw	r2, #5000	; 0x1388
 8003278:	4293      	cmp	r3, r2
 800327a:	d901      	bls.n	8003280 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e151      	b.n	8003524 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003280:	4b80      	ldr	r3, [pc, #512]	; (8003484 <HAL_RCC_OscConfig+0x784>)
 8003282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1ed      	bne.n	800326a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800328e:	7ffb      	ldrb	r3, [r7, #31]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d105      	bne.n	80032a0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003294:	4b7b      	ldr	r3, [pc, #492]	; (8003484 <HAL_RCC_OscConfig+0x784>)
 8003296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003298:	4a7a      	ldr	r2, [pc, #488]	; (8003484 <HAL_RCC_OscConfig+0x784>)
 800329a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800329e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0320 	and.w	r3, r3, #32
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d03c      	beq.n	8003326 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d01c      	beq.n	80032ee <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80032b4:	4b73      	ldr	r3, [pc, #460]	; (8003484 <HAL_RCC_OscConfig+0x784>)
 80032b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032ba:	4a72      	ldr	r2, [pc, #456]	; (8003484 <HAL_RCC_OscConfig+0x784>)
 80032bc:	f043 0301 	orr.w	r3, r3, #1
 80032c0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c4:	f7fe fee6 	bl	8002094 <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032cc:	f7fe fee2 	bl	8002094 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e122      	b.n	8003524 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80032de:	4b69      	ldr	r3, [pc, #420]	; (8003484 <HAL_RCC_OscConfig+0x784>)
 80032e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d0ef      	beq.n	80032cc <HAL_RCC_OscConfig+0x5cc>
 80032ec:	e01b      	b.n	8003326 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80032ee:	4b65      	ldr	r3, [pc, #404]	; (8003484 <HAL_RCC_OscConfig+0x784>)
 80032f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032f4:	4a63      	ldr	r2, [pc, #396]	; (8003484 <HAL_RCC_OscConfig+0x784>)
 80032f6:	f023 0301 	bic.w	r3, r3, #1
 80032fa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032fe:	f7fe fec9 	bl	8002094 <HAL_GetTick>
 8003302:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003304:	e008      	b.n	8003318 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003306:	f7fe fec5 	bl	8002094 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e105      	b.n	8003524 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003318:	4b5a      	ldr	r3, [pc, #360]	; (8003484 <HAL_RCC_OscConfig+0x784>)
 800331a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1ef      	bne.n	8003306 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332a:	2b00      	cmp	r3, #0
 800332c:	f000 80f9 	beq.w	8003522 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003334:	2b02      	cmp	r3, #2
 8003336:	f040 80cf 	bne.w	80034d8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800333a:	4b52      	ldr	r3, [pc, #328]	; (8003484 <HAL_RCC_OscConfig+0x784>)
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	f003 0203 	and.w	r2, r3, #3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334a:	429a      	cmp	r2, r3
 800334c:	d12c      	bne.n	80033a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003358:	3b01      	subs	r3, #1
 800335a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800335c:	429a      	cmp	r2, r3
 800335e:	d123      	bne.n	80033a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800336a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800336c:	429a      	cmp	r2, r3
 800336e:	d11b      	bne.n	80033a8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800337c:	429a      	cmp	r2, r3
 800337e:	d113      	bne.n	80033a8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800338a:	085b      	lsrs	r3, r3, #1
 800338c:	3b01      	subs	r3, #1
 800338e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003390:	429a      	cmp	r2, r3
 8003392:	d109      	bne.n	80033a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339e:	085b      	lsrs	r3, r3, #1
 80033a0:	3b01      	subs	r3, #1
 80033a2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d071      	beq.n	800348c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	2b0c      	cmp	r3, #12
 80033ac:	d068      	beq.n	8003480 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80033ae:	4b35      	ldr	r3, [pc, #212]	; (8003484 <HAL_RCC_OscConfig+0x784>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d105      	bne.n	80033c6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80033ba:	4b32      	ldr	r3, [pc, #200]	; (8003484 <HAL_RCC_OscConfig+0x784>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e0ac      	b.n	8003524 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80033ca:	4b2e      	ldr	r3, [pc, #184]	; (8003484 <HAL_RCC_OscConfig+0x784>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a2d      	ldr	r2, [pc, #180]	; (8003484 <HAL_RCC_OscConfig+0x784>)
 80033d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033d4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033d6:	f7fe fe5d 	bl	8002094 <HAL_GetTick>
 80033da:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033dc:	e008      	b.n	80033f0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033de:	f7fe fe59 	bl	8002094 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d901      	bls.n	80033f0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e099      	b.n	8003524 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033f0:	4b24      	ldr	r3, [pc, #144]	; (8003484 <HAL_RCC_OscConfig+0x784>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1f0      	bne.n	80033de <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033fc:	4b21      	ldr	r3, [pc, #132]	; (8003484 <HAL_RCC_OscConfig+0x784>)
 80033fe:	68da      	ldr	r2, [r3, #12]
 8003400:	4b21      	ldr	r3, [pc, #132]	; (8003488 <HAL_RCC_OscConfig+0x788>)
 8003402:	4013      	ands	r3, r2
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800340c:	3a01      	subs	r2, #1
 800340e:	0112      	lsls	r2, r2, #4
 8003410:	4311      	orrs	r1, r2
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003416:	0212      	lsls	r2, r2, #8
 8003418:	4311      	orrs	r1, r2
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800341e:	0852      	lsrs	r2, r2, #1
 8003420:	3a01      	subs	r2, #1
 8003422:	0552      	lsls	r2, r2, #21
 8003424:	4311      	orrs	r1, r2
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800342a:	0852      	lsrs	r2, r2, #1
 800342c:	3a01      	subs	r2, #1
 800342e:	0652      	lsls	r2, r2, #25
 8003430:	4311      	orrs	r1, r2
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003436:	06d2      	lsls	r2, r2, #27
 8003438:	430a      	orrs	r2, r1
 800343a:	4912      	ldr	r1, [pc, #72]	; (8003484 <HAL_RCC_OscConfig+0x784>)
 800343c:	4313      	orrs	r3, r2
 800343e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003440:	4b10      	ldr	r3, [pc, #64]	; (8003484 <HAL_RCC_OscConfig+0x784>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a0f      	ldr	r2, [pc, #60]	; (8003484 <HAL_RCC_OscConfig+0x784>)
 8003446:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800344a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800344c:	4b0d      	ldr	r3, [pc, #52]	; (8003484 <HAL_RCC_OscConfig+0x784>)
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	4a0c      	ldr	r2, [pc, #48]	; (8003484 <HAL_RCC_OscConfig+0x784>)
 8003452:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003456:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003458:	f7fe fe1c 	bl	8002094 <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003460:	f7fe fe18 	bl	8002094 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e058      	b.n	8003524 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003472:	4b04      	ldr	r3, [pc, #16]	; (8003484 <HAL_RCC_OscConfig+0x784>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d0f0      	beq.n	8003460 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800347e:	e050      	b.n	8003522 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e04f      	b.n	8003524 <HAL_RCC_OscConfig+0x824>
 8003484:	40021000 	.word	0x40021000
 8003488:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800348c:	4b27      	ldr	r3, [pc, #156]	; (800352c <HAL_RCC_OscConfig+0x82c>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d144      	bne.n	8003522 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003498:	4b24      	ldr	r3, [pc, #144]	; (800352c <HAL_RCC_OscConfig+0x82c>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a23      	ldr	r2, [pc, #140]	; (800352c <HAL_RCC_OscConfig+0x82c>)
 800349e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034a4:	4b21      	ldr	r3, [pc, #132]	; (800352c <HAL_RCC_OscConfig+0x82c>)
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	4a20      	ldr	r2, [pc, #128]	; (800352c <HAL_RCC_OscConfig+0x82c>)
 80034aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034b0:	f7fe fdf0 	bl	8002094 <HAL_GetTick>
 80034b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034b8:	f7fe fdec 	bl	8002094 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e02c      	b.n	8003524 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034ca:	4b18      	ldr	r3, [pc, #96]	; (800352c <HAL_RCC_OscConfig+0x82c>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d0f0      	beq.n	80034b8 <HAL_RCC_OscConfig+0x7b8>
 80034d6:	e024      	b.n	8003522 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	2b0c      	cmp	r3, #12
 80034dc:	d01f      	beq.n	800351e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034de:	4b13      	ldr	r3, [pc, #76]	; (800352c <HAL_RCC_OscConfig+0x82c>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a12      	ldr	r2, [pc, #72]	; (800352c <HAL_RCC_OscConfig+0x82c>)
 80034e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ea:	f7fe fdd3 	bl	8002094 <HAL_GetTick>
 80034ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034f0:	e008      	b.n	8003504 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034f2:	f7fe fdcf 	bl	8002094 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e00f      	b.n	8003524 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003504:	4b09      	ldr	r3, [pc, #36]	; (800352c <HAL_RCC_OscConfig+0x82c>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1f0      	bne.n	80034f2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003510:	4b06      	ldr	r3, [pc, #24]	; (800352c <HAL_RCC_OscConfig+0x82c>)
 8003512:	68da      	ldr	r2, [r3, #12]
 8003514:	4905      	ldr	r1, [pc, #20]	; (800352c <HAL_RCC_OscConfig+0x82c>)
 8003516:	4b06      	ldr	r3, [pc, #24]	; (8003530 <HAL_RCC_OscConfig+0x830>)
 8003518:	4013      	ands	r3, r2
 800351a:	60cb      	str	r3, [r1, #12]
 800351c:	e001      	b.n	8003522 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e000      	b.n	8003524 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3720      	adds	r7, #32
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	40021000 	.word	0x40021000
 8003530:	feeefffc 	.word	0xfeeefffc

08003534 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800353e:	2300      	movs	r3, #0
 8003540:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e11d      	b.n	8003788 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800354c:	4b90      	ldr	r3, [pc, #576]	; (8003790 <HAL_RCC_ClockConfig+0x25c>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 030f 	and.w	r3, r3, #15
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	429a      	cmp	r2, r3
 8003558:	d910      	bls.n	800357c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800355a:	4b8d      	ldr	r3, [pc, #564]	; (8003790 <HAL_RCC_ClockConfig+0x25c>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f023 020f 	bic.w	r2, r3, #15
 8003562:	498b      	ldr	r1, [pc, #556]	; (8003790 <HAL_RCC_ClockConfig+0x25c>)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	4313      	orrs	r3, r2
 8003568:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800356a:	4b89      	ldr	r3, [pc, #548]	; (8003790 <HAL_RCC_ClockConfig+0x25c>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 030f 	and.w	r3, r3, #15
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	429a      	cmp	r2, r3
 8003576:	d001      	beq.n	800357c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e105      	b.n	8003788 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d010      	beq.n	80035aa <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689a      	ldr	r2, [r3, #8]
 800358c:	4b81      	ldr	r3, [pc, #516]	; (8003794 <HAL_RCC_ClockConfig+0x260>)
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003594:	429a      	cmp	r2, r3
 8003596:	d908      	bls.n	80035aa <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003598:	4b7e      	ldr	r3, [pc, #504]	; (8003794 <HAL_RCC_ClockConfig+0x260>)
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	497b      	ldr	r1, [pc, #492]	; (8003794 <HAL_RCC_ClockConfig+0x260>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d079      	beq.n	80036aa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2b03      	cmp	r3, #3
 80035bc:	d11e      	bne.n	80035fc <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035be:	4b75      	ldr	r3, [pc, #468]	; (8003794 <HAL_RCC_ClockConfig+0x260>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e0dc      	b.n	8003788 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80035ce:	f000 fa07 	bl	80039e0 <RCC_GetSysClockFreqFromPLLSource>
 80035d2:	4603      	mov	r3, r0
 80035d4:	4a70      	ldr	r2, [pc, #448]	; (8003798 <HAL_RCC_ClockConfig+0x264>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d946      	bls.n	8003668 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80035da:	4b6e      	ldr	r3, [pc, #440]	; (8003794 <HAL_RCC_ClockConfig+0x260>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d140      	bne.n	8003668 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80035e6:	4b6b      	ldr	r3, [pc, #428]	; (8003794 <HAL_RCC_ClockConfig+0x260>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035ee:	4a69      	ldr	r2, [pc, #420]	; (8003794 <HAL_RCC_ClockConfig+0x260>)
 80035f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035f4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80035f6:	2380      	movs	r3, #128	; 0x80
 80035f8:	617b      	str	r3, [r7, #20]
 80035fa:	e035      	b.n	8003668 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	2b02      	cmp	r3, #2
 8003602:	d107      	bne.n	8003614 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003604:	4b63      	ldr	r3, [pc, #396]	; (8003794 <HAL_RCC_ClockConfig+0x260>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d115      	bne.n	800363c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e0b9      	b.n	8003788 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d107      	bne.n	800362c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800361c:	4b5d      	ldr	r3, [pc, #372]	; (8003794 <HAL_RCC_ClockConfig+0x260>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d109      	bne.n	800363c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e0ad      	b.n	8003788 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800362c:	4b59      	ldr	r3, [pc, #356]	; (8003794 <HAL_RCC_ClockConfig+0x260>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003634:	2b00      	cmp	r3, #0
 8003636:	d101      	bne.n	800363c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e0a5      	b.n	8003788 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800363c:	f000 f8b4 	bl	80037a8 <HAL_RCC_GetSysClockFreq>
 8003640:	4603      	mov	r3, r0
 8003642:	4a55      	ldr	r2, [pc, #340]	; (8003798 <HAL_RCC_ClockConfig+0x264>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d90f      	bls.n	8003668 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003648:	4b52      	ldr	r3, [pc, #328]	; (8003794 <HAL_RCC_ClockConfig+0x260>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d109      	bne.n	8003668 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003654:	4b4f      	ldr	r3, [pc, #316]	; (8003794 <HAL_RCC_ClockConfig+0x260>)
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800365c:	4a4d      	ldr	r2, [pc, #308]	; (8003794 <HAL_RCC_ClockConfig+0x260>)
 800365e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003662:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003664:	2380      	movs	r3, #128	; 0x80
 8003666:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003668:	4b4a      	ldr	r3, [pc, #296]	; (8003794 <HAL_RCC_ClockConfig+0x260>)
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f023 0203 	bic.w	r2, r3, #3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	4947      	ldr	r1, [pc, #284]	; (8003794 <HAL_RCC_ClockConfig+0x260>)
 8003676:	4313      	orrs	r3, r2
 8003678:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800367a:	f7fe fd0b 	bl	8002094 <HAL_GetTick>
 800367e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003680:	e00a      	b.n	8003698 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003682:	f7fe fd07 	bl	8002094 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003690:	4293      	cmp	r3, r2
 8003692:	d901      	bls.n	8003698 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e077      	b.n	8003788 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003698:	4b3e      	ldr	r3, [pc, #248]	; (8003794 <HAL_RCC_ClockConfig+0x260>)
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f003 020c 	and.w	r2, r3, #12
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d1eb      	bne.n	8003682 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	2b80      	cmp	r3, #128	; 0x80
 80036ae:	d105      	bne.n	80036bc <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80036b0:	4b38      	ldr	r3, [pc, #224]	; (8003794 <HAL_RCC_ClockConfig+0x260>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	4a37      	ldr	r2, [pc, #220]	; (8003794 <HAL_RCC_ClockConfig+0x260>)
 80036b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036ba:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d010      	beq.n	80036ea <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689a      	ldr	r2, [r3, #8]
 80036cc:	4b31      	ldr	r3, [pc, #196]	; (8003794 <HAL_RCC_ClockConfig+0x260>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d208      	bcs.n	80036ea <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036d8:	4b2e      	ldr	r3, [pc, #184]	; (8003794 <HAL_RCC_ClockConfig+0x260>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	492b      	ldr	r1, [pc, #172]	; (8003794 <HAL_RCC_ClockConfig+0x260>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036ea:	4b29      	ldr	r3, [pc, #164]	; (8003790 <HAL_RCC_ClockConfig+0x25c>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 030f 	and.w	r3, r3, #15
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d210      	bcs.n	800371a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036f8:	4b25      	ldr	r3, [pc, #148]	; (8003790 <HAL_RCC_ClockConfig+0x25c>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f023 020f 	bic.w	r2, r3, #15
 8003700:	4923      	ldr	r1, [pc, #140]	; (8003790 <HAL_RCC_ClockConfig+0x25c>)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	4313      	orrs	r3, r2
 8003706:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003708:	4b21      	ldr	r3, [pc, #132]	; (8003790 <HAL_RCC_ClockConfig+0x25c>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 030f 	and.w	r3, r3, #15
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	429a      	cmp	r2, r3
 8003714:	d001      	beq.n	800371a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e036      	b.n	8003788 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0304 	and.w	r3, r3, #4
 8003722:	2b00      	cmp	r3, #0
 8003724:	d008      	beq.n	8003738 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003726:	4b1b      	ldr	r3, [pc, #108]	; (8003794 <HAL_RCC_ClockConfig+0x260>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	4918      	ldr	r1, [pc, #96]	; (8003794 <HAL_RCC_ClockConfig+0x260>)
 8003734:	4313      	orrs	r3, r2
 8003736:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0308 	and.w	r3, r3, #8
 8003740:	2b00      	cmp	r3, #0
 8003742:	d009      	beq.n	8003758 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003744:	4b13      	ldr	r3, [pc, #76]	; (8003794 <HAL_RCC_ClockConfig+0x260>)
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	00db      	lsls	r3, r3, #3
 8003752:	4910      	ldr	r1, [pc, #64]	; (8003794 <HAL_RCC_ClockConfig+0x260>)
 8003754:	4313      	orrs	r3, r2
 8003756:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003758:	f000 f826 	bl	80037a8 <HAL_RCC_GetSysClockFreq>
 800375c:	4602      	mov	r2, r0
 800375e:	4b0d      	ldr	r3, [pc, #52]	; (8003794 <HAL_RCC_ClockConfig+0x260>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	091b      	lsrs	r3, r3, #4
 8003764:	f003 030f 	and.w	r3, r3, #15
 8003768:	490c      	ldr	r1, [pc, #48]	; (800379c <HAL_RCC_ClockConfig+0x268>)
 800376a:	5ccb      	ldrb	r3, [r1, r3]
 800376c:	f003 031f 	and.w	r3, r3, #31
 8003770:	fa22 f303 	lsr.w	r3, r2, r3
 8003774:	4a0a      	ldr	r2, [pc, #40]	; (80037a0 <HAL_RCC_ClockConfig+0x26c>)
 8003776:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003778:	4b0a      	ldr	r3, [pc, #40]	; (80037a4 <HAL_RCC_ClockConfig+0x270>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4618      	mov	r0, r3
 800377e:	f7fe fc39 	bl	8001ff4 <HAL_InitTick>
 8003782:	4603      	mov	r3, r0
 8003784:	73fb      	strb	r3, [r7, #15]

  return status;
 8003786:	7bfb      	ldrb	r3, [r7, #15]
}
 8003788:	4618      	mov	r0, r3
 800378a:	3718      	adds	r7, #24
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	40022000 	.word	0x40022000
 8003794:	40021000 	.word	0x40021000
 8003798:	04c4b400 	.word	0x04c4b400
 800379c:	08009da8 	.word	0x08009da8
 80037a0:	20000000 	.word	0x20000000
 80037a4:	20000004 	.word	0x20000004

080037a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b089      	sub	sp, #36	; 0x24
 80037ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80037ae:	2300      	movs	r3, #0
 80037b0:	61fb      	str	r3, [r7, #28]
 80037b2:	2300      	movs	r3, #0
 80037b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037b6:	4b3e      	ldr	r3, [pc, #248]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f003 030c 	and.w	r3, r3, #12
 80037be:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037c0:	4b3b      	ldr	r3, [pc, #236]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	f003 0303 	and.w	r3, r3, #3
 80037c8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d005      	beq.n	80037dc <HAL_RCC_GetSysClockFreq+0x34>
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	2b0c      	cmp	r3, #12
 80037d4:	d121      	bne.n	800381a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d11e      	bne.n	800381a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80037dc:	4b34      	ldr	r3, [pc, #208]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0308 	and.w	r3, r3, #8
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d107      	bne.n	80037f8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80037e8:	4b31      	ldr	r3, [pc, #196]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80037ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037ee:	0a1b      	lsrs	r3, r3, #8
 80037f0:	f003 030f 	and.w	r3, r3, #15
 80037f4:	61fb      	str	r3, [r7, #28]
 80037f6:	e005      	b.n	8003804 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80037f8:	4b2d      	ldr	r3, [pc, #180]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	091b      	lsrs	r3, r3, #4
 80037fe:	f003 030f 	and.w	r3, r3, #15
 8003802:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003804:	4a2b      	ldr	r2, [pc, #172]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800380c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d10d      	bne.n	8003830 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003818:	e00a      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	2b04      	cmp	r3, #4
 800381e:	d102      	bne.n	8003826 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003820:	4b25      	ldr	r3, [pc, #148]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003822:	61bb      	str	r3, [r7, #24]
 8003824:	e004      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	2b08      	cmp	r3, #8
 800382a:	d101      	bne.n	8003830 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800382c:	4b22      	ldr	r3, [pc, #136]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x110>)
 800382e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	2b0c      	cmp	r3, #12
 8003834:	d134      	bne.n	80038a0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003836:	4b1e      	ldr	r3, [pc, #120]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	f003 0303 	and.w	r3, r3, #3
 800383e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	2b02      	cmp	r3, #2
 8003844:	d003      	beq.n	800384e <HAL_RCC_GetSysClockFreq+0xa6>
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	2b03      	cmp	r3, #3
 800384a:	d003      	beq.n	8003854 <HAL_RCC_GetSysClockFreq+0xac>
 800384c:	e005      	b.n	800385a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800384e:	4b1a      	ldr	r3, [pc, #104]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003850:	617b      	str	r3, [r7, #20]
      break;
 8003852:	e005      	b.n	8003860 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003854:	4b18      	ldr	r3, [pc, #96]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003856:	617b      	str	r3, [r7, #20]
      break;
 8003858:	e002      	b.n	8003860 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	617b      	str	r3, [r7, #20]
      break;
 800385e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003860:	4b13      	ldr	r3, [pc, #76]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	091b      	lsrs	r3, r3, #4
 8003866:	f003 030f 	and.w	r3, r3, #15
 800386a:	3301      	adds	r3, #1
 800386c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800386e:	4b10      	ldr	r3, [pc, #64]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	0a1b      	lsrs	r3, r3, #8
 8003874:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	fb03 f202 	mul.w	r2, r3, r2
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	fbb2 f3f3 	udiv	r3, r2, r3
 8003884:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003886:	4b0a      	ldr	r3, [pc, #40]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	0e5b      	lsrs	r3, r3, #25
 800388c:	f003 0303 	and.w	r3, r3, #3
 8003890:	3301      	adds	r3, #1
 8003892:	005b      	lsls	r3, r3, #1
 8003894:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	fbb2 f3f3 	udiv	r3, r2, r3
 800389e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80038a0:	69bb      	ldr	r3, [r7, #24]
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3724      	adds	r7, #36	; 0x24
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	40021000 	.word	0x40021000
 80038b4:	08009dc0 	.word	0x08009dc0
 80038b8:	00f42400 	.word	0x00f42400

080038bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038bc:	b480      	push	{r7}
 80038be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038c0:	4b03      	ldr	r3, [pc, #12]	; (80038d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80038c2:	681b      	ldr	r3, [r3, #0]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	20000000 	.word	0x20000000

080038d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80038d8:	f7ff fff0 	bl	80038bc <HAL_RCC_GetHCLKFreq>
 80038dc:	4602      	mov	r2, r0
 80038de:	4b06      	ldr	r3, [pc, #24]	; (80038f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	0a1b      	lsrs	r3, r3, #8
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	4904      	ldr	r1, [pc, #16]	; (80038fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80038ea:	5ccb      	ldrb	r3, [r1, r3]
 80038ec:	f003 031f 	and.w	r3, r3, #31
 80038f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	40021000 	.word	0x40021000
 80038fc:	08009db8 	.word	0x08009db8

08003900 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003904:	f7ff ffda 	bl	80038bc <HAL_RCC_GetHCLKFreq>
 8003908:	4602      	mov	r2, r0
 800390a:	4b06      	ldr	r3, [pc, #24]	; (8003924 <HAL_RCC_GetPCLK2Freq+0x24>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	0adb      	lsrs	r3, r3, #11
 8003910:	f003 0307 	and.w	r3, r3, #7
 8003914:	4904      	ldr	r1, [pc, #16]	; (8003928 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003916:	5ccb      	ldrb	r3, [r1, r3]
 8003918:	f003 031f 	and.w	r3, r3, #31
 800391c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003920:	4618      	mov	r0, r3
 8003922:	bd80      	pop	{r7, pc}
 8003924:	40021000 	.word	0x40021000
 8003928:	08009db8 	.word	0x08009db8

0800392c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003934:	2300      	movs	r3, #0
 8003936:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003938:	4b27      	ldr	r3, [pc, #156]	; (80039d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800393a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800393c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d003      	beq.n	800394c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003944:	f7ff f8f8 	bl	8002b38 <HAL_PWREx_GetVoltageRange>
 8003948:	6178      	str	r0, [r7, #20]
 800394a:	e014      	b.n	8003976 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800394c:	4b22      	ldr	r3, [pc, #136]	; (80039d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800394e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003950:	4a21      	ldr	r2, [pc, #132]	; (80039d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003952:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003956:	6593      	str	r3, [r2, #88]	; 0x58
 8003958:	4b1f      	ldr	r3, [pc, #124]	; (80039d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800395a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800395c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003960:	60fb      	str	r3, [r7, #12]
 8003962:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003964:	f7ff f8e8 	bl	8002b38 <HAL_PWREx_GetVoltageRange>
 8003968:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800396a:	4b1b      	ldr	r3, [pc, #108]	; (80039d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800396c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396e:	4a1a      	ldr	r2, [pc, #104]	; (80039d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003970:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003974:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800397c:	d10b      	bne.n	8003996 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2b80      	cmp	r3, #128	; 0x80
 8003982:	d913      	bls.n	80039ac <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2ba0      	cmp	r3, #160	; 0xa0
 8003988:	d902      	bls.n	8003990 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800398a:	2302      	movs	r3, #2
 800398c:	613b      	str	r3, [r7, #16]
 800398e:	e00d      	b.n	80039ac <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003990:	2301      	movs	r3, #1
 8003992:	613b      	str	r3, [r7, #16]
 8003994:	e00a      	b.n	80039ac <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2b7f      	cmp	r3, #127	; 0x7f
 800399a:	d902      	bls.n	80039a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800399c:	2302      	movs	r3, #2
 800399e:	613b      	str	r3, [r7, #16]
 80039a0:	e004      	b.n	80039ac <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2b70      	cmp	r3, #112	; 0x70
 80039a6:	d101      	bne.n	80039ac <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039a8:	2301      	movs	r3, #1
 80039aa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80039ac:	4b0b      	ldr	r3, [pc, #44]	; (80039dc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f023 020f 	bic.w	r2, r3, #15
 80039b4:	4909      	ldr	r1, [pc, #36]	; (80039dc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80039bc:	4b07      	ldr	r3, [pc, #28]	; (80039dc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 030f 	and.w	r3, r3, #15
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d001      	beq.n	80039ce <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e000      	b.n	80039d0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3718      	adds	r7, #24
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	40021000 	.word	0x40021000
 80039dc:	40022000 	.word	0x40022000

080039e0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b087      	sub	sp, #28
 80039e4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80039e6:	4b2d      	ldr	r3, [pc, #180]	; (8003a9c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	f003 0303 	and.w	r3, r3, #3
 80039ee:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2b03      	cmp	r3, #3
 80039f4:	d00b      	beq.n	8003a0e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2b03      	cmp	r3, #3
 80039fa:	d825      	bhi.n	8003a48 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d008      	beq.n	8003a14 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d11f      	bne.n	8003a48 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003a08:	4b25      	ldr	r3, [pc, #148]	; (8003aa0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003a0a:	613b      	str	r3, [r7, #16]
    break;
 8003a0c:	e01f      	b.n	8003a4e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003a0e:	4b24      	ldr	r3, [pc, #144]	; (8003aa0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003a10:	613b      	str	r3, [r7, #16]
    break;
 8003a12:	e01c      	b.n	8003a4e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a14:	4b21      	ldr	r3, [pc, #132]	; (8003a9c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0308 	and.w	r3, r3, #8
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d107      	bne.n	8003a30 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a20:	4b1e      	ldr	r3, [pc, #120]	; (8003a9c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a26:	0a1b      	lsrs	r3, r3, #8
 8003a28:	f003 030f 	and.w	r3, r3, #15
 8003a2c:	617b      	str	r3, [r7, #20]
 8003a2e:	e005      	b.n	8003a3c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a30:	4b1a      	ldr	r3, [pc, #104]	; (8003a9c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	091b      	lsrs	r3, r3, #4
 8003a36:	f003 030f 	and.w	r3, r3, #15
 8003a3a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003a3c:	4a19      	ldr	r2, [pc, #100]	; (8003aa4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a44:	613b      	str	r3, [r7, #16]
    break;
 8003a46:	e002      	b.n	8003a4e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	613b      	str	r3, [r7, #16]
    break;
 8003a4c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a4e:	4b13      	ldr	r3, [pc, #76]	; (8003a9c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	091b      	lsrs	r3, r3, #4
 8003a54:	f003 030f 	and.w	r3, r3, #15
 8003a58:	3301      	adds	r3, #1
 8003a5a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003a5c:	4b0f      	ldr	r3, [pc, #60]	; (8003a9c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	0a1b      	lsrs	r3, r3, #8
 8003a62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a66:	693a      	ldr	r2, [r7, #16]
 8003a68:	fb03 f202 	mul.w	r2, r3, r2
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a72:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a74:	4b09      	ldr	r3, [pc, #36]	; (8003a9c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	0e5b      	lsrs	r3, r3, #25
 8003a7a:	f003 0303 	and.w	r3, r3, #3
 8003a7e:	3301      	adds	r3, #1
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a8c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003a8e:	683b      	ldr	r3, [r7, #0]
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	371c      	adds	r7, #28
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr
 8003a9c:	40021000 	.word	0x40021000
 8003aa0:	00f42400 	.word	0x00f42400
 8003aa4:	08009dc0 	.word	0x08009dc0

08003aa8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d040      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ac8:	2b80      	cmp	r3, #128	; 0x80
 8003aca:	d02a      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003acc:	2b80      	cmp	r3, #128	; 0x80
 8003ace:	d825      	bhi.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003ad0:	2b60      	cmp	r3, #96	; 0x60
 8003ad2:	d026      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003ad4:	2b60      	cmp	r3, #96	; 0x60
 8003ad6:	d821      	bhi.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003ad8:	2b40      	cmp	r3, #64	; 0x40
 8003ada:	d006      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003adc:	2b40      	cmp	r3, #64	; 0x40
 8003ade:	d81d      	bhi.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d009      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003ae4:	2b20      	cmp	r3, #32
 8003ae6:	d010      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003ae8:	e018      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003aea:	4b89      	ldr	r3, [pc, #548]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	4a88      	ldr	r2, [pc, #544]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003af4:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003af6:	e015      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	3304      	adds	r3, #4
 8003afc:	2100      	movs	r1, #0
 8003afe:	4618      	mov	r0, r3
 8003b00:	f001 fa82 	bl	8005008 <RCCEx_PLLSAI1_Config>
 8003b04:	4603      	mov	r3, r0
 8003b06:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b08:	e00c      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	3320      	adds	r3, #32
 8003b0e:	2100      	movs	r1, #0
 8003b10:	4618      	mov	r0, r3
 8003b12:	f001 fb6d 	bl	80051f0 <RCCEx_PLLSAI2_Config>
 8003b16:	4603      	mov	r3, r0
 8003b18:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b1a:	e003      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	74fb      	strb	r3, [r7, #19]
      break;
 8003b20:	e000      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003b22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b24:	7cfb      	ldrb	r3, [r7, #19]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10b      	bne.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b2a:	4b79      	ldr	r3, [pc, #484]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b30:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b38:	4975      	ldr	r1, [pc, #468]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003b40:	e001      	b.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b42:	7cfb      	ldrb	r3, [r7, #19]
 8003b44:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d047      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b5a:	d030      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003b5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b60:	d82a      	bhi.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003b62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b66:	d02a      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003b68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b6c:	d824      	bhi.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003b6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b72:	d008      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003b74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b78:	d81e      	bhi.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00a      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003b7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b82:	d010      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003b84:	e018      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b86:	4b62      	ldr	r3, [pc, #392]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	4a61      	ldr	r2, [pc, #388]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b90:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b92:	e015      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	3304      	adds	r3, #4
 8003b98:	2100      	movs	r1, #0
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f001 fa34 	bl	8005008 <RCCEx_PLLSAI1_Config>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ba4:	e00c      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	3320      	adds	r3, #32
 8003baa:	2100      	movs	r1, #0
 8003bac:	4618      	mov	r0, r3
 8003bae:	f001 fb1f 	bl	80051f0 <RCCEx_PLLSAI2_Config>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003bb6:	e003      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	74fb      	strb	r3, [r7, #19]
      break;
 8003bbc:	e000      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003bbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bc0:	7cfb      	ldrb	r3, [r7, #19]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d10b      	bne.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003bc6:	4b52      	ldr	r3, [pc, #328]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003bc8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003bcc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd4:	494e      	ldr	r1, [pc, #312]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003bdc:	e001      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bde:	7cfb      	ldrb	r3, [r7, #19]
 8003be0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	f000 809f 	beq.w	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003bf4:	4b46      	ldr	r3, [pc, #280]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d101      	bne.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003c00:	2301      	movs	r3, #1
 8003c02:	e000      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003c04:	2300      	movs	r3, #0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00d      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c0a:	4b41      	ldr	r3, [pc, #260]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c0e:	4a40      	ldr	r2, [pc, #256]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c14:	6593      	str	r3, [r2, #88]	; 0x58
 8003c16:	4b3e      	ldr	r3, [pc, #248]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c1e:	60bb      	str	r3, [r7, #8]
 8003c20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c22:	2301      	movs	r3, #1
 8003c24:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c26:	4b3b      	ldr	r3, [pc, #236]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a3a      	ldr	r2, [pc, #232]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003c2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c30:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c32:	f7fe fa2f 	bl	8002094 <HAL_GetTick>
 8003c36:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c38:	e009      	b.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c3a:	f7fe fa2b 	bl	8002094 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d902      	bls.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	74fb      	strb	r3, [r7, #19]
        break;
 8003c4c:	e005      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c4e:	4b31      	ldr	r3, [pc, #196]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d0ef      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003c5a:	7cfb      	ldrb	r3, [r7, #19]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d15b      	bne.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c60:	4b2b      	ldr	r3, [pc, #172]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c6a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d01f      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d019      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c7e:	4b24      	ldr	r3, [pc, #144]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c88:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c8a:	4b21      	ldr	r3, [pc, #132]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c90:	4a1f      	ldr	r2, [pc, #124]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c9a:	4b1d      	ldr	r3, [pc, #116]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca0:	4a1b      	ldr	r2, [pc, #108]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ca2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ca6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003caa:	4a19      	ldr	r2, [pc, #100]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d016      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cbc:	f7fe f9ea 	bl	8002094 <HAL_GetTick>
 8003cc0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cc2:	e00b      	b.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cc4:	f7fe f9e6 	bl	8002094 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d902      	bls.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	74fb      	strb	r3, [r7, #19]
            break;
 8003cda:	e006      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cdc:	4b0c      	ldr	r3, [pc, #48]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d0ec      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003cea:	7cfb      	ldrb	r3, [r7, #19]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d10c      	bne.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cf0:	4b07      	ldr	r3, [pc, #28]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d00:	4903      	ldr	r1, [pc, #12]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003d08:	e008      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d0a:	7cfb      	ldrb	r3, [r7, #19]
 8003d0c:	74bb      	strb	r3, [r7, #18]
 8003d0e:	e005      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003d10:	40021000 	.word	0x40021000
 8003d14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d18:	7cfb      	ldrb	r3, [r7, #19]
 8003d1a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d1c:	7c7b      	ldrb	r3, [r7, #17]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d105      	bne.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d22:	4ba0      	ldr	r3, [pc, #640]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d26:	4a9f      	ldr	r2, [pc, #636]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d2c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00a      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d3a:	4b9a      	ldr	r3, [pc, #616]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d40:	f023 0203 	bic.w	r2, r3, #3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d48:	4996      	ldr	r1, [pc, #600]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00a      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d5c:	4b91      	ldr	r3, [pc, #580]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d62:	f023 020c 	bic.w	r2, r3, #12
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6a:	498e      	ldr	r1, [pc, #568]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0304 	and.w	r3, r3, #4
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00a      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d7e:	4b89      	ldr	r3, [pc, #548]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d84:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d8c:	4985      	ldr	r1, [pc, #532]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0308 	and.w	r3, r3, #8
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00a      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003da0:	4b80      	ldr	r3, [pc, #512]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dae:	497d      	ldr	r1, [pc, #500]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0310 	and.w	r3, r3, #16
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00a      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003dc2:	4b78      	ldr	r3, [pc, #480]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dd0:	4974      	ldr	r1, [pc, #464]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0320 	and.w	r3, r3, #32
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00a      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003de4:	4b6f      	ldr	r3, [pc, #444]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003df2:	496c      	ldr	r1, [pc, #432]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00a      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e06:	4b67      	ldr	r3, [pc, #412]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e0c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e14:	4963      	ldr	r1, [pc, #396]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00a      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e28:	4b5e      	ldr	r3, [pc, #376]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e36:	495b      	ldr	r1, [pc, #364]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00a      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e4a:	4b56      	ldr	r3, [pc, #344]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e50:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e58:	4952      	ldr	r1, [pc, #328]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00a      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e6c:	4b4d      	ldr	r3, [pc, #308]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e72:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e7a:	494a      	ldr	r1, [pc, #296]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00a      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e8e:	4b45      	ldr	r3, [pc, #276]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e9c:	4941      	ldr	r1, [pc, #260]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00a      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003eb0:	4b3c      	ldr	r3, [pc, #240]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003eb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003eb6:	f023 0203 	bic.w	r2, r3, #3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ebe:	4939      	ldr	r1, [pc, #228]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d028      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ed2:	4b34      	ldr	r3, [pc, #208]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ee0:	4930      	ldr	r1, [pc, #192]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ef0:	d106      	bne.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ef2:	4b2c      	ldr	r3, [pc, #176]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	4a2b      	ldr	r2, [pc, #172]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ef8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003efc:	60d3      	str	r3, [r2, #12]
 8003efe:	e011      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f08:	d10c      	bne.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	3304      	adds	r3, #4
 8003f0e:	2101      	movs	r1, #1
 8003f10:	4618      	mov	r0, r3
 8003f12:	f001 f879 	bl	8005008 <RCCEx_PLLSAI1_Config>
 8003f16:	4603      	mov	r3, r0
 8003f18:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003f1a:	7cfb      	ldrb	r3, [r7, #19]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d001      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003f20:	7cfb      	ldrb	r3, [r7, #19]
 8003f22:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d04d      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f38:	d108      	bne.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003f3a:	4b1a      	ldr	r3, [pc, #104]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f40:	4a18      	ldr	r2, [pc, #96]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f46:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003f4a:	e012      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003f4c:	4b15      	ldr	r3, [pc, #84]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f52:	4a14      	ldr	r2, [pc, #80]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f58:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003f5c:	4b11      	ldr	r3, [pc, #68]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f6a:	490e      	ldr	r1, [pc, #56]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f7a:	d106      	bne.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f7c:	4b09      	ldr	r3, [pc, #36]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	4a08      	ldr	r2, [pc, #32]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f86:	60d3      	str	r3, [r2, #12]
 8003f88:	e020      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f92:	d109      	bne.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f94:	4b03      	ldr	r3, [pc, #12]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	4a02      	ldr	r2, [pc, #8]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f9e:	60d3      	str	r3, [r2, #12]
 8003fa0:	e014      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003fa2:	bf00      	nop
 8003fa4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fb0:	d10c      	bne.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	3304      	adds	r3, #4
 8003fb6:	2101      	movs	r1, #1
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f001 f825 	bl	8005008 <RCCEx_PLLSAI1_Config>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fc2:	7cfb      	ldrb	r3, [r7, #19]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d001      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003fc8:	7cfb      	ldrb	r3, [r7, #19]
 8003fca:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d028      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003fd8:	4b7a      	ldr	r3, [pc, #488]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fde:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fe6:	4977      	ldr	r1, [pc, #476]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ff2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ff6:	d106      	bne.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ff8:	4b72      	ldr	r3, [pc, #456]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	4a71      	ldr	r2, [pc, #452]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003ffe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004002:	60d3      	str	r3, [r2, #12]
 8004004:	e011      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800400a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800400e:	d10c      	bne.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3304      	adds	r3, #4
 8004014:	2101      	movs	r1, #1
 8004016:	4618      	mov	r0, r3
 8004018:	f000 fff6 	bl	8005008 <RCCEx_PLLSAI1_Config>
 800401c:	4603      	mov	r3, r0
 800401e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004020:	7cfb      	ldrb	r3, [r7, #19]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004026:	7cfb      	ldrb	r3, [r7, #19]
 8004028:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d01e      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004036:	4b63      	ldr	r3, [pc, #396]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800403c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004046:	495f      	ldr	r1, [pc, #380]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004048:	4313      	orrs	r3, r2
 800404a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004054:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004058:	d10c      	bne.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	3304      	adds	r3, #4
 800405e:	2102      	movs	r1, #2
 8004060:	4618      	mov	r0, r3
 8004062:	f000 ffd1 	bl	8005008 <RCCEx_PLLSAI1_Config>
 8004066:	4603      	mov	r3, r0
 8004068:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800406a:	7cfb      	ldrb	r3, [r7, #19]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d001      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004070:	7cfb      	ldrb	r3, [r7, #19]
 8004072:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00b      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004080:	4b50      	ldr	r3, [pc, #320]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004082:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004086:	f023 0204 	bic.w	r2, r3, #4
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004090:	494c      	ldr	r1, [pc, #304]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004092:	4313      	orrs	r3, r2
 8004094:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00b      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80040a4:	4b47      	ldr	r3, [pc, #284]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80040a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040aa:	f023 0218 	bic.w	r2, r3, #24
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b4:	4943      	ldr	r1, [pc, #268]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d035      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80040c8:	4b3e      	ldr	r3, [pc, #248]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a3d      	ldr	r2, [pc, #244]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80040ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040d4:	f7fd ffde 	bl	8002094 <HAL_GetTick>
 80040d8:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80040da:	e009      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80040dc:	f7fd ffda 	bl	8002094 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d902      	bls.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	74fb      	strb	r3, [r7, #19]
        break;
 80040ee:	e005      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80040f0:	4b34      	ldr	r3, [pc, #208]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1ef      	bne.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 80040fc:	7cfb      	ldrb	r3, [r7, #19]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d113      	bne.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8004102:	4b30      	ldr	r3, [pc, #192]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004104:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004108:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004112:	492c      	ldr	r1, [pc, #176]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004114:	4313      	orrs	r3, r2
 8004116:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	3320      	adds	r3, #32
 800411e:	2102      	movs	r1, #2
 8004120:	4618      	mov	r0, r3
 8004122:	f001 f865 	bl	80051f0 <RCCEx_PLLSAI2_Config>
 8004126:	4603      	mov	r3, r0
 8004128:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800412a:	7cfb      	ldrb	r3, [r7, #19]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d001      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8004130:	7cfb      	ldrb	r3, [r7, #19]
 8004132:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d01e      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8004140:	4b20      	ldr	r3, [pc, #128]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004142:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004146:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004150:	491c      	ldr	r1, [pc, #112]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004152:	4313      	orrs	r3, r2
 8004154:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800415e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004162:	d10c      	bne.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	3320      	adds	r3, #32
 8004168:	2101      	movs	r1, #1
 800416a:	4618      	mov	r0, r3
 800416c:	f001 f840 	bl	80051f0 <RCCEx_PLLSAI2_Config>
 8004170:	4603      	mov	r3, r0
 8004172:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004174:	7cfb      	ldrb	r3, [r7, #19]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d001      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 800417a:	7cfb      	ldrb	r3, [r7, #19]
 800417c:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d017      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800418a:	4b0e      	ldr	r3, [pc, #56]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800418c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004190:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800419a:	490a      	ldr	r1, [pc, #40]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800419c:	4313      	orrs	r3, r2
 800419e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041ac:	d105      	bne.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041ae:	4b05      	ldr	r3, [pc, #20]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	4a04      	ldr	r2, [pc, #16]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80041b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041b8:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80041ba:	7cbb      	ldrb	r3, [r7, #18]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3718      	adds	r7, #24
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	40021000 	.word	0x40021000

080041c8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b088      	sub	sp, #32
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80041d0:	2300      	movs	r3, #0
 80041d2:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041da:	d13e      	bne.n	800425a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80041dc:	4bb6      	ldr	r3, [pc, #728]	; (80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80041de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041e6:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041ee:	d028      	beq.n	8004242 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041f6:	f200 86f2 	bhi.w	8004fde <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004200:	d005      	beq.n	800420e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004208:	d00e      	beq.n	8004228 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800420a:	f000 bee8 	b.w	8004fde <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800420e:	4baa      	ldr	r3, [pc, #680]	; (80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b02      	cmp	r3, #2
 800421a:	f040 86e2 	bne.w	8004fe2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
        frequency = LSE_VALUE;
 800421e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004222:	61fb      	str	r3, [r7, #28]
      break;
 8004224:	f000 bedd 	b.w	8004fe2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004228:	4ba3      	ldr	r3, [pc, #652]	; (80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800422a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800422e:	f003 0302 	and.w	r3, r3, #2
 8004232:	2b02      	cmp	r3, #2
 8004234:	f040 86d7 	bne.w	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = LSI_VALUE;
 8004238:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800423c:	61fb      	str	r3, [r7, #28]
      break;
 800423e:	f000 bed2 	b.w	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004242:	4b9d      	ldr	r3, [pc, #628]	; (80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800424a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800424e:	f040 86cc 	bne.w	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
        frequency = HSE_VALUE / 32U;
 8004252:	4b9a      	ldr	r3, [pc, #616]	; (80044bc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004254:	61fb      	str	r3, [r7, #28]
      break;
 8004256:	f000 bec8 	b.w	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800425a:	4b97      	ldr	r3, [pc, #604]	; (80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	f003 0303 	and.w	r3, r3, #3
 8004262:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	2b03      	cmp	r3, #3
 8004268:	d036      	beq.n	80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	2b03      	cmp	r3, #3
 800426e:	d840      	bhi.n	80042f2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d003      	beq.n	800427e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	2b02      	cmp	r3, #2
 800427a:	d020      	beq.n	80042be <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 800427c:	e039      	b.n	80042f2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800427e:	4b8e      	ldr	r3, [pc, #568]	; (80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b02      	cmp	r3, #2
 8004288:	d116      	bne.n	80042b8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800428a:	4b8b      	ldr	r3, [pc, #556]	; (80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0308 	and.w	r3, r3, #8
 8004292:	2b00      	cmp	r3, #0
 8004294:	d005      	beq.n	80042a2 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8004296:	4b88      	ldr	r3, [pc, #544]	; (80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	091b      	lsrs	r3, r3, #4
 800429c:	f003 030f 	and.w	r3, r3, #15
 80042a0:	e005      	b.n	80042ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80042a2:	4b85      	ldr	r3, [pc, #532]	; (80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80042a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042a8:	0a1b      	lsrs	r3, r3, #8
 80042aa:	f003 030f 	and.w	r3, r3, #15
 80042ae:	4a84      	ldr	r2, [pc, #528]	; (80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80042b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042b4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80042b6:	e01f      	b.n	80042f8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80042b8:	2300      	movs	r3, #0
 80042ba:	61bb      	str	r3, [r7, #24]
      break;
 80042bc:	e01c      	b.n	80042f8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80042be:	4b7e      	ldr	r3, [pc, #504]	; (80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042ca:	d102      	bne.n	80042d2 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80042cc:	4b7d      	ldr	r3, [pc, #500]	; (80044c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80042ce:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80042d0:	e012      	b.n	80042f8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80042d2:	2300      	movs	r3, #0
 80042d4:	61bb      	str	r3, [r7, #24]
      break;
 80042d6:	e00f      	b.n	80042f8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80042d8:	4b77      	ldr	r3, [pc, #476]	; (80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042e4:	d102      	bne.n	80042ec <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80042e6:	4b77      	ldr	r3, [pc, #476]	; (80044c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80042e8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80042ea:	e005      	b.n	80042f8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80042ec:	2300      	movs	r3, #0
 80042ee:	61bb      	str	r3, [r7, #24]
      break;
 80042f0:	e002      	b.n	80042f8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80042f2:	2300      	movs	r3, #0
 80042f4:	61bb      	str	r3, [r7, #24]
      break;
 80042f6:	bf00      	nop
    }

    switch(PeriphClk)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042fe:	f000 8604 	beq.w	8004f0a <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004308:	f200 8671 	bhi.w	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004312:	f000 8467 	beq.w	8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800431c:	f200 8667 	bhi.w	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004326:	f000 852f 	beq.w	8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004330:	f200 865d 	bhi.w	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800433a:	f000 8185 	beq.w	8004648 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004344:	f200 8653 	bhi.w	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800434e:	f000 80cb 	beq.w	80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004358:	f200 8649 	bhi.w	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004362:	f000 842e 	beq.w	8004bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800436c:	f200 863f 	bhi.w	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004376:	f000 83e2 	beq.w	8004b3e <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004380:	f200 8635 	bhi.w	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800438a:	f000 80ad 	beq.w	80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004394:	f200 862b 	bhi.w	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800439e:	f000 809b 	beq.w	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043a8:	f200 8621 	bhi.w	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043b2:	f000 8089 	beq.w	80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043bc:	f200 8617 	bhi.w	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043c6:	f000 8552 	beq.w	8004e6e <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043d0:	f200 860d 	bhi.w	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043da:	f000 84fe 	beq.w	8004dda <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043e4:	f200 8603 	bhi.w	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043ee:	f000 849f 	beq.w	8004d30 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043f8:	f200 85f9 	bhi.w	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2b80      	cmp	r3, #128	; 0x80
 8004400:	f000 846a 	beq.w	8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2b80      	cmp	r3, #128	; 0x80
 8004408:	f200 85f1 	bhi.w	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2b20      	cmp	r3, #32
 8004410:	d84c      	bhi.n	80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2b00      	cmp	r3, #0
 8004416:	f000 85ea 	beq.w	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	3b01      	subs	r3, #1
 800441e:	2b1f      	cmp	r3, #31
 8004420:	f200 85e5 	bhi.w	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8004424:	a201      	add	r2, pc, #4	; (adr r2, 800442c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8004426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800442a:	bf00      	nop
 800442c:	0800483d 	.word	0x0800483d
 8004430:	080048ab 	.word	0x080048ab
 8004434:	08004fef 	.word	0x08004fef
 8004438:	0800493f 	.word	0x0800493f
 800443c:	08004fef 	.word	0x08004fef
 8004440:	08004fef 	.word	0x08004fef
 8004444:	08004fef 	.word	0x08004fef
 8004448:	080049b7 	.word	0x080049b7
 800444c:	08004fef 	.word	0x08004fef
 8004450:	08004fef 	.word	0x08004fef
 8004454:	08004fef 	.word	0x08004fef
 8004458:	08004fef 	.word	0x08004fef
 800445c:	08004fef 	.word	0x08004fef
 8004460:	08004fef 	.word	0x08004fef
 8004464:	08004fef 	.word	0x08004fef
 8004468:	08004a3b 	.word	0x08004a3b
 800446c:	08004fef 	.word	0x08004fef
 8004470:	08004fef 	.word	0x08004fef
 8004474:	08004fef 	.word	0x08004fef
 8004478:	08004fef 	.word	0x08004fef
 800447c:	08004fef 	.word	0x08004fef
 8004480:	08004fef 	.word	0x08004fef
 8004484:	08004fef 	.word	0x08004fef
 8004488:	08004fef 	.word	0x08004fef
 800448c:	08004fef 	.word	0x08004fef
 8004490:	08004fef 	.word	0x08004fef
 8004494:	08004fef 	.word	0x08004fef
 8004498:	08004fef 	.word	0x08004fef
 800449c:	08004fef 	.word	0x08004fef
 80044a0:	08004fef 	.word	0x08004fef
 80044a4:	08004fef 	.word	0x08004fef
 80044a8:	08004abd 	.word	0x08004abd
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b40      	cmp	r3, #64	; 0x40
 80044b0:	f000 83e6 	beq.w	8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 80044b4:	f000 bd9b 	b.w	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80044b8:	40021000 	.word	0x40021000
 80044bc:	0007a120 	.word	0x0007a120
 80044c0:	08009dc0 	.word	0x08009dc0
 80044c4:	00f42400 	.word	0x00f42400
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80044c8:	69b9      	ldr	r1, [r7, #24]
 80044ca:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80044ce:	f000 ff83 	bl	80053d8 <RCCEx_GetSAIxPeriphCLKFreq>
 80044d2:	61f8      	str	r0, [r7, #28]
      break;
 80044d4:	f000 bd8e 	b.w	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80044d8:	69b9      	ldr	r1, [r7, #24]
 80044da:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80044de:	f000 ff7b 	bl	80053d8 <RCCEx_GetSAIxPeriphCLKFreq>
 80044e2:	61f8      	str	r0, [r7, #28]
      break;
 80044e4:	f000 bd86 	b.w	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80044e8:	4b9a      	ldr	r3, [pc, #616]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80044ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ee:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80044f2:	60fb      	str	r3, [r7, #12]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80044fa:	d015      	beq.n	8004528 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004502:	f200 8092 	bhi.w	800462a <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800450c:	d029      	beq.n	8004562 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004514:	f200 8089 	bhi.w	800462a <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d07b      	beq.n	8004616 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004524:	d04a      	beq.n	80045bc <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
          break;
 8004526:	e080      	b.n	800462a <HAL_RCCEx_GetPeriphCLKFreq+0x462>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004528:	4b8a      	ldr	r3, [pc, #552]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b02      	cmp	r3, #2
 8004532:	d17d      	bne.n	8004630 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004534:	4b87      	ldr	r3, [pc, #540]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0308 	and.w	r3, r3, #8
 800453c:	2b00      	cmp	r3, #0
 800453e:	d005      	beq.n	800454c <HAL_RCCEx_GetPeriphCLKFreq+0x384>
 8004540:	4b84      	ldr	r3, [pc, #528]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	091b      	lsrs	r3, r3, #4
 8004546:	f003 030f 	and.w	r3, r3, #15
 800454a:	e005      	b.n	8004558 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 800454c:	4b81      	ldr	r3, [pc, #516]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800454e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004552:	0a1b      	lsrs	r3, r3, #8
 8004554:	f003 030f 	and.w	r3, r3, #15
 8004558:	4a7f      	ldr	r2, [pc, #508]	; (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800455a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800455e:	61fb      	str	r3, [r7, #28]
          break;
 8004560:	e066      	b.n	8004630 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004562:	4b7c      	ldr	r3, [pc, #496]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800456a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800456e:	d162      	bne.n	8004636 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004570:	4b78      	ldr	r3, [pc, #480]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004578:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800457c:	d15b      	bne.n	8004636 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800457e:	4b75      	ldr	r3, [pc, #468]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	0a1b      	lsrs	r3, r3, #8
 8004584:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004588:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	fb03 f202 	mul.w	r2, r3, r2
 8004592:	4b70      	ldr	r3, [pc, #448]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	091b      	lsrs	r3, r3, #4
 8004598:	f003 030f 	and.w	r3, r3, #15
 800459c:	3301      	adds	r3, #1
 800459e:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a2:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80045a4:	4b6b      	ldr	r3, [pc, #428]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	0d5b      	lsrs	r3, r3, #21
 80045aa:	f003 0303 	and.w	r3, r3, #3
 80045ae:	3301      	adds	r3, #1
 80045b0:	005b      	lsls	r3, r3, #1
 80045b2:	69ba      	ldr	r2, [r7, #24]
 80045b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b8:	61fb      	str	r3, [r7, #28]
          break;
 80045ba:	e03c      	b.n	8004636 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80045bc:	4b65      	ldr	r3, [pc, #404]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045c8:	d138      	bne.n	800463c <HAL_RCCEx_GetPeriphCLKFreq+0x474>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80045ca:	4b62      	ldr	r3, [pc, #392]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045d6:	d131      	bne.n	800463c <HAL_RCCEx_GetPeriphCLKFreq+0x474>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80045d8:	4b5e      	ldr	r3, [pc, #376]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	0a1b      	lsrs	r3, r3, #8
 80045de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045e2:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	68ba      	ldr	r2, [r7, #8]
 80045e8:	fb03 f202 	mul.w	r2, r3, r2
 80045ec:	4b59      	ldr	r3, [pc, #356]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	091b      	lsrs	r3, r3, #4
 80045f2:	f003 030f 	and.w	r3, r3, #15
 80045f6:	3301      	adds	r3, #1
 80045f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045fc:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80045fe:	4b55      	ldr	r3, [pc, #340]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	0d5b      	lsrs	r3, r3, #21
 8004604:	f003 0303 	and.w	r3, r3, #3
 8004608:	3301      	adds	r3, #1
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	69ba      	ldr	r2, [r7, #24]
 800460e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004612:	61fb      	str	r3, [r7, #28]
          break;
 8004614:	e012      	b.n	800463c <HAL_RCCEx_GetPeriphCLKFreq+0x474>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8004616:	4b4f      	ldr	r3, [pc, #316]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004618:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800461c:	f003 0302 	and.w	r3, r3, #2
 8004620:	2b02      	cmp	r3, #2
 8004622:	d10e      	bne.n	8004642 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI48_VALUE;
 8004624:	4b4d      	ldr	r3, [pc, #308]	; (800475c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004626:	61fb      	str	r3, [r7, #28]
          break;
 8004628:	e00b      	b.n	8004642 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          break;
 800462a:	bf00      	nop
 800462c:	f000 bce2 	b.w	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004630:	bf00      	nop
 8004632:	f000 bcdf 	b.w	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004636:	bf00      	nop
 8004638:	f000 bcdc 	b.w	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800463c:	bf00      	nop
 800463e:	f000 bcd9 	b.w	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004642:	bf00      	nop
        break;
 8004644:	f000 bcd6 	b.w	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8004648:	4b42      	ldr	r3, [pc, #264]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800464a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800464e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004652:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004656:	d13d      	bne.n	80046d4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004658:	4b3e      	ldr	r3, [pc, #248]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004660:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004664:	f040 84c5 	bne.w	8004ff2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8004668:	4b3a      	ldr	r3, [pc, #232]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004674:	f040 84bd 	bne.w	8004ff2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004678:	4b36      	ldr	r3, [pc, #216]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	0a1b      	lsrs	r3, r3, #8
 800467e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004682:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	68ba      	ldr	r2, [r7, #8]
 8004688:	fb03 f202 	mul.w	r2, r3, r2
 800468c:	4b31      	ldr	r3, [pc, #196]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	091b      	lsrs	r3, r3, #4
 8004692:	f003 030f 	and.w	r3, r3, #15
 8004696:	3301      	adds	r3, #1
 8004698:	fbb2 f3f3 	udiv	r3, r2, r3
 800469c:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800469e:	4b2d      	ldr	r3, [pc, #180]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	0edb      	lsrs	r3, r3, #27
 80046a4:	f003 031f 	and.w	r3, r3, #31
 80046a8:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d10a      	bne.n	80046c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80046b0:	4b28      	ldr	r3, [pc, #160]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d002      	beq.n	80046c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
                pllp = 17U;
 80046bc:	2311      	movs	r3, #17
 80046be:	617b      	str	r3, [r7, #20]
 80046c0:	e001      	b.n	80046c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 7U;
 80046c2:	2307      	movs	r3, #7
 80046c4:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 80046c6:	69ba      	ldr	r2, [r7, #24]
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ce:	61fb      	str	r3, [r7, #28]
      break;
 80046d0:	f000 bc8f 	b.w	8004ff2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80046d4:	4b1f      	ldr	r3, [pc, #124]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80046d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046da:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80046de:	60fb      	str	r3, [r7, #12]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80046e6:	d016      	beq.n	8004716 <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80046ee:	f200 809b 	bhi.w	8004828 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046f8:	d032      	beq.n	8004760 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004700:	f200 8092 	bhi.w	8004828 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2b00      	cmp	r3, #0
 8004708:	f000 8084 	beq.w	8004814 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004712:	d052      	beq.n	80047ba <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
          break;
 8004714:	e088      	b.n	8004828 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004716:	4b0f      	ldr	r3, [pc, #60]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b02      	cmp	r3, #2
 8004720:	f040 8084 	bne.w	800482c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004724:	4b0b      	ldr	r3, [pc, #44]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0308 	and.w	r3, r3, #8
 800472c:	2b00      	cmp	r3, #0
 800472e:	d005      	beq.n	800473c <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 8004730:	4b08      	ldr	r3, [pc, #32]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	091b      	lsrs	r3, r3, #4
 8004736:	f003 030f 	and.w	r3, r3, #15
 800473a:	e005      	b.n	8004748 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 800473c:	4b05      	ldr	r3, [pc, #20]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800473e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004742:	0a1b      	lsrs	r3, r3, #8
 8004744:	f003 030f 	and.w	r3, r3, #15
 8004748:	4a03      	ldr	r2, [pc, #12]	; (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800474a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800474e:	61fb      	str	r3, [r7, #28]
          break;
 8004750:	e06c      	b.n	800482c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8004752:	bf00      	nop
 8004754:	40021000 	.word	0x40021000
 8004758:	08009dc0 	.word	0x08009dc0
 800475c:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004760:	4ba5      	ldr	r3, [pc, #660]	; (80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004768:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800476c:	d160      	bne.n	8004830 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800476e:	4ba2      	ldr	r3, [pc, #648]	; (80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004776:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800477a:	d159      	bne.n	8004830 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800477c:	4b9e      	ldr	r3, [pc, #632]	; (80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	0a1b      	lsrs	r3, r3, #8
 8004782:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004786:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	68ba      	ldr	r2, [r7, #8]
 800478c:	fb03 f202 	mul.w	r2, r3, r2
 8004790:	4b99      	ldr	r3, [pc, #612]	; (80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	091b      	lsrs	r3, r3, #4
 8004796:	f003 030f 	and.w	r3, r3, #15
 800479a:	3301      	adds	r3, #1
 800479c:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a0:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80047a2:	4b95      	ldr	r3, [pc, #596]	; (80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	0d5b      	lsrs	r3, r3, #21
 80047a8:	f003 0303 	and.w	r3, r3, #3
 80047ac:	3301      	adds	r3, #1
 80047ae:	005b      	lsls	r3, r3, #1
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b6:	61fb      	str	r3, [r7, #28]
          break;
 80047b8:	e03a      	b.n	8004830 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80047ba:	4b8f      	ldr	r3, [pc, #572]	; (80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047c6:	d135      	bne.n	8004834 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80047c8:	4b8b      	ldr	r3, [pc, #556]	; (80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047d4:	d12e      	bne.n	8004834 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80047d6:	4b88      	ldr	r3, [pc, #544]	; (80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	0a1b      	lsrs	r3, r3, #8
 80047dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047e0:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	68ba      	ldr	r2, [r7, #8]
 80047e6:	fb03 f202 	mul.w	r2, r3, r2
 80047ea:	4b83      	ldr	r3, [pc, #524]	; (80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	091b      	lsrs	r3, r3, #4
 80047f0:	f003 030f 	and.w	r3, r3, #15
 80047f4:	3301      	adds	r3, #1
 80047f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047fa:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80047fc:	4b7e      	ldr	r3, [pc, #504]	; (80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	0d5b      	lsrs	r3, r3, #21
 8004802:	f003 0303 	and.w	r3, r3, #3
 8004806:	3301      	adds	r3, #1
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	69ba      	ldr	r2, [r7, #24]
 800480c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004810:	61fb      	str	r3, [r7, #28]
          break;
 8004812:	e00f      	b.n	8004834 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8004814:	4b78      	ldr	r3, [pc, #480]	; (80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004816:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b02      	cmp	r3, #2
 8004820:	d10a      	bne.n	8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            frequency = HSI48_VALUE;
 8004822:	4b76      	ldr	r3, [pc, #472]	; (80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004824:	61fb      	str	r3, [r7, #28]
          break;
 8004826:	e007      	b.n	8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          break;
 8004828:	bf00      	nop
 800482a:	e3e2      	b.n	8004ff2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 800482c:	bf00      	nop
 800482e:	e3e0      	b.n	8004ff2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8004830:	bf00      	nop
 8004832:	e3de      	b.n	8004ff2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8004834:	bf00      	nop
 8004836:	e3dc      	b.n	8004ff2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8004838:	bf00      	nop
      break;
 800483a:	e3da      	b.n	8004ff2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800483c:	4b6e      	ldr	r3, [pc, #440]	; (80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800483e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004842:	f003 0303 	and.w	r3, r3, #3
 8004846:	60fb      	str	r3, [r7, #12]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2b03      	cmp	r3, #3
 800484c:	d827      	bhi.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
 800484e:	a201      	add	r2, pc, #4	; (adr r2, 8004854 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 8004850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004854:	08004865 	.word	0x08004865
 8004858:	0800486d 	.word	0x0800486d
 800485c:	08004875 	.word	0x08004875
 8004860:	08004889 	.word	0x08004889
          frequency = HAL_RCC_GetPCLK2Freq();
 8004864:	f7ff f84c 	bl	8003900 <HAL_RCC_GetPCLK2Freq>
 8004868:	61f8      	str	r0, [r7, #28]
          break;
 800486a:	e01d      	b.n	80048a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          frequency = HAL_RCC_GetSysClockFreq();
 800486c:	f7fe ff9c 	bl	80037a8 <HAL_RCC_GetSysClockFreq>
 8004870:	61f8      	str	r0, [r7, #28]
          break;
 8004872:	e019      	b.n	80048a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004874:	4b60      	ldr	r3, [pc, #384]	; (80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800487c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004880:	d10f      	bne.n	80048a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
            frequency = HSI_VALUE;
 8004882:	4b5f      	ldr	r3, [pc, #380]	; (8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8004884:	61fb      	str	r3, [r7, #28]
          break;
 8004886:	e00c      	b.n	80048a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004888:	4b5b      	ldr	r3, [pc, #364]	; (80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800488a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b02      	cmp	r3, #2
 8004894:	d107      	bne.n	80048a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = LSE_VALUE;
 8004896:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800489a:	61fb      	str	r3, [r7, #28]
          break;
 800489c:	e003      	b.n	80048a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          break;
 800489e:	bf00      	nop
 80048a0:	e3a8      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80048a2:	bf00      	nop
 80048a4:	e3a6      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80048a6:	bf00      	nop
        break;
 80048a8:	e3a4      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80048aa:	4b53      	ldr	r3, [pc, #332]	; (80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80048ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b0:	f003 030c 	and.w	r3, r3, #12
 80048b4:	60fb      	str	r3, [r7, #12]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2b0c      	cmp	r3, #12
 80048ba:	d83a      	bhi.n	8004932 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 80048bc:	a201      	add	r2, pc, #4	; (adr r2, 80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>)
 80048be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c2:	bf00      	nop
 80048c4:	080048f9 	.word	0x080048f9
 80048c8:	08004933 	.word	0x08004933
 80048cc:	08004933 	.word	0x08004933
 80048d0:	08004933 	.word	0x08004933
 80048d4:	08004901 	.word	0x08004901
 80048d8:	08004933 	.word	0x08004933
 80048dc:	08004933 	.word	0x08004933
 80048e0:	08004933 	.word	0x08004933
 80048e4:	08004909 	.word	0x08004909
 80048e8:	08004933 	.word	0x08004933
 80048ec:	08004933 	.word	0x08004933
 80048f0:	08004933 	.word	0x08004933
 80048f4:	0800491d 	.word	0x0800491d
          frequency = HAL_RCC_GetPCLK1Freq();
 80048f8:	f7fe ffec 	bl	80038d4 <HAL_RCC_GetPCLK1Freq>
 80048fc:	61f8      	str	r0, [r7, #28]
          break;
 80048fe:	e01d      	b.n	800493c <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          frequency = HAL_RCC_GetSysClockFreq();
 8004900:	f7fe ff52 	bl	80037a8 <HAL_RCC_GetSysClockFreq>
 8004904:	61f8      	str	r0, [r7, #28]
          break;
 8004906:	e019      	b.n	800493c <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004908:	4b3b      	ldr	r3, [pc, #236]	; (80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004910:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004914:	d10f      	bne.n	8004936 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
            frequency = HSI_VALUE;
 8004916:	4b3a      	ldr	r3, [pc, #232]	; (8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8004918:	61fb      	str	r3, [r7, #28]
          break;
 800491a:	e00c      	b.n	8004936 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800491c:	4b36      	ldr	r3, [pc, #216]	; (80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800491e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	2b02      	cmp	r3, #2
 8004928:	d107      	bne.n	800493a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = LSE_VALUE;
 800492a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800492e:	61fb      	str	r3, [r7, #28]
          break;
 8004930:	e003      	b.n	800493a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          break;
 8004932:	bf00      	nop
 8004934:	e35e      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004936:	bf00      	nop
 8004938:	e35c      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800493a:	bf00      	nop
        break;
 800493c:	e35a      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800493e:	4b2e      	ldr	r3, [pc, #184]	; (80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004944:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004948:	60fb      	str	r3, [r7, #12]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2b30      	cmp	r3, #48	; 0x30
 800494e:	d021      	beq.n	8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2b30      	cmp	r3, #48	; 0x30
 8004954:	d829      	bhi.n	80049aa <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2b20      	cmp	r3, #32
 800495a:	d011      	beq.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2b20      	cmp	r3, #32
 8004960:	d823      	bhi.n	80049aa <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d003      	beq.n	8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2b10      	cmp	r3, #16
 800496c:	d004      	beq.n	8004978 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
          break;
 800496e:	e01c      	b.n	80049aa <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004970:	f7fe ffb0 	bl	80038d4 <HAL_RCC_GetPCLK1Freq>
 8004974:	61f8      	str	r0, [r7, #28]
          break;
 8004976:	e01d      	b.n	80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          frequency = HAL_RCC_GetSysClockFreq();
 8004978:	f7fe ff16 	bl	80037a8 <HAL_RCC_GetSysClockFreq>
 800497c:	61f8      	str	r0, [r7, #28]
          break;
 800497e:	e019      	b.n	80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004980:	4b1d      	ldr	r3, [pc, #116]	; (80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800498c:	d10f      	bne.n	80049ae <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
            frequency = HSI_VALUE;
 800498e:	4b1c      	ldr	r3, [pc, #112]	; (8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8004990:	61fb      	str	r3, [r7, #28]
          break;
 8004992:	e00c      	b.n	80049ae <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004994:	4b18      	ldr	r3, [pc, #96]	; (80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800499a:	f003 0302 	and.w	r3, r3, #2
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d107      	bne.n	80049b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = LSE_VALUE;
 80049a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049a6:	61fb      	str	r3, [r7, #28]
          break;
 80049a8:	e003      	b.n	80049b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          break;
 80049aa:	bf00      	nop
 80049ac:	e322      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80049ae:	bf00      	nop
 80049b0:	e320      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80049b2:	bf00      	nop
        break;
 80049b4:	e31e      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80049b6:	4b10      	ldr	r3, [pc, #64]	; (80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80049b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049bc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80049c0:	60fb      	str	r3, [r7, #12]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2bc0      	cmp	r3, #192	; 0xc0
 80049c6:	d027      	beq.n	8004a18 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2bc0      	cmp	r3, #192	; 0xc0
 80049cc:	d82f      	bhi.n	8004a2e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2b80      	cmp	r3, #128	; 0x80
 80049d2:	d017      	beq.n	8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2b80      	cmp	r3, #128	; 0x80
 80049d8:	d829      	bhi.n	8004a2e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d003      	beq.n	80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2b40      	cmp	r3, #64	; 0x40
 80049e4:	d004      	beq.n	80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
          break;
 80049e6:	e022      	b.n	8004a2e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
          frequency = HAL_RCC_GetPCLK1Freq();
 80049e8:	f7fe ff74 	bl	80038d4 <HAL_RCC_GetPCLK1Freq>
 80049ec:	61f8      	str	r0, [r7, #28]
          break;
 80049ee:	e023      	b.n	8004a38 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          frequency = HAL_RCC_GetSysClockFreq();
 80049f0:	f7fe feda 	bl	80037a8 <HAL_RCC_GetSysClockFreq>
 80049f4:	61f8      	str	r0, [r7, #28]
          break;
 80049f6:	e01f      	b.n	8004a38 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 80049f8:	40021000 	.word	0x40021000
 80049fc:	02dc6c00 	.word	0x02dc6c00
 8004a00:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004a04:	4b9b      	ldr	r3, [pc, #620]	; (8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a10:	d10f      	bne.n	8004a32 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
            frequency = HSI_VALUE;
 8004a12:	4b99      	ldr	r3, [pc, #612]	; (8004c78 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004a14:	61fb      	str	r3, [r7, #28]
          break;
 8004a16:	e00c      	b.n	8004a32 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004a18:	4b96      	ldr	r3, [pc, #600]	; (8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d107      	bne.n	8004a36 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = LSE_VALUE;
 8004a26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a2a:	61fb      	str	r3, [r7, #28]
          break;
 8004a2c:	e003      	b.n	8004a36 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          break;
 8004a2e:	bf00      	nop
 8004a30:	e2e0      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004a32:	bf00      	nop
 8004a34:	e2de      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004a36:	bf00      	nop
        break;
 8004a38:	e2dc      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004a3a:	4b8e      	ldr	r3, [pc, #568]	; (8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a44:	60fb      	str	r3, [r7, #12]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a4c:	d025      	beq.n	8004a9a <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a54:	d82c      	bhi.n	8004ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a5c:	d013      	beq.n	8004a86 <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a64:	d824      	bhi.n	8004ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d004      	beq.n	8004a76 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a72:	d004      	beq.n	8004a7e <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
          break;
 8004a74:	e01c      	b.n	8004ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004a76:	f7fe ff2d 	bl	80038d4 <HAL_RCC_GetPCLK1Freq>
 8004a7a:	61f8      	str	r0, [r7, #28]
          break;
 8004a7c:	e01d      	b.n	8004aba <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = HAL_RCC_GetSysClockFreq();
 8004a7e:	f7fe fe93 	bl	80037a8 <HAL_RCC_GetSysClockFreq>
 8004a82:	61f8      	str	r0, [r7, #28]
          break;
 8004a84:	e019      	b.n	8004aba <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004a86:	4b7b      	ldr	r3, [pc, #492]	; (8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a92:	d10f      	bne.n	8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
            frequency = HSI_VALUE;
 8004a94:	4b78      	ldr	r3, [pc, #480]	; (8004c78 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004a96:	61fb      	str	r3, [r7, #28]
          break;
 8004a98:	e00c      	b.n	8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004a9a:	4b76      	ldr	r3, [pc, #472]	; (8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa0:	f003 0302 	and.w	r3, r3, #2
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d107      	bne.n	8004ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = LSE_VALUE;
 8004aa8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aac:	61fb      	str	r3, [r7, #28]
          break;
 8004aae:	e003      	b.n	8004ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          break;
 8004ab0:	bf00      	nop
 8004ab2:	e29f      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004ab4:	bf00      	nop
 8004ab6:	e29d      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004ab8:	bf00      	nop
        break;
 8004aba:	e29b      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004abc:	4b6d      	ldr	r3, [pc, #436]	; (8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004ac6:	60fb      	str	r3, [r7, #12]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ace:	d025      	beq.n	8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x954>
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ad6:	d82c      	bhi.n	8004b32 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ade:	d013      	beq.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ae6:	d824      	bhi.n	8004b32 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d004      	beq.n	8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004af4:	d004      	beq.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
          break;
 8004af6:	e01c      	b.n	8004b32 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004af8:	f7fe feec 	bl	80038d4 <HAL_RCC_GetPCLK1Freq>
 8004afc:	61f8      	str	r0, [r7, #28]
          break;
 8004afe:	e01d      	b.n	8004b3c <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = HAL_RCC_GetSysClockFreq();
 8004b00:	f7fe fe52 	bl	80037a8 <HAL_RCC_GetSysClockFreq>
 8004b04:	61f8      	str	r0, [r7, #28]
          break;
 8004b06:	e019      	b.n	8004b3c <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004b08:	4b5a      	ldr	r3, [pc, #360]	; (8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b14:	d10f      	bne.n	8004b36 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
            frequency = HSI_VALUE;
 8004b16:	4b58      	ldr	r3, [pc, #352]	; (8004c78 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004b18:	61fb      	str	r3, [r7, #28]
          break;
 8004b1a:	e00c      	b.n	8004b36 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004b1c:	4b55      	ldr	r3, [pc, #340]	; (8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d107      	bne.n	8004b3a <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = LSE_VALUE;
 8004b2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b2e:	61fb      	str	r3, [r7, #28]
          break;
 8004b30:	e003      	b.n	8004b3a <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          break;
 8004b32:	bf00      	nop
 8004b34:	e25e      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004b36:	bf00      	nop
 8004b38:	e25c      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004b3a:	bf00      	nop
        break;
 8004b3c:	e25a      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8004b3e:	4b4d      	ldr	r3, [pc, #308]	; (8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b48:	60fb      	str	r3, [r7, #12]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b50:	d007      	beq.n	8004b62 <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004b58:	d12f      	bne.n	8004bba <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          frequency = HAL_RCC_GetSysClockFreq();
 8004b5a:	f7fe fe25 	bl	80037a8 <HAL_RCC_GetSysClockFreq>
 8004b5e:	61f8      	str	r0, [r7, #28]
          break;
 8004b60:	e02e      	b.n	8004bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8004b62:	4b44      	ldr	r3, [pc, #272]	; (8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b6e:	d126      	bne.n	8004bbe <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
 8004b70:	4b40      	ldr	r3, [pc, #256]	; (8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d020      	beq.n	8004bbe <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004b7c:	4b3d      	ldr	r3, [pc, #244]	; (8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	0a1b      	lsrs	r3, r3, #8
 8004b82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b86:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	68ba      	ldr	r2, [r7, #8]
 8004b8c:	fb03 f202 	mul.w	r2, r3, r2
 8004b90:	4b38      	ldr	r3, [pc, #224]	; (8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	091b      	lsrs	r3, r3, #4
 8004b96:	f003 030f 	and.w	r3, r3, #15
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba0:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8004ba2:	4b34      	ldr	r3, [pc, #208]	; (8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	0e5b      	lsrs	r3, r3, #25
 8004ba8:	f003 0303 	and.w	r3, r3, #3
 8004bac:	3301      	adds	r3, #1
 8004bae:	005b      	lsls	r3, r3, #1
 8004bb0:	69ba      	ldr	r2, [r7, #24]
 8004bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb6:	61fb      	str	r3, [r7, #28]
          break;
 8004bb8:	e001      	b.n	8004bbe <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          break;
 8004bba:	bf00      	nop
 8004bbc:	e21a      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004bbe:	bf00      	nop
        break;
 8004bc0:	e218      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8004bc2:	4b2c      	ldr	r3, [pc, #176]	; (8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004bc4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bc8:	f003 0304 	and.w	r3, r3, #4
 8004bcc:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d103      	bne.n	8004bdc <HAL_RCCEx_GetPeriphCLKFreq+0xa14>
          frequency = HAL_RCC_GetPCLK2Freq();
 8004bd4:	f7fe fe94 	bl	8003900 <HAL_RCC_GetPCLK2Freq>
 8004bd8:	61f8      	str	r0, [r7, #28]
        break;
 8004bda:	e20b      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          frequency = HAL_RCC_GetSysClockFreq();
 8004bdc:	f7fe fde4 	bl	80037a8 <HAL_RCC_GetSysClockFreq>
 8004be0:	61f8      	str	r0, [r7, #28]
        break;
 8004be2:	e207      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8004be4:	4b23      	ldr	r3, [pc, #140]	; (8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004be6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bea:	f003 0318 	and.w	r3, r3, #24
 8004bee:	60fb      	str	r3, [r7, #12]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2b10      	cmp	r3, #16
 8004bf4:	d010      	beq.n	8004c18 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2b10      	cmp	r3, #16
 8004bfa:	d834      	bhi.n	8004c66 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d003      	beq.n	8004c0a <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2b08      	cmp	r3, #8
 8004c06:	d024      	beq.n	8004c52 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          break;
 8004c08:	e02d      	b.n	8004c66 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8004c0a:	69b9      	ldr	r1, [r7, #24]
 8004c0c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004c10:	f000 fbe2 	bl	80053d8 <RCCEx_GetSAIxPeriphCLKFreq>
 8004c14:	61f8      	str	r0, [r7, #28]
          break;
 8004c16:	e02b      	b.n	8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004c18:	4b16      	ldr	r3, [pc, #88]	; (8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d122      	bne.n	8004c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004c24:	4b13      	ldr	r3, [pc, #76]	; (8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0308 	and.w	r3, r3, #8
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d005      	beq.n	8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8004c30:	4b10      	ldr	r3, [pc, #64]	; (8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	091b      	lsrs	r3, r3, #4
 8004c36:	f003 030f 	and.w	r3, r3, #15
 8004c3a:	e005      	b.n	8004c48 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8004c3c:	4b0d      	ldr	r3, [pc, #52]	; (8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004c3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c42:	0a1b      	lsrs	r3, r3, #8
 8004c44:	f003 030f 	and.w	r3, r3, #15
 8004c48:	4a0c      	ldr	r2, [pc, #48]	; (8004c7c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8004c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c4e:	61fb      	str	r3, [r7, #28]
          break;
 8004c50:	e00b      	b.n	8004c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004c52:	4b08      	ldr	r3, [pc, #32]	; (8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c5e:	d106      	bne.n	8004c6e <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = HSI_VALUE;
 8004c60:	4b05      	ldr	r3, [pc, #20]	; (8004c78 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004c62:	61fb      	str	r3, [r7, #28]
          break;
 8004c64:	e003      	b.n	8004c6e <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          break;
 8004c66:	bf00      	nop
 8004c68:	e1c4      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004c6a:	bf00      	nop
 8004c6c:	e1c2      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004c6e:	bf00      	nop
        break;
 8004c70:	e1c0      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 8004c72:	bf00      	nop
 8004c74:	40021000 	.word	0x40021000
 8004c78:	00f42400 	.word	0x00f42400
 8004c7c:	08009dc0 	.word	0x08009dc0
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004c80:	4b96      	ldr	r3, [pc, #600]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c86:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004c8a:	60fb      	str	r3, [r7, #12]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c92:	d013      	beq.n	8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c9a:	d819      	bhi.n	8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d004      	beq.n	8004cac <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ca8:	d004      	beq.n	8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
          break;
 8004caa:	e011      	b.n	8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004cac:	f7fe fe12 	bl	80038d4 <HAL_RCC_GetPCLK1Freq>
 8004cb0:	61f8      	str	r0, [r7, #28]
          break;
 8004cb2:	e010      	b.n	8004cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8004cb4:	f7fe fd78 	bl	80037a8 <HAL_RCC_GetSysClockFreq>
 8004cb8:	61f8      	str	r0, [r7, #28]
          break;
 8004cba:	e00c      	b.n	8004cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004cbc:	4b87      	ldr	r3, [pc, #540]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cc8:	d104      	bne.n	8004cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = HSI_VALUE;
 8004cca:	4b85      	ldr	r3, [pc, #532]	; (8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004ccc:	61fb      	str	r3, [r7, #28]
          break;
 8004cce:	e001      	b.n	8004cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 8004cd0:	bf00      	nop
 8004cd2:	e18f      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004cd4:	bf00      	nop
        break;
 8004cd6:	e18d      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004cd8:	4b80      	ldr	r3, [pc, #512]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cde:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004ce2:	60fb      	str	r3, [r7, #12]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cea:	d013      	beq.n	8004d14 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cf2:	d819      	bhi.n	8004d28 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d004      	beq.n	8004d04 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d00:	d004      	beq.n	8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>
          break;
 8004d02:	e011      	b.n	8004d28 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004d04:	f7fe fde6 	bl	80038d4 <HAL_RCC_GetPCLK1Freq>
 8004d08:	61f8      	str	r0, [r7, #28]
          break;
 8004d0a:	e010      	b.n	8004d2e <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          frequency = HAL_RCC_GetSysClockFreq();
 8004d0c:	f7fe fd4c 	bl	80037a8 <HAL_RCC_GetSysClockFreq>
 8004d10:	61f8      	str	r0, [r7, #28]
          break;
 8004d12:	e00c      	b.n	8004d2e <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004d14:	4b71      	ldr	r3, [pc, #452]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d20:	d104      	bne.n	8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
            frequency = HSI_VALUE;
 8004d22:	4b6f      	ldr	r3, [pc, #444]	; (8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004d24:	61fb      	str	r3, [r7, #28]
          break;
 8004d26:	e001      	b.n	8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          break;
 8004d28:	bf00      	nop
 8004d2a:	e163      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004d2c:	bf00      	nop
        break;
 8004d2e:	e161      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004d30:	4b6a      	ldr	r3, [pc, #424]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d36:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d3a:	60fb      	str	r3, [r7, #12]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d42:	d013      	beq.n	8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d4a:	d819      	bhi.n	8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d004      	beq.n	8004d5c <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d58:	d004      	beq.n	8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
          break;
 8004d5a:	e011      	b.n	8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004d5c:	f7fe fdba 	bl	80038d4 <HAL_RCC_GetPCLK1Freq>
 8004d60:	61f8      	str	r0, [r7, #28]
          break;
 8004d62:	e010      	b.n	8004d86 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          frequency = HAL_RCC_GetSysClockFreq();
 8004d64:	f7fe fd20 	bl	80037a8 <HAL_RCC_GetSysClockFreq>
 8004d68:	61f8      	str	r0, [r7, #28]
          break;
 8004d6a:	e00c      	b.n	8004d86 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004d6c:	4b5b      	ldr	r3, [pc, #364]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d78:	d104      	bne.n	8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
            frequency = HSI_VALUE;
 8004d7a:	4b59      	ldr	r3, [pc, #356]	; (8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004d7c:	61fb      	str	r3, [r7, #28]
          break;
 8004d7e:	e001      	b.n	8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          break;
 8004d80:	bf00      	nop
 8004d82:	e137      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004d84:	bf00      	nop
        break;
 8004d86:	e135      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8004d88:	4b54      	ldr	r3, [pc, #336]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004d8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d8e:	f003 0303 	and.w	r3, r3, #3
 8004d92:	60fb      	str	r3, [r7, #12]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d011      	beq.n	8004dbe <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d818      	bhi.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d003      	beq.n	8004dae <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d004      	beq.n	8004db6 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
          break;
 8004dac:	e011      	b.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004dae:	f7fe fd91 	bl	80038d4 <HAL_RCC_GetPCLK1Freq>
 8004db2:	61f8      	str	r0, [r7, #28]
          break;
 8004db4:	e010      	b.n	8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          frequency = HAL_RCC_GetSysClockFreq();
 8004db6:	f7fe fcf7 	bl	80037a8 <HAL_RCC_GetSysClockFreq>
 8004dba:	61f8      	str	r0, [r7, #28]
          break;
 8004dbc:	e00c      	b.n	8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004dbe:	4b47      	ldr	r3, [pc, #284]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dca:	d104      	bne.n	8004dd6 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
            frequency = HSI_VALUE;
 8004dcc:	4b44      	ldr	r3, [pc, #272]	; (8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004dce:	61fb      	str	r3, [r7, #28]
          break;
 8004dd0:	e001      	b.n	8004dd6 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          break;
 8004dd2:	bf00      	nop
 8004dd4:	e10e      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004dd6:	bf00      	nop
        break;
 8004dd8:	e10c      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004dda:	4b40      	ldr	r3, [pc, #256]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004de4:	60fb      	str	r3, [r7, #12]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004dec:	d02c      	beq.n	8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0xc80>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004df4:	d833      	bhi.n	8004e5e <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004dfc:	d01a      	beq.n	8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0xc6c>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004e04:	d82b      	bhi.n	8004e5e <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d004      	beq.n	8004e16 <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e12:	d004      	beq.n	8004e1e <HAL_RCCEx_GetPeriphCLKFreq+0xc56>
          break;
 8004e14:	e023      	b.n	8004e5e <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004e16:	f7fe fd5d 	bl	80038d4 <HAL_RCC_GetPCLK1Freq>
 8004e1a:	61f8      	str	r0, [r7, #28]
          break;
 8004e1c:	e026      	b.n	8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004e1e:	4b2f      	ldr	r3, [pc, #188]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004e20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e24:	f003 0302 	and.w	r3, r3, #2
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d11a      	bne.n	8004e62 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
              frequency = LSI_VALUE;
 8004e2c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004e30:	61fb      	str	r3, [r7, #28]
          break;
 8004e32:	e016      	b.n	8004e62 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004e34:	4b29      	ldr	r3, [pc, #164]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e40:	d111      	bne.n	8004e66 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
            frequency = HSI_VALUE;
 8004e42:	4b27      	ldr	r3, [pc, #156]	; (8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004e44:	61fb      	str	r3, [r7, #28]
          break;
 8004e46:	e00e      	b.n	8004e66 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004e48:	4b24      	ldr	r3, [pc, #144]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d109      	bne.n	8004e6a <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = LSE_VALUE;
 8004e56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e5a:	61fb      	str	r3, [r7, #28]
          break;
 8004e5c:	e005      	b.n	8004e6a <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          break;
 8004e5e:	bf00      	nop
 8004e60:	e0c8      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004e62:	bf00      	nop
 8004e64:	e0c6      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004e66:	bf00      	nop
 8004e68:	e0c4      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004e6a:	bf00      	nop
        break;
 8004e6c:	e0c2      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004e6e:	4b1b      	ldr	r3, [pc, #108]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e74:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004e78:	60fb      	str	r3, [r7, #12]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e80:	d030      	beq.n	8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e88:	d837      	bhi.n	8004efa <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e90:	d01a      	beq.n	8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e98:	d82f      	bhi.n	8004efa <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d004      	beq.n	8004eaa <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ea6:	d004      	beq.n	8004eb2 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          break;
 8004ea8:	e027      	b.n	8004efa <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004eaa:	f7fe fd13 	bl	80038d4 <HAL_RCC_GetPCLK1Freq>
 8004eae:	61f8      	str	r0, [r7, #28]
          break;
 8004eb0:	e02a      	b.n	8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004eb2:	4b0a      	ldr	r3, [pc, #40]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004eb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004eb8:	f003 0302 	and.w	r3, r3, #2
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d11e      	bne.n	8004efe <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
              frequency = LSI_VALUE;
 8004ec0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004ec4:	61fb      	str	r3, [r7, #28]
          break;
 8004ec6:	e01a      	b.n	8004efe <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004ec8:	4b04      	ldr	r3, [pc, #16]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ed0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ed4:	d115      	bne.n	8004f02 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
            frequency = HSI_VALUE;
 8004ed6:	4b02      	ldr	r3, [pc, #8]	; (8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004ed8:	61fb      	str	r3, [r7, #28]
          break;
 8004eda:	e012      	b.n	8004f02 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8004edc:	40021000 	.word	0x40021000
 8004ee0:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004ee4:	4b46      	ldr	r3, [pc, #280]	; (8005000 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eea:	f003 0302 	and.w	r3, r3, #2
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	d109      	bne.n	8004f06 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = LSE_VALUE;
 8004ef2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ef6:	61fb      	str	r3, [r7, #28]
          break;
 8004ef8:	e005      	b.n	8004f06 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
          break;
 8004efa:	bf00      	nop
 8004efc:	e07a      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004efe:	bf00      	nop
 8004f00:	e078      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004f02:	bf00      	nop
 8004f04:	e076      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004f06:	bf00      	nop
        break;
 8004f08:	e074      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8004f0a:	4b3d      	ldr	r3, [pc, #244]	; (8005000 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004f0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f10:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004f14:	60fb      	str	r3, [r7, #12]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f1c:	d02c      	beq.n	8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f24:	d855      	bhi.n	8004fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d004      	beq.n	8004f36 <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f32:	d004      	beq.n	8004f3e <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
          break;
 8004f34:	e04d      	b.n	8004fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
          frequency = HAL_RCC_GetSysClockFreq();
 8004f36:	f7fe fc37 	bl	80037a8 <HAL_RCC_GetSysClockFreq>
 8004f3a:	61f8      	str	r0, [r7, #28]
          break;
 8004f3c:	e04e      	b.n	8004fdc <HAL_RCCEx_GetPeriphCLKFreq+0xe14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004f3e:	4b30      	ldr	r3, [pc, #192]	; (8005000 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0302 	and.w	r3, r3, #2
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d145      	bne.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004f4a:	4b2d      	ldr	r3, [pc, #180]	; (8005000 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0308 	and.w	r3, r3, #8
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d005      	beq.n	8004f62 <HAL_RCCEx_GetPeriphCLKFreq+0xd9a>
 8004f56:	4b2a      	ldr	r3, [pc, #168]	; (8005000 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	091b      	lsrs	r3, r3, #4
 8004f5c:	f003 030f 	and.w	r3, r3, #15
 8004f60:	e005      	b.n	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
 8004f62:	4b27      	ldr	r3, [pc, #156]	; (8005000 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004f64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f68:	0a1b      	lsrs	r3, r3, #8
 8004f6a:	f003 030f 	and.w	r3, r3, #15
 8004f6e:	4a25      	ldr	r2, [pc, #148]	; (8005004 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8004f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f74:	61fb      	str	r3, [r7, #28]
          break;
 8004f76:	e02e      	b.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004f78:	4b21      	ldr	r3, [pc, #132]	; (8005000 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f84:	d129      	bne.n	8004fda <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004f86:	4b1e      	ldr	r3, [pc, #120]	; (8005000 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f92:	d122      	bne.n	8004fda <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004f94:	4b1a      	ldr	r3, [pc, #104]	; (8005000 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	0a1b      	lsrs	r3, r3, #8
 8004f9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f9e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	68ba      	ldr	r2, [r7, #8]
 8004fa4:	fb03 f202 	mul.w	r2, r3, r2
 8004fa8:	4b15      	ldr	r3, [pc, #84]	; (8005000 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	091b      	lsrs	r3, r3, #4
 8004fae:	f003 030f 	and.w	r3, r3, #15
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fb8:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8004fba:	4b11      	ldr	r3, [pc, #68]	; (8005000 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	0d5b      	lsrs	r3, r3, #21
 8004fc0:	f003 0303 	and.w	r3, r3, #3
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	005b      	lsls	r3, r3, #1
 8004fc8:	69ba      	ldr	r2, [r7, #24]
 8004fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fce:	61fb      	str	r3, [r7, #28]
          break;
 8004fd0:	e003      	b.n	8004fda <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          break;
 8004fd2:	bf00      	nop
 8004fd4:	e00e      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004fd6:	bf00      	nop
 8004fd8:	e00c      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004fda:	bf00      	nop
        break;
 8004fdc:	e00a      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8004fde:	bf00      	nop
 8004fe0:	e008      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8004fe2:	bf00      	nop
 8004fe4:	e006      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8004fe6:	bf00      	nop
 8004fe8:	e004      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8004fea:	bf00      	nop
 8004fec:	e002      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8004fee:	bf00      	nop
 8004ff0:	e000      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8004ff2:	bf00      	nop
    }
  }

  return(frequency);
 8004ff4:	69fb      	ldr	r3, [r7, #28]
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3720      	adds	r7, #32
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	40021000 	.word	0x40021000
 8005004:	08009dc0 	.word	0x08009dc0

08005008 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005012:	2300      	movs	r3, #0
 8005014:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005016:	4b72      	ldr	r3, [pc, #456]	; (80051e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	f003 0303 	and.w	r3, r3, #3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00e      	beq.n	8005040 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005022:	4b6f      	ldr	r3, [pc, #444]	; (80051e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	f003 0203 	and.w	r2, r3, #3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	429a      	cmp	r2, r3
 8005030:	d103      	bne.n	800503a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
       ||
 8005036:	2b00      	cmp	r3, #0
 8005038:	d142      	bne.n	80050c0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	73fb      	strb	r3, [r7, #15]
 800503e:	e03f      	b.n	80050c0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2b03      	cmp	r3, #3
 8005046:	d018      	beq.n	800507a <RCCEx_PLLSAI1_Config+0x72>
 8005048:	2b03      	cmp	r3, #3
 800504a:	d825      	bhi.n	8005098 <RCCEx_PLLSAI1_Config+0x90>
 800504c:	2b01      	cmp	r3, #1
 800504e:	d002      	beq.n	8005056 <RCCEx_PLLSAI1_Config+0x4e>
 8005050:	2b02      	cmp	r3, #2
 8005052:	d009      	beq.n	8005068 <RCCEx_PLLSAI1_Config+0x60>
 8005054:	e020      	b.n	8005098 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005056:	4b62      	ldr	r3, [pc, #392]	; (80051e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0302 	and.w	r3, r3, #2
 800505e:	2b00      	cmp	r3, #0
 8005060:	d11d      	bne.n	800509e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005066:	e01a      	b.n	800509e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005068:	4b5d      	ldr	r3, [pc, #372]	; (80051e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005070:	2b00      	cmp	r3, #0
 8005072:	d116      	bne.n	80050a2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005078:	e013      	b.n	80050a2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800507a:	4b59      	ldr	r3, [pc, #356]	; (80051e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d10f      	bne.n	80050a6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005086:	4b56      	ldr	r3, [pc, #344]	; (80051e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d109      	bne.n	80050a6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005096:	e006      	b.n	80050a6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	73fb      	strb	r3, [r7, #15]
      break;
 800509c:	e004      	b.n	80050a8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800509e:	bf00      	nop
 80050a0:	e002      	b.n	80050a8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80050a2:	bf00      	nop
 80050a4:	e000      	b.n	80050a8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80050a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80050a8:	7bfb      	ldrb	r3, [r7, #15]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d108      	bne.n	80050c0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80050ae:	4b4c      	ldr	r3, [pc, #304]	; (80051e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	f023 0203 	bic.w	r2, r3, #3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4949      	ldr	r1, [pc, #292]	; (80051e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80050c0:	7bfb      	ldrb	r3, [r7, #15]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f040 8086 	bne.w	80051d4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80050c8:	4b45      	ldr	r3, [pc, #276]	; (80051e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a44      	ldr	r2, [pc, #272]	; (80051e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80050ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80050d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050d4:	f7fc ffde 	bl	8002094 <HAL_GetTick>
 80050d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80050da:	e009      	b.n	80050f0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050dc:	f7fc ffda 	bl	8002094 <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d902      	bls.n	80050f0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	73fb      	strb	r3, [r7, #15]
        break;
 80050ee:	e005      	b.n	80050fc <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80050f0:	4b3b      	ldr	r3, [pc, #236]	; (80051e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1ef      	bne.n	80050dc <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80050fc:	7bfb      	ldrb	r3, [r7, #15]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d168      	bne.n	80051d4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d113      	bne.n	8005130 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005108:	4b35      	ldr	r3, [pc, #212]	; (80051e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800510a:	691a      	ldr	r2, [r3, #16]
 800510c:	4b35      	ldr	r3, [pc, #212]	; (80051e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800510e:	4013      	ands	r3, r2
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	6892      	ldr	r2, [r2, #8]
 8005114:	0211      	lsls	r1, r2, #8
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	68d2      	ldr	r2, [r2, #12]
 800511a:	06d2      	lsls	r2, r2, #27
 800511c:	4311      	orrs	r1, r2
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	6852      	ldr	r2, [r2, #4]
 8005122:	3a01      	subs	r2, #1
 8005124:	0112      	lsls	r2, r2, #4
 8005126:	430a      	orrs	r2, r1
 8005128:	492d      	ldr	r1, [pc, #180]	; (80051e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800512a:	4313      	orrs	r3, r2
 800512c:	610b      	str	r3, [r1, #16]
 800512e:	e02d      	b.n	800518c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	2b01      	cmp	r3, #1
 8005134:	d115      	bne.n	8005162 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005136:	4b2a      	ldr	r3, [pc, #168]	; (80051e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005138:	691a      	ldr	r2, [r3, #16]
 800513a:	4b2b      	ldr	r3, [pc, #172]	; (80051e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800513c:	4013      	ands	r3, r2
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	6892      	ldr	r2, [r2, #8]
 8005142:	0211      	lsls	r1, r2, #8
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	6912      	ldr	r2, [r2, #16]
 8005148:	0852      	lsrs	r2, r2, #1
 800514a:	3a01      	subs	r2, #1
 800514c:	0552      	lsls	r2, r2, #21
 800514e:	4311      	orrs	r1, r2
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	6852      	ldr	r2, [r2, #4]
 8005154:	3a01      	subs	r2, #1
 8005156:	0112      	lsls	r2, r2, #4
 8005158:	430a      	orrs	r2, r1
 800515a:	4921      	ldr	r1, [pc, #132]	; (80051e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800515c:	4313      	orrs	r3, r2
 800515e:	610b      	str	r3, [r1, #16]
 8005160:	e014      	b.n	800518c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005162:	4b1f      	ldr	r3, [pc, #124]	; (80051e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005164:	691a      	ldr	r2, [r3, #16]
 8005166:	4b21      	ldr	r3, [pc, #132]	; (80051ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005168:	4013      	ands	r3, r2
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	6892      	ldr	r2, [r2, #8]
 800516e:	0211      	lsls	r1, r2, #8
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	6952      	ldr	r2, [r2, #20]
 8005174:	0852      	lsrs	r2, r2, #1
 8005176:	3a01      	subs	r2, #1
 8005178:	0652      	lsls	r2, r2, #25
 800517a:	4311      	orrs	r1, r2
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	6852      	ldr	r2, [r2, #4]
 8005180:	3a01      	subs	r2, #1
 8005182:	0112      	lsls	r2, r2, #4
 8005184:	430a      	orrs	r2, r1
 8005186:	4916      	ldr	r1, [pc, #88]	; (80051e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005188:	4313      	orrs	r3, r2
 800518a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800518c:	4b14      	ldr	r3, [pc, #80]	; (80051e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a13      	ldr	r2, [pc, #76]	; (80051e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005192:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005196:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005198:	f7fc ff7c 	bl	8002094 <HAL_GetTick>
 800519c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800519e:	e009      	b.n	80051b4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051a0:	f7fc ff78 	bl	8002094 <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d902      	bls.n	80051b4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	73fb      	strb	r3, [r7, #15]
          break;
 80051b2:	e005      	b.n	80051c0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051b4:	4b0a      	ldr	r3, [pc, #40]	; (80051e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d0ef      	beq.n	80051a0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80051c0:	7bfb      	ldrb	r3, [r7, #15]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d106      	bne.n	80051d4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80051c6:	4b06      	ldr	r3, [pc, #24]	; (80051e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051c8:	691a      	ldr	r2, [r3, #16]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	4904      	ldr	r1, [pc, #16]	; (80051e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051d0:	4313      	orrs	r3, r2
 80051d2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80051d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	40021000 	.word	0x40021000
 80051e4:	07ff800f 	.word	0x07ff800f
 80051e8:	ff9f800f 	.word	0xff9f800f
 80051ec:	f9ff800f 	.word	0xf9ff800f

080051f0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80051fa:	2300      	movs	r3, #0
 80051fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80051fe:	4b72      	ldr	r3, [pc, #456]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	f003 0303 	and.w	r3, r3, #3
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00e      	beq.n	8005228 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800520a:	4b6f      	ldr	r3, [pc, #444]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	f003 0203 	and.w	r2, r3, #3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	429a      	cmp	r2, r3
 8005218:	d103      	bne.n	8005222 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
       ||
 800521e:	2b00      	cmp	r3, #0
 8005220:	d142      	bne.n	80052a8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	73fb      	strb	r3, [r7, #15]
 8005226:	e03f      	b.n	80052a8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2b03      	cmp	r3, #3
 800522e:	d018      	beq.n	8005262 <RCCEx_PLLSAI2_Config+0x72>
 8005230:	2b03      	cmp	r3, #3
 8005232:	d825      	bhi.n	8005280 <RCCEx_PLLSAI2_Config+0x90>
 8005234:	2b01      	cmp	r3, #1
 8005236:	d002      	beq.n	800523e <RCCEx_PLLSAI2_Config+0x4e>
 8005238:	2b02      	cmp	r3, #2
 800523a:	d009      	beq.n	8005250 <RCCEx_PLLSAI2_Config+0x60>
 800523c:	e020      	b.n	8005280 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800523e:	4b62      	ldr	r3, [pc, #392]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0302 	and.w	r3, r3, #2
 8005246:	2b00      	cmp	r3, #0
 8005248:	d11d      	bne.n	8005286 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800524e:	e01a      	b.n	8005286 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005250:	4b5d      	ldr	r3, [pc, #372]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005258:	2b00      	cmp	r3, #0
 800525a:	d116      	bne.n	800528a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005260:	e013      	b.n	800528a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005262:	4b59      	ldr	r3, [pc, #356]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d10f      	bne.n	800528e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800526e:	4b56      	ldr	r3, [pc, #344]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d109      	bne.n	800528e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800527e:	e006      	b.n	800528e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	73fb      	strb	r3, [r7, #15]
      break;
 8005284:	e004      	b.n	8005290 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005286:	bf00      	nop
 8005288:	e002      	b.n	8005290 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800528a:	bf00      	nop
 800528c:	e000      	b.n	8005290 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800528e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005290:	7bfb      	ldrb	r3, [r7, #15]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d108      	bne.n	80052a8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005296:	4b4c      	ldr	r3, [pc, #304]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	f023 0203 	bic.w	r2, r3, #3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4949      	ldr	r1, [pc, #292]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80052a8:	7bfb      	ldrb	r3, [r7, #15]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	f040 8086 	bne.w	80053bc <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80052b0:	4b45      	ldr	r3, [pc, #276]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a44      	ldr	r2, [pc, #272]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80052b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052bc:	f7fc feea 	bl	8002094 <HAL_GetTick>
 80052c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80052c2:	e009      	b.n	80052d8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80052c4:	f7fc fee6 	bl	8002094 <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d902      	bls.n	80052d8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	73fb      	strb	r3, [r7, #15]
        break;
 80052d6:	e005      	b.n	80052e4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80052d8:	4b3b      	ldr	r3, [pc, #236]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d1ef      	bne.n	80052c4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80052e4:	7bfb      	ldrb	r3, [r7, #15]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d168      	bne.n	80053bc <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d113      	bne.n	8005318 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80052f0:	4b35      	ldr	r3, [pc, #212]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80052f2:	695a      	ldr	r2, [r3, #20]
 80052f4:	4b35      	ldr	r3, [pc, #212]	; (80053cc <RCCEx_PLLSAI2_Config+0x1dc>)
 80052f6:	4013      	ands	r3, r2
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	6892      	ldr	r2, [r2, #8]
 80052fc:	0211      	lsls	r1, r2, #8
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	68d2      	ldr	r2, [r2, #12]
 8005302:	06d2      	lsls	r2, r2, #27
 8005304:	4311      	orrs	r1, r2
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	6852      	ldr	r2, [r2, #4]
 800530a:	3a01      	subs	r2, #1
 800530c:	0112      	lsls	r2, r2, #4
 800530e:	430a      	orrs	r2, r1
 8005310:	492d      	ldr	r1, [pc, #180]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005312:	4313      	orrs	r3, r2
 8005314:	614b      	str	r3, [r1, #20]
 8005316:	e02d      	b.n	8005374 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	2b01      	cmp	r3, #1
 800531c:	d115      	bne.n	800534a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800531e:	4b2a      	ldr	r3, [pc, #168]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005320:	695a      	ldr	r2, [r3, #20]
 8005322:	4b2b      	ldr	r3, [pc, #172]	; (80053d0 <RCCEx_PLLSAI2_Config+0x1e0>)
 8005324:	4013      	ands	r3, r2
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	6892      	ldr	r2, [r2, #8]
 800532a:	0211      	lsls	r1, r2, #8
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	6912      	ldr	r2, [r2, #16]
 8005330:	0852      	lsrs	r2, r2, #1
 8005332:	3a01      	subs	r2, #1
 8005334:	0552      	lsls	r2, r2, #21
 8005336:	4311      	orrs	r1, r2
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	6852      	ldr	r2, [r2, #4]
 800533c:	3a01      	subs	r2, #1
 800533e:	0112      	lsls	r2, r2, #4
 8005340:	430a      	orrs	r2, r1
 8005342:	4921      	ldr	r1, [pc, #132]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005344:	4313      	orrs	r3, r2
 8005346:	614b      	str	r3, [r1, #20]
 8005348:	e014      	b.n	8005374 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800534a:	4b1f      	ldr	r3, [pc, #124]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800534c:	695a      	ldr	r2, [r3, #20]
 800534e:	4b21      	ldr	r3, [pc, #132]	; (80053d4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8005350:	4013      	ands	r3, r2
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	6892      	ldr	r2, [r2, #8]
 8005356:	0211      	lsls	r1, r2, #8
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	6952      	ldr	r2, [r2, #20]
 800535c:	0852      	lsrs	r2, r2, #1
 800535e:	3a01      	subs	r2, #1
 8005360:	0652      	lsls	r2, r2, #25
 8005362:	4311      	orrs	r1, r2
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	6852      	ldr	r2, [r2, #4]
 8005368:	3a01      	subs	r2, #1
 800536a:	0112      	lsls	r2, r2, #4
 800536c:	430a      	orrs	r2, r1
 800536e:	4916      	ldr	r1, [pc, #88]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005370:	4313      	orrs	r3, r2
 8005372:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005374:	4b14      	ldr	r3, [pc, #80]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a13      	ldr	r2, [pc, #76]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800537a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800537e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005380:	f7fc fe88 	bl	8002094 <HAL_GetTick>
 8005384:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005386:	e009      	b.n	800539c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005388:	f7fc fe84 	bl	8002094 <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	2b02      	cmp	r3, #2
 8005394:	d902      	bls.n	800539c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	73fb      	strb	r3, [r7, #15]
          break;
 800539a:	e005      	b.n	80053a8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800539c:	4b0a      	ldr	r3, [pc, #40]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d0ef      	beq.n	8005388 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80053a8:	7bfb      	ldrb	r3, [r7, #15]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d106      	bne.n	80053bc <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80053ae:	4b06      	ldr	r3, [pc, #24]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053b0:	695a      	ldr	r2, [r3, #20]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	4904      	ldr	r1, [pc, #16]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80053bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3710      	adds	r7, #16
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	40021000 	.word	0x40021000
 80053cc:	07ff800f 	.word	0x07ff800f
 80053d0:	ff9f800f 	.word	0xff9f800f
 80053d4:	f9ff800f 	.word	0xf9ff800f

080053d8 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80053d8:	b480      	push	{r7}
 80053da:	b089      	sub	sp, #36	; 0x24
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80053e2:	2300      	movs	r3, #0
 80053e4:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 80053e6:	2300      	movs	r3, #0
 80053e8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80053ea:	2300      	movs	r3, #0
 80053ec:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053f4:	d10b      	bne.n	800540e <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80053f6:	4b7e      	ldr	r3, [pc, #504]	; (80055f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80053f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053fc:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8005400:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	2b60      	cmp	r3, #96	; 0x60
 8005406:	d112      	bne.n	800542e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005408:	4b7a      	ldr	r3, [pc, #488]	; (80055f4 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800540a:	61fb      	str	r3, [r7, #28]
 800540c:	e00f      	b.n	800542e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005414:	d10b      	bne.n	800542e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005416:	4b76      	ldr	r3, [pc, #472]	; (80055f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005418:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800541c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005420:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005428:	d101      	bne.n	800542e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800542a:	4b72      	ldr	r3, [pc, #456]	; (80055f4 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800542c:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	2b00      	cmp	r3, #0
 8005432:	f040 80d6 	bne.w	80055e2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	2b40      	cmp	r3, #64	; 0x40
 800543e:	d003      	beq.n	8005448 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005446:	d13b      	bne.n	80054c0 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005448:	4b69      	ldr	r3, [pc, #420]	; (80055f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005450:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005454:	f040 80c4 	bne.w	80055e0 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8005458:	4b65      	ldr	r3, [pc, #404]	; (80055f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005460:	2b00      	cmp	r3, #0
 8005462:	f000 80bd 	beq.w	80055e0 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005466:	4b62      	ldr	r3, [pc, #392]	; (80055f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	091b      	lsrs	r3, r3, #4
 800546c:	f003 030f 	and.w	r3, r3, #15
 8005470:	3301      	adds	r3, #1
 8005472:	693a      	ldr	r2, [r7, #16]
 8005474:	fbb2 f3f3 	udiv	r3, r2, r3
 8005478:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800547a:	4b5d      	ldr	r3, [pc, #372]	; (80055f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	0a1b      	lsrs	r3, r3, #8
 8005480:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005484:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8005486:	4b5a      	ldr	r3, [pc, #360]	; (80055f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	0edb      	lsrs	r3, r3, #27
 800548c:	f003 031f 	and.w	r3, r3, #31
 8005490:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d10a      	bne.n	80054ae <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005498:	4b55      	ldr	r3, [pc, #340]	; (80055f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d002      	beq.n	80054aa <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 80054a4:	2311      	movs	r3, #17
 80054a6:	617b      	str	r3, [r7, #20]
 80054a8:	e001      	b.n	80054ae <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 80054aa:	2307      	movs	r3, #7
 80054ac:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	fb03 f202 	mul.w	r2, r3, r2
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054bc:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80054be:	e08f      	b.n	80055e0 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d13a      	bne.n	800553c <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 80054c6:	4b4a      	ldr	r3, [pc, #296]	; (80055f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054d2:	f040 8086 	bne.w	80055e2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 80054d6:	4b46      	ldr	r3, [pc, #280]	; (80055f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d07f      	beq.n	80055e2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80054e2:	4b43      	ldr	r3, [pc, #268]	; (80055f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	091b      	lsrs	r3, r3, #4
 80054e8:	f003 030f 	and.w	r3, r3, #15
 80054ec:	3301      	adds	r3, #1
 80054ee:	693a      	ldr	r2, [r7, #16]
 80054f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054f4:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80054f6:	4b3e      	ldr	r3, [pc, #248]	; (80055f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	0a1b      	lsrs	r3, r3, #8
 80054fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005500:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8005502:	4b3b      	ldr	r3, [pc, #236]	; (80055f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	0edb      	lsrs	r3, r3, #27
 8005508:	f003 031f 	and.w	r3, r3, #31
 800550c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d10a      	bne.n	800552a <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8005514:	4b36      	ldr	r3, [pc, #216]	; (80055f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d002      	beq.n	8005526 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8005520:	2311      	movs	r3, #17
 8005522:	617b      	str	r3, [r7, #20]
 8005524:	e001      	b.n	800552a <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8005526:	2307      	movs	r3, #7
 8005528:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	fb03 f202 	mul.w	r2, r3, r2
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	fbb2 f3f3 	udiv	r3, r2, r3
 8005538:	61fb      	str	r3, [r7, #28]
 800553a:	e052      	b.n	80055e2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	2b80      	cmp	r3, #128	; 0x80
 8005540:	d003      	beq.n	800554a <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005548:	d109      	bne.n	800555e <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800554a:	4b29      	ldr	r3, [pc, #164]	; (80055f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005552:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005556:	d144      	bne.n	80055e2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8005558:	4b27      	ldr	r3, [pc, #156]	; (80055f8 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 800555a:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800555c:	e041      	b.n	80055e2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	2b20      	cmp	r3, #32
 8005562:	d003      	beq.n	800556c <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800556a:	d13a      	bne.n	80055e2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800556c:	4b20      	ldr	r3, [pc, #128]	; (80055f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005574:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005578:	d133      	bne.n	80055e2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800557a:	4b1d      	ldr	r3, [pc, #116]	; (80055f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800557c:	695b      	ldr	r3, [r3, #20]
 800557e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d02d      	beq.n	80055e2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8005586:	4b1a      	ldr	r3, [pc, #104]	; (80055f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	091b      	lsrs	r3, r3, #4
 800558c:	f003 030f 	and.w	r3, r3, #15
 8005590:	3301      	adds	r3, #1
 8005592:	693a      	ldr	r2, [r7, #16]
 8005594:	fbb2 f3f3 	udiv	r3, r2, r3
 8005598:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800559a:	4b15      	ldr	r3, [pc, #84]	; (80055f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800559c:	695b      	ldr	r3, [r3, #20]
 800559e:	0a1b      	lsrs	r3, r3, #8
 80055a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055a4:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 80055a6:	4b12      	ldr	r3, [pc, #72]	; (80055f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	0edb      	lsrs	r3, r3, #27
 80055ac:	f003 031f 	and.w	r3, r3, #31
 80055b0:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d10a      	bne.n	80055ce <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80055b8:	4b0d      	ldr	r3, [pc, #52]	; (80055f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80055ba:	695b      	ldr	r3, [r3, #20]
 80055bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d002      	beq.n	80055ca <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 80055c4:	2311      	movs	r3, #17
 80055c6:	617b      	str	r3, [r7, #20]
 80055c8:	e001      	b.n	80055ce <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 80055ca:	2307      	movs	r3, #7
 80055cc:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	fb03 f202 	mul.w	r2, r3, r2
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055dc:	61fb      	str	r3, [r7, #28]
 80055de:	e000      	b.n	80055e2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80055e0:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80055e2:	69fb      	ldr	r3, [r7, #28]
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3724      	adds	r7, #36	; 0x24
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr
 80055f0:	40021000 	.word	0x40021000
 80055f4:	001fff68 	.word	0x001fff68
 80055f8:	00f42400 	.word	0x00f42400

080055fc <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b08a      	sub	sp, #40	; 0x28
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d101      	bne.n	800560e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e1c7      	b.n	800599e <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005614:	2b01      	cmp	r3, #1
 8005616:	d10e      	bne.n	8005636 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a81      	ldr	r2, [pc, #516]	; (8005824 <HAL_SAI_Init+0x228>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d107      	bne.n	8005632 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 8005626:	2b01      	cmp	r3, #1
 8005628:	d103      	bne.n	8005632 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800562e:	2b00      	cmp	r3, #0
 8005630:	d001      	beq.n	8005636 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e1b3      	b.n	800599e <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800563c:	b2db      	uxtb	r3, r3
 800563e:	2b00      	cmp	r3, #0
 8005640:	d106      	bne.n	8005650 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f7fc fba2 	bl	8001d94 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 f9b1 	bl	80059b8 <SAI_Disable>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d001      	beq.n	8005660 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e19e      	b.n	800599e <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2202      	movs	r2, #2
 8005664:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	2b02      	cmp	r3, #2
 800566e:	d00c      	beq.n	800568a <HAL_SAI_Init+0x8e>
 8005670:	2b02      	cmp	r3, #2
 8005672:	d80d      	bhi.n	8005690 <HAL_SAI_Init+0x94>
 8005674:	2b00      	cmp	r3, #0
 8005676:	d002      	beq.n	800567e <HAL_SAI_Init+0x82>
 8005678:	2b01      	cmp	r3, #1
 800567a:	d003      	beq.n	8005684 <HAL_SAI_Init+0x88>
 800567c:	e008      	b.n	8005690 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800567e:	2300      	movs	r3, #0
 8005680:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8005682:	e008      	b.n	8005696 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8005684:	2310      	movs	r3, #16
 8005686:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8005688:	e005      	b.n	8005696 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800568a:	2320      	movs	r3, #32
 800568c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800568e:	e002      	b.n	8005696 <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 8005690:	2300      	movs	r3, #0
 8005692:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8005694:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	2b03      	cmp	r3, #3
 800569c:	d81d      	bhi.n	80056da <HAL_SAI_Init+0xde>
 800569e:	a201      	add	r2, pc, #4	; (adr r2, 80056a4 <HAL_SAI_Init+0xa8>)
 80056a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a4:	080056b5 	.word	0x080056b5
 80056a8:	080056bb 	.word	0x080056bb
 80056ac:	080056c3 	.word	0x080056c3
 80056b0:	080056cb 	.word	0x080056cb
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 80056b4:	2300      	movs	r3, #0
 80056b6:	61fb      	str	r3, [r7, #28]
      break;
 80056b8:	e012      	b.n	80056e0 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80056ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056be:	61fb      	str	r3, [r7, #28]
      break;
 80056c0:	e00e      	b.n	80056e0 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80056c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80056c6:	61fb      	str	r3, [r7, #28]
      break;
 80056c8:	e00a      	b.n	80056e0 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80056ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80056ce:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80056d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d2:	f043 0301 	orr.w	r3, r3, #1
 80056d6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80056d8:	e002      	b.n	80056e0 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 80056da:	2300      	movs	r3, #0
 80056dc:	61fb      	str	r3, [r7, #28]
      break;
 80056de:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a4f      	ldr	r2, [pc, #316]	; (8005824 <HAL_SAI_Init+0x228>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d004      	beq.n	80056f4 <HAL_SAI_Init+0xf8>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a4e      	ldr	r2, [pc, #312]	; (8005828 <HAL_SAI_Init+0x22c>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d103      	bne.n	80056fc <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 80056f4:	4a4d      	ldr	r2, [pc, #308]	; (800582c <HAL_SAI_Init+0x230>)
 80056f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f8:	6013      	str	r3, [r2, #0]
 80056fa:	e002      	b.n	8005702 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80056fc:	4a4c      	ldr	r2, [pc, #304]	; (8005830 <HAL_SAI_Init+0x234>)
 80056fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005700:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	69db      	ldr	r3, [r3, #28]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d073      	beq.n	80057f2 <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a45      	ldr	r2, [pc, #276]	; (8005824 <HAL_SAI_Init+0x228>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d004      	beq.n	800571e <HAL_SAI_Init+0x122>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a43      	ldr	r2, [pc, #268]	; (8005828 <HAL_SAI_Init+0x22c>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d105      	bne.n	800572a <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800571e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005722:	f7fe fd51 	bl	80041c8 <HAL_RCCEx_GetPeriphCLKFreq>
 8005726:	61b8      	str	r0, [r7, #24]
 8005728:	e004      	b.n	8005734 <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800572a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800572e:	f7fe fd4b 	bl	80041c8 <HAL_RCCEx_GetPeriphCLKFreq>
 8005732:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	695b      	ldr	r3, [r3, #20]
 8005738:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800573c:	d120      	bne.n	8005780 <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005742:	2b04      	cmp	r3, #4
 8005744:	d102      	bne.n	800574c <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8005746:	2340      	movs	r3, #64	; 0x40
 8005748:	613b      	str	r3, [r7, #16]
 800574a:	e00a      	b.n	8005762 <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005750:	2b08      	cmp	r3, #8
 8005752:	d103      	bne.n	800575c <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8005754:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005758:	613b      	str	r3, [r7, #16]
 800575a:	e002      	b.n	8005762 <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005760:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8005762:	69ba      	ldr	r2, [r7, #24]
 8005764:	4613      	mov	r3, r2
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	4413      	add	r3, r2
 800576a:	005b      	lsls	r3, r3, #1
 800576c:	4619      	mov	r1, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	69db      	ldr	r3, [r3, #28]
 8005772:	693a      	ldr	r2, [r7, #16]
 8005774:	fb02 f303 	mul.w	r3, r2, r3
 8005778:	fbb1 f3f3 	udiv	r3, r1, r3
 800577c:	617b      	str	r3, [r7, #20]
 800577e:	e017      	b.n	80057b0 <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005784:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005788:	d101      	bne.n	800578e <HAL_SAI_Init+0x192>
 800578a:	2302      	movs	r3, #2
 800578c:	e000      	b.n	8005790 <HAL_SAI_Init+0x194>
 800578e:	2301      	movs	r3, #1
 8005790:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8005792:	69ba      	ldr	r2, [r7, #24]
 8005794:	4613      	mov	r3, r2
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	4413      	add	r3, r2
 800579a:	005b      	lsls	r3, r3, #1
 800579c:	4619      	mov	r1, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	69db      	ldr	r3, [r3, #28]
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	fb02 f303 	mul.w	r3, r2, r3
 80057a8:	021b      	lsls	r3, r3, #8
 80057aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80057ae:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	4a20      	ldr	r2, [pc, #128]	; (8005834 <HAL_SAI_Init+0x238>)
 80057b4:	fba2 2303 	umull	r2, r3, r2, r3
 80057b8:	08da      	lsrs	r2, r3, #3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 80057be:	6979      	ldr	r1, [r7, #20]
 80057c0:	4b1c      	ldr	r3, [pc, #112]	; (8005834 <HAL_SAI_Init+0x238>)
 80057c2:	fba3 2301 	umull	r2, r3, r3, r1
 80057c6:	08da      	lsrs	r2, r3, #3
 80057c8:	4613      	mov	r3, r2
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	4413      	add	r3, r2
 80057ce:	005b      	lsls	r3, r3, #1
 80057d0:	1aca      	subs	r2, r1, r3
 80057d2:	2a08      	cmp	r2, #8
 80057d4:	d904      	bls.n	80057e0 <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	1c5a      	adds	r2, r3, #1
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e4:	2b04      	cmp	r3, #4
 80057e6:	d104      	bne.n	80057f2 <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a1b      	ldr	r3, [r3, #32]
 80057ec:	085a      	lsrs	r2, r3, #1
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d003      	beq.n	8005802 <HAL_SAI_Init+0x206>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	2b02      	cmp	r3, #2
 8005800:	d109      	bne.n	8005816 <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005806:	2b01      	cmp	r3, #1
 8005808:	d101      	bne.n	800580e <HAL_SAI_Init+0x212>
 800580a:	2300      	movs	r3, #0
 800580c:	e001      	b.n	8005812 <HAL_SAI_Init+0x216>
 800580e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005812:	623b      	str	r3, [r7, #32]
 8005814:	e012      	b.n	800583c <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800581a:	2b01      	cmp	r3, #1
 800581c:	d10c      	bne.n	8005838 <HAL_SAI_Init+0x23c>
 800581e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005822:	e00a      	b.n	800583a <HAL_SAI_Init+0x23e>
 8005824:	40015404 	.word	0x40015404
 8005828:	40015424 	.word	0x40015424
 800582c:	40015400 	.word	0x40015400
 8005830:	40015800 	.word	0x40015800
 8005834:	cccccccd 	.word	0xcccccccd
 8005838:	2300      	movs	r3, #0
 800583a:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	6819      	ldr	r1, [r3, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	4b58      	ldr	r3, [pc, #352]	; (80059a8 <HAL_SAI_Init+0x3ac>)
 8005848:	400b      	ands	r3, r1
 800584a:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	6819      	ldr	r1, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	685a      	ldr	r2, [r3, #4]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005860:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005866:	431a      	orrs	r2, r3
 8005868:	6a3b      	ldr	r3, [r7, #32]
 800586a:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 8005874:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005880:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a1b      	ldr	r3, [r3, #32]
 8005886:	051b      	lsls	r3, r3, #20
 8005888:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800588e:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	430a      	orrs	r2, r1
 8005896:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	6812      	ldr	r2, [r2, #0]
 80058a2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80058a6:	f023 030f 	bic.w	r3, r3, #15
 80058aa:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	6859      	ldr	r1, [r3, #4]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	699a      	ldr	r2, [r3, #24]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ba:	431a      	orrs	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c0:	431a      	orrs	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	430a      	orrs	r2, r1
 80058c8:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	6899      	ldr	r1, [r3, #8]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	4b35      	ldr	r3, [pc, #212]	; (80059ac <HAL_SAI_Init+0x3b0>)
 80058d6:	400b      	ands	r3, r1
 80058d8:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	6899      	ldr	r1, [r3, #8]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058e4:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80058ea:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
                           hsai->FrameInit.FSOffset |
 80058f0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSDefinition |
 80058f6:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058fc:	3b01      	subs	r3, #1
 80058fe:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8005900:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	430a      	orrs	r2, r1
 8005908:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68d9      	ldr	r1, [r3, #12]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	f24f 0320 	movw	r3, #61472	; 0xf020
 8005918:	400b      	ands	r3, r1
 800591a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68d9      	ldr	r1, [r3, #12]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800592a:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005930:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005932:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005938:	3b01      	subs	r3, #1
 800593a:	021b      	lsls	r3, r3, #8
 800593c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	430a      	orrs	r2, r1
 8005944:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a19      	ldr	r2, [pc, #100]	; (80059b0 <HAL_SAI_Init+0x3b4>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d119      	bne.n	8005984 <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8005950:	4b18      	ldr	r3, [pc, #96]	; (80059b4 <HAL_SAI_Init+0x3b8>)
 8005952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005954:	4a17      	ldr	r2, [pc, #92]	; (80059b4 <HAL_SAI_Init+0x3b8>)
 8005956:	f023 0301 	bic.w	r3, r3, #1
 800595a:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005962:	2b01      	cmp	r3, #1
 8005964:	d10e      	bne.n	8005984 <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800596e:	3b01      	subs	r3, #1
 8005970:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8005972:	4910      	ldr	r1, [pc, #64]	; (80059b4 <HAL_SAI_Init+0x3b8>)
 8005974:	4313      	orrs	r3, r2
 8005976:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8005978:	4b0e      	ldr	r3, [pc, #56]	; (80059b4 <HAL_SAI_Init+0x3b8>)
 800597a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800597c:	4a0d      	ldr	r2, [pc, #52]	; (80059b4 <HAL_SAI_Init+0x3b8>)
 800597e:	f043 0301 	orr.w	r3, r3, #1
 8005982:	6453      	str	r3, [r2, #68]	; 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

  return HAL_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3728      	adds	r7, #40	; 0x28
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	f805c010 	.word	0xf805c010
 80059ac:	fff88000 	.word	0xfff88000
 80059b0:	40015404 	.word	0x40015404
 80059b4:	40015400 	.word	0x40015400

080059b8 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80059c0:	4b18      	ldr	r3, [pc, #96]	; (8005a24 <SAI_Disable+0x6c>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a18      	ldr	r2, [pc, #96]	; (8005a28 <SAI_Disable+0x70>)
 80059c6:	fba2 2303 	umull	r2, r3, r2, r3
 80059ca:	0b1b      	lsrs	r3, r3, #12
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80059d0:	2300      	movs	r3, #0
 80059d2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80059e2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d10a      	bne.n	8005a00 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      status = HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	72fb      	strb	r3, [r7, #11]
      break;
 80059fe:	e009      	b.n	8005a14 <SAI_Disable+0x5c>
    }
    count--;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	3b01      	subs	r3, #1
 8005a04:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d1e7      	bne.n	80059e4 <SAI_Disable+0x2c>

  return status;
 8005a14:	7afb      	ldrb	r3, [r7, #11]
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3714      	adds	r7, #20
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	20000000 	.word	0x20000000
 8005a28:	95cbec1b 	.word	0x95cbec1b

08005a2c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b08a      	sub	sp, #40	; 0x28
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d101      	bne.n	8005a3e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e078      	b.n	8005b30 <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d105      	bne.n	8005a56 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f7fb febf 	bl	80017d4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2203      	movs	r2, #3
 8005a5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f86a 	bl	8005b38 <HAL_SD_InitCard>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d001      	beq.n	8005a6e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e060      	b.n	8005b30 <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8005a6e:	f107 0308 	add.w	r3, r7, #8
 8005a72:	4619      	mov	r1, r3
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 faa5 	bl	8005fc4 <HAL_SD_GetCardStatus>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d001      	beq.n	8005a84 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e055      	b.n	8005b30 <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8005a84:	7e3b      	ldrb	r3, [r7, #24]
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8005a8a:	7e7b      	ldrb	r3, [r7, #25]
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d10a      	bne.n	8005aae <HAL_SD_Init+0x82>
 8005a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d102      	bne.n	8005aa4 <HAL_SD_Init+0x78>
 8005a9e:	6a3b      	ldr	r3, [r7, #32]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d004      	beq.n	8005aae <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aaa:	65da      	str	r2, [r3, #92]	; 0x5c
 8005aac:	e00b      	b.n	8005ac6 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d104      	bne.n	8005ac0 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005abc:	65da      	str	r2, [r3, #92]	; 0x5c
 8005abe:	e002      	b.n	8005ac6 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	4619      	mov	r1, r3
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f000 fb2f 	bl	8006130 <HAL_SD_ConfigWideBusOperation>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d001      	beq.n	8005adc <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e029      	b.n	8005b30 <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8005adc:	f7fc fada 	bl	8002094 <HAL_GetTick>
 8005ae0:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005ae2:	e014      	b.n	8005b0e <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8005ae4:	f7fc fad6 	bl	8002094 <HAL_GetTick>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af2:	d10c      	bne.n	8005b0e <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005afa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	e010      	b.n	8005b30 <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 fc22 	bl	8006358 <HAL_SD_GetCardState>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b04      	cmp	r3, #4
 8005b18:	d1e4      	bne.n	8005ae4 <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3728      	adds	r7, #40	; 0x28
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005b38:	b5b0      	push	{r4, r5, r7, lr}
 8005b3a:	b08e      	sub	sp, #56	; 0x38
 8005b3c:	af04      	add	r7, sp, #16
 8005b3e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005b40:	2300      	movs	r3, #0
 8005b42:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005b44:	2300      	movs	r3, #0
 8005b46:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8005b50:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005b54:	f7fe fb38 	bl	80041c8 <HAL_RCCEx_GetPeriphCLKFreq>
 8005b58:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8005b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d109      	bne.n	8005b74 <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005b6e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	e079      	b.n	8005c68 <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8005b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b76:	0a1b      	lsrs	r3, r3, #8
 8005b78:	4a3d      	ldr	r2, [pc, #244]	; (8005c70 <HAL_SD_InitCard+0x138>)
 8005b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b7e:	091b      	lsrs	r3, r3, #4
 8005b80:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	699b      	ldr	r3, [r3, #24]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d107      	bne.n	8005ba0 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f042 0210 	orr.w	r2, r2, #16
 8005b9e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681d      	ldr	r5, [r3, #0]
 8005ba4:	466c      	mov	r4, sp
 8005ba6:	f107 0314 	add.w	r3, r7, #20
 8005baa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005bae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005bb2:	f107 0308 	add.w	r3, r7, #8
 8005bb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005bb8:	4628      	mov	r0, r5
 8005bba:	f002 fc71 	bl	80084a0 <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f002 fca3 	bl	800850e <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	005b      	lsls	r3, r3, #1
 8005bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd2:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8005bd4:	4a27      	ldr	r2, [pc, #156]	; (8005c74 <HAL_SD_InitCard+0x13c>)
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bdc:	3301      	adds	r3, #1
 8005bde:	4618      	mov	r0, r3
 8005be0:	f7fc fa64 	bl	80020ac <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f000 fc97 	bl	8006518 <SD_PowerON>
 8005bea:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005bec:	6a3b      	ldr	r3, [r7, #32]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00b      	beq.n	8005c0a <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bfe:	6a3b      	ldr	r3, [r7, #32]
 8005c00:	431a      	orrs	r2, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e02e      	b.n	8005c68 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 fbc4 	bl	8006398 <SD_InitCard>
 8005c10:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c12:	6a3b      	ldr	r3, [r7, #32]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d00b      	beq.n	8005c30 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c24:	6a3b      	ldr	r3, [r7, #32]
 8005c26:	431a      	orrs	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e01b      	b.n	8005c68 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f002 fcff 	bl	800863c <SDMMC_CmdBlockLength>
 8005c3e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c40:	6a3b      	ldr	r3, [r7, #32]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d00f      	beq.n	8005c66 <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a0b      	ldr	r2, [pc, #44]	; (8005c78 <HAL_SD_InitCard+0x140>)
 8005c4c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c52:	6a3b      	ldr	r3, [r7, #32]
 8005c54:	431a      	orrs	r2, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e000      	b.n	8005c68 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3728      	adds	r7, #40	; 0x28
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bdb0      	pop	{r4, r5, r7, pc}
 8005c70:	014f8b59 	.word	0x014f8b59
 8005c74:	00012110 	.word	0x00012110
 8005c78:	1fe00fff 	.word	0x1fe00fff

08005c7c <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c8a:	0f9b      	lsrs	r3, r3, #30
 8005c8c:	b2da      	uxtb	r2, r3
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c96:	0e9b      	lsrs	r3, r3, #26
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	f003 030f 	and.w	r3, r3, #15
 8005c9e:	b2da      	uxtb	r2, r3
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ca8:	0e1b      	lsrs	r3, r3, #24
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	f003 0303 	and.w	r3, r3, #3
 8005cb0:	b2da      	uxtb	r2, r3
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cba:	0c1b      	lsrs	r3, r3, #16
 8005cbc:	b2da      	uxtb	r2, r3
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cc6:	0a1b      	lsrs	r3, r3, #8
 8005cc8:	b2da      	uxtb	r2, r3
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cd2:	b2da      	uxtb	r2, r3
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cdc:	0d1b      	lsrs	r3, r3, #20
 8005cde:	b29a      	uxth	r2, r3
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ce8:	0c1b      	lsrs	r3, r3, #16
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	f003 030f 	and.w	r3, r3, #15
 8005cf0:	b2da      	uxtb	r2, r3
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cfa:	0bdb      	lsrs	r3, r3, #15
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	f003 0301 	and.w	r3, r3, #1
 8005d02:	b2da      	uxtb	r2, r3
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d0c:	0b9b      	lsrs	r3, r3, #14
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	f003 0301 	and.w	r3, r3, #1
 8005d14:	b2da      	uxtb	r2, r3
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d1e:	0b5b      	lsrs	r3, r3, #13
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	f003 0301 	and.w	r3, r3, #1
 8005d26:	b2da      	uxtb	r2, r3
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d30:	0b1b      	lsrs	r3, r3, #12
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	f003 0301 	and.w	r3, r3, #1
 8005d38:	b2da      	uxtb	r2, r3
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	2200      	movs	r2, #0
 8005d42:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d163      	bne.n	8005e14 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d50:	009a      	lsls	r2, r3, #2
 8005d52:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005d56:	4013      	ands	r3, r2
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005d5c:	0f92      	lsrs	r2, r2, #30
 8005d5e:	431a      	orrs	r2, r3
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d68:	0edb      	lsrs	r3, r3, #27
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	f003 0307 	and.w	r3, r3, #7
 8005d70:	b2da      	uxtb	r2, r3
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d7a:	0e1b      	lsrs	r3, r3, #24
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	f003 0307 	and.w	r3, r3, #7
 8005d82:	b2da      	uxtb	r2, r3
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d8c:	0d5b      	lsrs	r3, r3, #21
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	f003 0307 	and.w	r3, r3, #7
 8005d94:	b2da      	uxtb	r2, r3
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d9e:	0c9b      	lsrs	r3, r3, #18
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	f003 0307 	and.w	r3, r3, #7
 8005da6:	b2da      	uxtb	r2, r3
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005db0:	0bdb      	lsrs	r3, r3, #15
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	f003 0307 	and.w	r3, r3, #7
 8005db8:	b2da      	uxtb	r2, r3
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	1c5a      	adds	r2, r3, #1
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	7e1b      	ldrb	r3, [r3, #24]
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	f003 0307 	and.w	r3, r3, #7
 8005dd2:	3302      	adds	r3, #2
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005dde:	fb03 f202 	mul.w	r2, r3, r2
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	7a1b      	ldrb	r3, [r3, #8]
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	f003 030f 	and.w	r3, r3, #15
 8005df0:	2201      	movs	r2, #1
 8005df2:	409a      	lsls	r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005e00:	0a52      	lsrs	r2, r2, #9
 8005e02:	fb03 f202 	mul.w	r2, r3, r2
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e10:	659a      	str	r2, [r3, #88]	; 0x58
 8005e12:	e031      	b.n	8005e78 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d11d      	bne.n	8005e58 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e20:	041b      	lsls	r3, r3, #16
 8005e22:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e2a:	0c1b      	lsrs	r3, r3, #16
 8005e2c:	431a      	orrs	r2, r3
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	3301      	adds	r3, #1
 8005e38:	029a      	lsls	r2, r3, #10
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e4c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	659a      	str	r2, [r3, #88]	; 0x58
 8005e56:	e00f      	b.n	8005e78 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a58      	ldr	r2, [pc, #352]	; (8005fc0 <HAL_SD_GetCardCSD+0x344>)
 8005e5e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e64:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e09d      	b.n	8005fb4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e7c:	0b9b      	lsrs	r3, r3, #14
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	f003 0301 	and.w	r3, r3, #1
 8005e84:	b2da      	uxtb	r2, r3
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e8e:	09db      	lsrs	r3, r3, #7
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e96:	b2da      	uxtb	r2, r3
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ea6:	b2da      	uxtb	r2, r3
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005eb0:	0fdb      	lsrs	r3, r3, #31
 8005eb2:	b2da      	uxtb	r2, r3
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ebc:	0f5b      	lsrs	r3, r3, #29
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	f003 0303 	and.w	r3, r3, #3
 8005ec4:	b2da      	uxtb	r2, r3
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ece:	0e9b      	lsrs	r3, r3, #26
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	f003 0307 	and.w	r3, r3, #7
 8005ed6:	b2da      	uxtb	r2, r3
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ee0:	0d9b      	lsrs	r3, r3, #22
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	f003 030f 	and.w	r3, r3, #15
 8005ee8:	b2da      	uxtb	r2, r3
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ef2:	0d5b      	lsrs	r3, r3, #21
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	f003 0301 	and.w	r3, r3, #1
 8005efa:	b2da      	uxtb	r2, r3
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f0e:	0c1b      	lsrs	r3, r3, #16
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	f003 0301 	and.w	r3, r3, #1
 8005f16:	b2da      	uxtb	r2, r3
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f22:	0bdb      	lsrs	r3, r3, #15
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	f003 0301 	and.w	r3, r3, #1
 8005f2a:	b2da      	uxtb	r2, r3
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f36:	0b9b      	lsrs	r3, r3, #14
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	f003 0301 	and.w	r3, r3, #1
 8005f3e:	b2da      	uxtb	r2, r3
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f4a:	0b5b      	lsrs	r3, r3, #13
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	f003 0301 	and.w	r3, r3, #1
 8005f52:	b2da      	uxtb	r2, r3
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f5e:	0b1b      	lsrs	r3, r3, #12
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	f003 0301 	and.w	r3, r3, #1
 8005f66:	b2da      	uxtb	r2, r3
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f72:	0a9b      	lsrs	r3, r3, #10
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	f003 0303 	and.w	r3, r3, #3
 8005f7a:	b2da      	uxtb	r2, r3
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f86:	0a1b      	lsrs	r3, r3, #8
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	f003 0303 	and.w	r3, r3, #3
 8005f8e:	b2da      	uxtb	r2, r3
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f9a:	085b      	lsrs	r3, r3, #1
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fa2:	b2da      	uxtb	r2, r3
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	2201      	movs	r2, #1
 8005fae:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr
 8005fc0:	1fe00fff 	.word	0x1fe00fff

08005fc4 <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b094      	sub	sp, #80	; 0x50
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8005fd4:	f107 0308 	add.w	r3, r7, #8
 8005fd8:	4619      	mov	r1, r3
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 fba8 	bl	8006730 <SD_SendSDStatus>
 8005fe0:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8005fe2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d011      	beq.n	800600c <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a4f      	ldr	r2, [pc, #316]	; (800612c <HAL_SD_GetCardStatus+0x168>)
 8005fee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ff4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ff6:	431a      	orrs	r2, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800600a:	e070      	b.n	80060ee <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	099b      	lsrs	r3, r3, #6
 8006010:	b2db      	uxtb	r3, r3
 8006012:	f003 0303 	and.w	r3, r3, #3
 8006016:	b2da      	uxtb	r2, r3
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	095b      	lsrs	r3, r3, #5
 8006020:	b2db      	uxtb	r3, r3
 8006022:	f003 0301 	and.w	r3, r3, #1
 8006026:	b2da      	uxtb	r2, r3
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	0a1b      	lsrs	r3, r3, #8
 8006030:	b29b      	uxth	r3, r3
 8006032:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006036:	b29a      	uxth	r2, r3
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	0e1b      	lsrs	r3, r3, #24
 800603c:	b29b      	uxth	r3, r3
 800603e:	4313      	orrs	r3, r2
 8006040:	b29a      	uxth	r2, r3
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	061a      	lsls	r2, r3, #24
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	021b      	lsls	r3, r3, #8
 800604e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006052:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	0a1b      	lsrs	r3, r3, #8
 8006058:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800605c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	0e1b      	lsrs	r3, r3, #24
 8006062:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	b2da      	uxtb	r2, r3
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	0a1b      	lsrs	r3, r3, #8
 8006074:	b2da      	uxtb	r2, r3
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	0d1b      	lsrs	r3, r3, #20
 800607e:	b2db      	uxtb	r3, r3
 8006080:	f003 030f 	and.w	r3, r3, #15
 8006084:	b2da      	uxtb	r2, r3
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	0c1b      	lsrs	r3, r3, #16
 800608e:	b29b      	uxth	r3, r3
 8006090:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006094:	b29a      	uxth	r2, r3
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	b29b      	uxth	r3, r3
 800609a:	b2db      	uxtb	r3, r3
 800609c:	b29b      	uxth	r3, r3
 800609e:	4313      	orrs	r3, r2
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	0a9b      	lsrs	r3, r3, #10
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060b0:	b2da      	uxtb	r2, r3
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	0a1b      	lsrs	r3, r3, #8
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	f003 0303 	and.w	r3, r3, #3
 80060c0:	b2da      	uxtb	r2, r3
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	091b      	lsrs	r3, r3, #4
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	f003 030f 	and.w	r3, r3, #15
 80060d0:	b2da      	uxtb	r2, r3
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	f003 030f 	and.w	r3, r3, #15
 80060de:	b2da      	uxtb	r2, r3
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	0e1b      	lsrs	r3, r3, #24
 80060e8:	b2da      	uxtb	r2, r3
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80060f6:	4618      	mov	r0, r3
 80060f8:	f002 faa0 	bl	800863c <SDMMC_CmdBlockLength>
 80060fc:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80060fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006100:	2b00      	cmp	r3, #0
 8006102:	d00d      	beq.n	8006120 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a08      	ldr	r2, [pc, #32]	; (800612c <HAL_SD_GetCardStatus+0x168>)
 800610a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006110:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2201      	movs	r2, #1
 8006116:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8006120:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8006124:	4618      	mov	r0, r3
 8006126:	3750      	adds	r7, #80	; 0x50
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}
 800612c:	1fe00fff 	.word	0x1fe00fff

08006130 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006130:	b5b0      	push	{r4, r5, r7, lr}
 8006132:	b090      	sub	sp, #64	; 0x40
 8006134:	af04      	add	r7, sp, #16
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800613a:	2300      	movs	r3, #0
 800613c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2203      	movs	r2, #3
 8006144:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800614c:	2b03      	cmp	r3, #3
 800614e:	d02e      	beq.n	80061ae <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006156:	d106      	bne.n	8006166 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	639a      	str	r2, [r3, #56]	; 0x38
 8006164:	e029      	b.n	80061ba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800616c:	d10a      	bne.n	8006184 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 fbd6 	bl	8006920 <SD_WideBus_Enable>
 8006174:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800617a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617c:	431a      	orrs	r2, r3
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	639a      	str	r2, [r3, #56]	; 0x38
 8006182:	e01a      	b.n	80061ba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d10a      	bne.n	80061a0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 fc13 	bl	80069b6 <SD_WideBus_Disable>
 8006190:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006198:	431a      	orrs	r2, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	639a      	str	r2, [r3, #56]	; 0x38
 800619e:	e00c      	b.n	80061ba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	639a      	str	r2, [r3, #56]	; 0x38
 80061ac:	e005      	b.n	80061ba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d007      	beq.n	80061d2 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a60      	ldr	r2, [pc, #384]	; (8006348 <HAL_SD_ConfigWideBusOperation+0x218>)
 80061c8:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80061d0:	e097      	b.n	8006302 <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80061d2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80061d6:	f7fd fff7 	bl	80041c8 <HAL_RCCEx_GetPeriphCLKFreq>
 80061da:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 80061dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061de:	2b00      	cmp	r3, #0
 80061e0:	f000 8086 	beq.w	80062f0 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	695a      	ldr	r2, [r3, #20]
 80061fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006200:	4952      	ldr	r1, [pc, #328]	; (800634c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006202:	fba1 1303 	umull	r1, r3, r1, r3
 8006206:	0e1b      	lsrs	r3, r3, #24
 8006208:	429a      	cmp	r2, r3
 800620a:	d303      	bcc.n	8006214 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	695b      	ldr	r3, [r3, #20]
 8006210:	61fb      	str	r3, [r7, #28]
 8006212:	e05a      	b.n	80062ca <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006218:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800621c:	d103      	bne.n	8006226 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	695b      	ldr	r3, [r3, #20]
 8006222:	61fb      	str	r3, [r7, #28]
 8006224:	e051      	b.n	80062ca <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800622a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800622e:	d126      	bne.n	800627e <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	695b      	ldr	r3, [r3, #20]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d10e      	bne.n	8006256 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8006238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623a:	4a45      	ldr	r2, [pc, #276]	; (8006350 <HAL_SD_ConfigWideBusOperation+0x220>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d906      	bls.n	800624e <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006242:	4a42      	ldr	r2, [pc, #264]	; (800634c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006244:	fba2 2303 	umull	r2, r3, r2, r3
 8006248:	0e5b      	lsrs	r3, r3, #25
 800624a:	61fb      	str	r3, [r7, #28]
 800624c:	e03d      	b.n	80062ca <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	695b      	ldr	r3, [r3, #20]
 8006252:	61fb      	str	r3, [r7, #28]
 8006254:	e039      	b.n	80062ca <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	695b      	ldr	r3, [r3, #20]
 800625a:	005b      	lsls	r3, r3, #1
 800625c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800625e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006262:	4a3b      	ldr	r2, [pc, #236]	; (8006350 <HAL_SD_ConfigWideBusOperation+0x220>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d906      	bls.n	8006276 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626a:	4a38      	ldr	r2, [pc, #224]	; (800634c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800626c:	fba2 2303 	umull	r2, r3, r2, r3
 8006270:	0e5b      	lsrs	r3, r3, #25
 8006272:	61fb      	str	r3, [r7, #28]
 8006274:	e029      	b.n	80062ca <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	695b      	ldr	r3, [r3, #20]
 800627a:	61fb      	str	r3, [r7, #28]
 800627c:	e025      	b.n	80062ca <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	695b      	ldr	r3, [r3, #20]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d10e      	bne.n	80062a4 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8006286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006288:	4a32      	ldr	r2, [pc, #200]	; (8006354 <HAL_SD_ConfigWideBusOperation+0x224>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d906      	bls.n	800629c <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800628e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006290:	4a2e      	ldr	r2, [pc, #184]	; (800634c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006292:	fba2 2303 	umull	r2, r3, r2, r3
 8006296:	0e1b      	lsrs	r3, r3, #24
 8006298:	61fb      	str	r3, [r7, #28]
 800629a:	e016      	b.n	80062ca <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	695b      	ldr	r3, [r3, #20]
 80062a0:	61fb      	str	r3, [r7, #28]
 80062a2:	e012      	b.n	80062ca <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	695b      	ldr	r3, [r3, #20]
 80062a8:	005b      	lsls	r3, r3, #1
 80062aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80062b0:	4a28      	ldr	r2, [pc, #160]	; (8006354 <HAL_SD_ConfigWideBusOperation+0x224>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d906      	bls.n	80062c4 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80062b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b8:	4a24      	ldr	r2, [pc, #144]	; (800634c <HAL_SD_ConfigWideBusOperation+0x21c>)
 80062ba:	fba2 2303 	umull	r2, r3, r2, r3
 80062be:	0e1b      	lsrs	r3, r3, #24
 80062c0:	61fb      	str	r3, [r7, #28]
 80062c2:	e002      	b.n	80062ca <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	695b      	ldr	r3, [r3, #20]
 80062c8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	699b      	ldr	r3, [r3, #24]
 80062ce:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681d      	ldr	r5, [r3, #0]
 80062d4:	466c      	mov	r4, sp
 80062d6:	f107 0318 	add.w	r3, r7, #24
 80062da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80062de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80062e2:	f107 030c 	add.w	r3, r7, #12
 80062e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80062e8:	4628      	mov	r0, r5
 80062ea:	f002 f8d9 	bl	80084a0 <SDMMC_Init>
 80062ee:	e008      	b.n	8006302 <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f44f 7100 	mov.w	r1, #512	; 0x200
 800630a:	4618      	mov	r0, r3
 800630c:	f002 f996 	bl	800863c <SDMMC_CmdBlockLength>
 8006310:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006314:	2b00      	cmp	r3, #0
 8006316:	d00c      	beq.n	8006332 <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a0a      	ldr	r2, [pc, #40]	; (8006348 <HAL_SD_ConfigWideBusOperation+0x218>)
 800631e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006326:	431a      	orrs	r2, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2201      	movs	r2, #1
 8006336:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800633a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800633e:	4618      	mov	r0, r3
 8006340:	3730      	adds	r7, #48	; 0x30
 8006342:	46bd      	mov	sp, r7
 8006344:	bdb0      	pop	{r4, r5, r7, pc}
 8006346:	bf00      	nop
 8006348:	1fe00fff 	.word	0x1fe00fff
 800634c:	55e63b89 	.word	0x55e63b89
 8006350:	02faf080 	.word	0x02faf080
 8006354:	017d7840 	.word	0x017d7840

08006358 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b086      	sub	sp, #24
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006360:	2300      	movs	r3, #0
 8006362:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006364:	f107 030c 	add.w	r3, r7, #12
 8006368:	4619      	mov	r1, r3
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 fab0 	bl	80068d0 <SD_SendStatus>
 8006370:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d005      	beq.n	8006384 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	431a      	orrs	r2, r3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	0a5b      	lsrs	r3, r3, #9
 8006388:	f003 030f 	and.w	r3, r3, #15
 800638c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800638e:	693b      	ldr	r3, [r7, #16]
}
 8006390:	4618      	mov	r0, r3
 8006392:	3718      	adds	r7, #24
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006398:	b5b0      	push	{r4, r5, r7, lr}
 800639a:	b090      	sub	sp, #64	; 0x40
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80063a0:	2301      	movs	r3, #1
 80063a2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4618      	mov	r0, r3
 80063aa:	f002 f8c2 	bl	8008532 <SDMMC_GetPowerState>
 80063ae:	4603      	mov	r3, r0
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d102      	bne.n	80063ba <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80063b4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80063b8:	e0a9      	b.n	800650e <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063be:	2b03      	cmp	r3, #3
 80063c0:	d02e      	beq.n	8006420 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4618      	mov	r0, r3
 80063c8:	f002 fa45 	bl	8008856 <SDMMC_CmdSendCID>
 80063cc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80063ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d001      	beq.n	80063d8 <SD_InitCard+0x40>
    {
      return errorstate;
 80063d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063d6:	e09a      	b.n	800650e <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2100      	movs	r1, #0
 80063de:	4618      	mov	r0, r3
 80063e0:	f002 f8ed 	bl	80085be <SDMMC_GetResponse>
 80063e4:	4602      	mov	r2, r0
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2104      	movs	r1, #4
 80063f0:	4618      	mov	r0, r3
 80063f2:	f002 f8e4 	bl	80085be <SDMMC_GetResponse>
 80063f6:	4602      	mov	r2, r0
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2108      	movs	r1, #8
 8006402:	4618      	mov	r0, r3
 8006404:	f002 f8db 	bl	80085be <SDMMC_GetResponse>
 8006408:	4602      	mov	r2, r0
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	210c      	movs	r1, #12
 8006414:	4618      	mov	r0, r3
 8006416:	f002 f8d2 	bl	80085be <SDMMC_GetResponse>
 800641a:	4602      	mov	r2, r0
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006424:	2b03      	cmp	r3, #3
 8006426:	d00d      	beq.n	8006444 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f107 020e 	add.w	r2, r7, #14
 8006430:	4611      	mov	r1, r2
 8006432:	4618      	mov	r0, r3
 8006434:	f002 fa4e 	bl	80088d4 <SDMMC_CmdSetRelAdd>
 8006438:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800643a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800643c:	2b00      	cmp	r3, #0
 800643e:	d001      	beq.n	8006444 <SD_InitCard+0xac>
    {
      return errorstate;
 8006440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006442:	e064      	b.n	800650e <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006448:	2b03      	cmp	r3, #3
 800644a:	d036      	beq.n	80064ba <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800644c:	89fb      	ldrh	r3, [r7, #14]
 800644e:	461a      	mov	r2, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800645c:	041b      	lsls	r3, r3, #16
 800645e:	4619      	mov	r1, r3
 8006460:	4610      	mov	r0, r2
 8006462:	f002 fa17 	bl	8008894 <SDMMC_CmdSendCSD>
 8006466:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800646a:	2b00      	cmp	r3, #0
 800646c:	d001      	beq.n	8006472 <SD_InitCard+0xda>
    {
      return errorstate;
 800646e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006470:	e04d      	b.n	800650e <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2100      	movs	r1, #0
 8006478:	4618      	mov	r0, r3
 800647a:	f002 f8a0 	bl	80085be <SDMMC_GetResponse>
 800647e:	4602      	mov	r2, r0
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	2104      	movs	r1, #4
 800648a:	4618      	mov	r0, r3
 800648c:	f002 f897 	bl	80085be <SDMMC_GetResponse>
 8006490:	4602      	mov	r2, r0
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2108      	movs	r1, #8
 800649c:	4618      	mov	r0, r3
 800649e:	f002 f88e 	bl	80085be <SDMMC_GetResponse>
 80064a2:	4602      	mov	r2, r0
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	210c      	movs	r1, #12
 80064ae:	4618      	mov	r0, r3
 80064b0:	f002 f885 	bl	80085be <SDMMC_GetResponse>
 80064b4:	4602      	mov	r2, r0
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2104      	movs	r1, #4
 80064c0:	4618      	mov	r0, r3
 80064c2:	f002 f87c 	bl	80085be <SDMMC_GetResponse>
 80064c6:	4603      	mov	r3, r0
 80064c8:	0d1a      	lsrs	r2, r3, #20
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80064ce:	f107 0310 	add.w	r3, r7, #16
 80064d2:	4619      	mov	r1, r3
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f7ff fbd1 	bl	8005c7c <HAL_SD_GetCardCSD>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d002      	beq.n	80064e6 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80064e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80064e4:	e013      	b.n	800650e <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6819      	ldr	r1, [r3, #0]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064ee:	041b      	lsls	r3, r3, #16
 80064f0:	2200      	movs	r2, #0
 80064f2:	461c      	mov	r4, r3
 80064f4:	4615      	mov	r5, r2
 80064f6:	4622      	mov	r2, r4
 80064f8:	462b      	mov	r3, r5
 80064fa:	4608      	mov	r0, r1
 80064fc:	f002 f8c1 	bl	8008682 <SDMMC_CmdSelDesel>
 8006500:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006504:	2b00      	cmp	r3, #0
 8006506:	d001      	beq.n	800650c <SD_InitCard+0x174>
  {
    return errorstate;
 8006508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800650a:	e000      	b.n	800650e <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800650c:	2300      	movs	r3, #0
}
 800650e:	4618      	mov	r0, r3
 8006510:	3740      	adds	r7, #64	; 0x40
 8006512:	46bd      	mov	sp, r7
 8006514:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006518 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b088      	sub	sp, #32
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006520:	2300      	movs	r3, #0
 8006522:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8006524:	2300      	movs	r3, #0
 8006526:	61fb      	str	r3, [r7, #28]
 8006528:	2300      	movs	r3, #0
 800652a:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 800652c:	f7fb fdb2 	bl	8002094 <HAL_GetTick>
 8006530:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4618      	mov	r0, r3
 8006538:	f002 f8c7 	bl	80086ca <SDMMC_CmdGoIdleState>
 800653c:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d001      	beq.n	8006548 <SD_PowerON+0x30>
  {
    return errorstate;
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	e0ed      	b.n	8006724 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4618      	mov	r0, r3
 800654e:	f002 f8da 	bl	8008706 <SDMMC_CmdOperCond>
 8006552:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00d      	beq.n	8006576 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4618      	mov	r0, r3
 8006566:	f002 f8b0 	bl	80086ca <SDMMC_CmdGoIdleState>
 800656a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d004      	beq.n	800657c <SD_PowerON+0x64>
    {
      return errorstate;
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	e0d6      	b.n	8006724 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2201      	movs	r2, #1
 800657a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006580:	2b01      	cmp	r3, #1
 8006582:	d137      	bne.n	80065f4 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	2100      	movs	r1, #0
 800658a:	4618      	mov	r0, r3
 800658c:	f002 f8db 	bl	8008746 <SDMMC_CmdAppCommand>
 8006590:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d02d      	beq.n	80065f4 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006598:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800659c:	e0c2      	b.n	8006724 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	2100      	movs	r1, #0
 80065a4:	4618      	mov	r0, r3
 80065a6:	f002 f8ce 	bl	8008746 <SDMMC_CmdAppCommand>
 80065aa:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d001      	beq.n	80065b6 <SD_PowerON+0x9e>
    {
      return errorstate;
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	e0b6      	b.n	8006724 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	495c      	ldr	r1, [pc, #368]	; (800672c <SD_PowerON+0x214>)
 80065bc:	4618      	mov	r0, r3
 80065be:	f002 f8e5 	bl	800878c <SDMMC_CmdAppOperCommand>
 80065c2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d002      	beq.n	80065d0 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80065ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80065ce:	e0a9      	b.n	8006724 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	2100      	movs	r1, #0
 80065d6:	4618      	mov	r0, r3
 80065d8:	f001 fff1 	bl	80085be <SDMMC_GetResponse>
 80065dc:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	0fdb      	lsrs	r3, r3, #31
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d101      	bne.n	80065ea <SD_PowerON+0xd2>
 80065e6:	2301      	movs	r3, #1
 80065e8:	e000      	b.n	80065ec <SD_PowerON+0xd4>
 80065ea:	2300      	movs	r3, #0
 80065ec:	61bb      	str	r3, [r7, #24]

    count++;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	3301      	adds	r3, #1
 80065f2:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d802      	bhi.n	8006604 <SD_PowerON+0xec>
 80065fe:	69bb      	ldr	r3, [r7, #24]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d0cc      	beq.n	800659e <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800660a:	4293      	cmp	r3, r2
 800660c:	d902      	bls.n	8006614 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800660e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006612:	e087      	b.n	8006724 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d07e      	beq.n	800671c <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2201      	movs	r2, #1
 8006622:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	699b      	ldr	r3, [r3, #24]
 8006628:	2b01      	cmp	r3, #1
 800662a:	d17a      	bne.n	8006722 <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006632:	2b00      	cmp	r3, #0
 8006634:	d075      	beq.n	8006722 <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f44f 7200 	mov.w	r2, #512	; 0x200
 800663c:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f042 0208 	orr.w	r2, r2, #8
 800664c:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4618      	mov	r0, r3
 8006654:	f002 f9a5 	bl	80089a2 <SDMMC_CmdVoltageSwitch>
 8006658:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d00c      	beq.n	800667a <SD_PowerON+0x162>
        {
          return errorstate;
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	e05f      	b.n	8006724 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006664:	f7fb fd16 	bl	8002094 <HAL_GetTick>
 8006668:	4602      	mov	r2, r0
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	1ad3      	subs	r3, r2, r3
 800666e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006672:	d102      	bne.n	800667a <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8006674:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006678:	e054      	b.n	8006724 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006680:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006684:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006688:	d1ec      	bne.n	8006664 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006692:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800669a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800669e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066a2:	d002      	beq.n	80066aa <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 80066a4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80066a8:	e03c      	b.n	8006724 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 80066aa:	2001      	movs	r0, #1
 80066ac:	f000 fa9e 	bl	8006bec <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f042 0204 	orr.w	r2, r2, #4
 80066be:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 80066c0:	e00a      	b.n	80066d8 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80066c2:	f7fb fce7 	bl	8002094 <HAL_GetTick>
 80066c6:	4602      	mov	r2, r0
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	1ad3      	subs	r3, r2, r3
 80066cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066d0:	d102      	bne.n	80066d8 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 80066d2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80066d6:	e025      	b.n	8006724 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80066e6:	d1ec      	bne.n	80066c2 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80066f0:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006700:	d102      	bne.n	8006708 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006702:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006706:	e00d      	b.n	8006724 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2213      	movs	r2, #19
 800670e:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f04f 32ff 	mov.w	r2, #4294967295
 8006718:	639a      	str	r2, [r3, #56]	; 0x38
 800671a:	e002      	b.n	8006722 <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 8006722:	2300      	movs	r3, #0
}
 8006724:	4618      	mov	r0, r3
 8006726:	3720      	adds	r7, #32
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}
 800672c:	c1100000 	.word	0xc1100000

08006730 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b08c      	sub	sp, #48	; 0x30
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800673a:	f7fb fcab 	bl	8002094 <HAL_GetTick>
 800673e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2100      	movs	r1, #0
 800674a:	4618      	mov	r0, r3
 800674c:	f001 ff37 	bl	80085be <SDMMC_GetResponse>
 8006750:	4603      	mov	r3, r0
 8006752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006756:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800675a:	d102      	bne.n	8006762 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800675c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006760:	e0b0      	b.n	80068c4 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	2140      	movs	r1, #64	; 0x40
 8006768:	4618      	mov	r0, r3
 800676a:	f001 ff67 	bl	800863c <SDMMC_CmdBlockLength>
 800676e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006770:	6a3b      	ldr	r3, [r7, #32]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d005      	beq.n	8006782 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800677e:	6a3b      	ldr	r3, [r7, #32]
 8006780:	e0a0      	b.n	80068c4 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800678a:	041b      	lsls	r3, r3, #16
 800678c:	4619      	mov	r1, r3
 800678e:	4610      	mov	r0, r2
 8006790:	f001 ffd9 	bl	8008746 <SDMMC_CmdAppCommand>
 8006794:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006796:	6a3b      	ldr	r3, [r7, #32]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d005      	beq.n	80067a8 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80067a4:	6a3b      	ldr	r3, [r7, #32]
 80067a6:	e08d      	b.n	80068c4 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80067a8:	f04f 33ff 	mov.w	r3, #4294967295
 80067ac:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 80067ae:	2340      	movs	r3, #64	; 0x40
 80067b0:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80067b2:	2360      	movs	r3, #96	; 0x60
 80067b4:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80067b6:	2302      	movs	r3, #2
 80067b8:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80067ba:	2300      	movs	r3, #0
 80067bc:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80067be:	2301      	movs	r3, #1
 80067c0:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f107 0208 	add.w	r2, r7, #8
 80067ca:	4611      	mov	r1, r2
 80067cc:	4618      	mov	r0, r3
 80067ce:	f001 ff09 	bl	80085e4 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4618      	mov	r0, r3
 80067d8:	f002 f8c1 	bl	800895e <SDMMC_CmdStatusRegister>
 80067dc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80067de:	6a3b      	ldr	r3, [r7, #32]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d02b      	beq.n	800683c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80067ec:	6a3b      	ldr	r3, [r7, #32]
 80067ee:	e069      	b.n	80068c4 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d013      	beq.n	8006826 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 80067fe:	2300      	movs	r3, #0
 8006800:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006802:	e00d      	b.n	8006820 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4618      	mov	r0, r3
 800680a:	f001 fe73 	bl	80084f4 <SDMMC_ReadFIFO>
 800680e:	4602      	mov	r2, r0
 8006810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006812:	601a      	str	r2, [r3, #0]
        pData++;
 8006814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006816:	3304      	adds	r3, #4
 8006818:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800681a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800681c:	3301      	adds	r3, #1
 800681e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006822:	2b07      	cmp	r3, #7
 8006824:	d9ee      	bls.n	8006804 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006826:	f7fb fc35 	bl	8002094 <HAL_GetTick>
 800682a:	4602      	mov	r2, r0
 800682c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682e:	1ad3      	subs	r3, r2, r3
 8006830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006834:	d102      	bne.n	800683c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006836:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800683a:	e043      	b.n	80068c4 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006842:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8006846:	2b00      	cmp	r3, #0
 8006848:	d0d2      	beq.n	80067f0 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006850:	f003 0308 	and.w	r3, r3, #8
 8006854:	2b00      	cmp	r3, #0
 8006856:	d001      	beq.n	800685c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006858:	2308      	movs	r3, #8
 800685a:	e033      	b.n	80068c4 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006862:	f003 0302 	and.w	r3, r3, #2
 8006866:	2b00      	cmp	r3, #0
 8006868:	d001      	beq.n	800686e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800686a:	2302      	movs	r3, #2
 800686c:	e02a      	b.n	80068c4 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006874:	f003 0320 	and.w	r3, r3, #32
 8006878:	2b00      	cmp	r3, #0
 800687a:	d017      	beq.n	80068ac <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800687c:	2320      	movs	r3, #32
 800687e:	e021      	b.n	80068c4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4618      	mov	r0, r3
 8006886:	f001 fe35 	bl	80084f4 <SDMMC_ReadFIFO>
 800688a:	4602      	mov	r2, r0
 800688c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800688e:	601a      	str	r2, [r3, #0]
    pData++;
 8006890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006892:	3304      	adds	r3, #4
 8006894:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006896:	f7fb fbfd 	bl	8002094 <HAL_GetTick>
 800689a:	4602      	mov	r2, r0
 800689c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689e:	1ad3      	subs	r3, r2, r3
 80068a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068a4:	d102      	bne.n	80068ac <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80068a6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80068aa:	e00b      	b.n	80068c4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d1e2      	bne.n	8006880 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a03      	ldr	r2, [pc, #12]	; (80068cc <SD_SendSDStatus+0x19c>)
 80068c0:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 80068c2:	2300      	movs	r3, #0
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3730      	adds	r7, #48	; 0x30
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	18000f3a 	.word	0x18000f3a

080068d0 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d102      	bne.n	80068e6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80068e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80068e4:	e018      	b.n	8006918 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068ee:	041b      	lsls	r3, r3, #16
 80068f0:	4619      	mov	r1, r3
 80068f2:	4610      	mov	r0, r2
 80068f4:	f002 f810 	bl	8008918 <SDMMC_CmdSendStatus>
 80068f8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d001      	beq.n	8006904 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	e009      	b.n	8006918 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2100      	movs	r1, #0
 800690a:	4618      	mov	r0, r3
 800690c:	f001 fe57 	bl	80085be <SDMMC_GetResponse>
 8006910:	4602      	mov	r2, r0
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006916:	2300      	movs	r3, #0
}
 8006918:	4618      	mov	r0, r3
 800691a:	3710      	adds	r7, #16
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b086      	sub	sp, #24
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006928:	2300      	movs	r3, #0
 800692a:	60fb      	str	r3, [r7, #12]
 800692c:	2300      	movs	r3, #0
 800692e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	2100      	movs	r1, #0
 8006936:	4618      	mov	r0, r3
 8006938:	f001 fe41 	bl	80085be <SDMMC_GetResponse>
 800693c:	4603      	mov	r3, r0
 800693e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006942:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006946:	d102      	bne.n	800694e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006948:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800694c:	e02f      	b.n	80069ae <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800694e:	f107 030c 	add.w	r3, r7, #12
 8006952:	4619      	mov	r1, r3
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 f879 	bl	8006a4c <SD_FindSCR>
 800695a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d001      	beq.n	8006966 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	e023      	b.n	80069ae <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800696c:	2b00      	cmp	r3, #0
 800696e:	d01c      	beq.n	80069aa <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006978:	041b      	lsls	r3, r3, #16
 800697a:	4619      	mov	r1, r3
 800697c:	4610      	mov	r0, r2
 800697e:	f001 fee2 	bl	8008746 <SDMMC_CmdAppCommand>
 8006982:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d001      	beq.n	800698e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	e00f      	b.n	80069ae <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2102      	movs	r1, #2
 8006994:	4618      	mov	r0, r3
 8006996:	f001 ff19 	bl	80087cc <SDMMC_CmdBusWidth>
 800699a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d001      	beq.n	80069a6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	e003      	b.n	80069ae <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80069a6:	2300      	movs	r3, #0
 80069a8:	e001      	b.n	80069ae <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80069aa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3718      	adds	r7, #24
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}

080069b6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80069b6:	b580      	push	{r7, lr}
 80069b8:	b086      	sub	sp, #24
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80069be:	2300      	movs	r3, #0
 80069c0:	60fb      	str	r3, [r7, #12]
 80069c2:	2300      	movs	r3, #0
 80069c4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2100      	movs	r1, #0
 80069cc:	4618      	mov	r0, r3
 80069ce:	f001 fdf6 	bl	80085be <SDMMC_GetResponse>
 80069d2:	4603      	mov	r3, r0
 80069d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069dc:	d102      	bne.n	80069e4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80069de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80069e2:	e02f      	b.n	8006a44 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80069e4:	f107 030c 	add.w	r3, r7, #12
 80069e8:	4619      	mov	r1, r3
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 f82e 	bl	8006a4c <SD_FindSCR>
 80069f0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d001      	beq.n	80069fc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	e023      	b.n	8006a44 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d01c      	beq.n	8006a40 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a0e:	041b      	lsls	r3, r3, #16
 8006a10:	4619      	mov	r1, r3
 8006a12:	4610      	mov	r0, r2
 8006a14:	f001 fe97 	bl	8008746 <SDMMC_CmdAppCommand>
 8006a18:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d001      	beq.n	8006a24 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	e00f      	b.n	8006a44 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2100      	movs	r1, #0
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f001 fece 	bl	80087cc <SDMMC_CmdBusWidth>
 8006a30:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d001      	beq.n	8006a3c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	e003      	b.n	8006a44 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	e001      	b.n	8006a44 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006a40:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3718      	adds	r7, #24
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b08e      	sub	sp, #56	; 0x38
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006a56:	f7fb fb1d 	bl	8002094 <HAL_GetTick>
 8006a5a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8006a60:	2300      	movs	r3, #0
 8006a62:	60bb      	str	r3, [r7, #8]
 8006a64:	2300      	movs	r3, #0
 8006a66:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2108      	movs	r1, #8
 8006a72:	4618      	mov	r0, r3
 8006a74:	f001 fde2 	bl	800863c <SDMMC_CmdBlockLength>
 8006a78:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d001      	beq.n	8006a84 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a82:	e0ad      	b.n	8006be0 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a8c:	041b      	lsls	r3, r3, #16
 8006a8e:	4619      	mov	r1, r3
 8006a90:	4610      	mov	r0, r2
 8006a92:	f001 fe58 	bl	8008746 <SDMMC_CmdAppCommand>
 8006a96:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d001      	beq.n	8006aa2 <SD_FindSCR+0x56>
  {
    return errorstate;
 8006a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa0:	e09e      	b.n	8006be0 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8006aa6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006aa8:	2308      	movs	r3, #8
 8006aaa:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8006aac:	2330      	movs	r3, #48	; 0x30
 8006aae:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006ab0:	2302      	movs	r3, #2
 8006ab2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f107 0210 	add.w	r2, r7, #16
 8006ac4:	4611      	mov	r1, r2
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f001 fd8c 	bl	80085e4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f001 fe9e 	bl	8008812 <SDMMC_CmdSendSCR>
 8006ad6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d027      	beq.n	8006b2e <SD_FindSCR+0xe2>
  {
    return errorstate;
 8006ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae0:	e07e      	b.n	8006be0 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ae8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d113      	bne.n	8006b18 <SD_FindSCR+0xcc>
 8006af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d110      	bne.n	8006b18 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4618      	mov	r0, r3
 8006afc:	f001 fcfa 	bl	80084f4 <SDMMC_ReadFIFO>
 8006b00:	4603      	mov	r3, r0
 8006b02:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f001 fcf3 	bl	80084f4 <SDMMC_ReadFIFO>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	60fb      	str	r3, [r7, #12]
      index++;
 8006b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b14:	3301      	adds	r3, #1
 8006b16:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006b18:	f7fb fabc 	bl	8002094 <HAL_GetTick>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b20:	1ad3      	subs	r3, r2, r3
 8006b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b26:	d102      	bne.n	8006b2e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006b28:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006b2c:	e058      	b.n	8006be0 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b34:	f240 532a 	movw	r3, #1322	; 0x52a
 8006b38:	4013      	ands	r3, r2
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d0d1      	beq.n	8006ae2 <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b44:	f003 0308 	and.w	r3, r3, #8
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d005      	beq.n	8006b58 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	2208      	movs	r2, #8
 8006b52:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006b54:	2308      	movs	r3, #8
 8006b56:	e043      	b.n	8006be0 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b5e:	f003 0302 	and.w	r3, r3, #2
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d005      	beq.n	8006b72 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	2202      	movs	r2, #2
 8006b6c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006b6e:	2302      	movs	r3, #2
 8006b70:	e036      	b.n	8006be0 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b78:	f003 0320 	and.w	r3, r3, #32
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d005      	beq.n	8006b8c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	2220      	movs	r2, #32
 8006b86:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006b88:	2320      	movs	r3, #32
 8006b8a:	e029      	b.n	8006be0 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a15      	ldr	r2, [pc, #84]	; (8006be8 <SD_FindSCR+0x19c>)
 8006b92:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	061a      	lsls	r2, r3, #24
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	021b      	lsls	r3, r3, #8
 8006b9c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006ba0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	0a1b      	lsrs	r3, r3, #8
 8006ba6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006baa:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	0e1b      	lsrs	r3, r3, #24
 8006bb0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb4:	601a      	str	r2, [r3, #0]
    scr++;
 8006bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb8:	3304      	adds	r3, #4
 8006bba:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	061a      	lsls	r2, r3, #24
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	021b      	lsls	r3, r3, #8
 8006bc4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006bc8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	0a1b      	lsrs	r3, r3, #8
 8006bce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006bd2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	0e1b      	lsrs	r3, r3, #24
 8006bd8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bdc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006bde:	2300      	movs	r3, #0
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3738      	adds	r7, #56	; 0x38
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}
 8006be8:	18000f3a 	.word	0x18000f3a

08006bec <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 8006bf6:	bf00      	nop
 8006bf8:	370c      	adds	r7, #12
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr

08006c02 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b084      	sub	sp, #16
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d101      	bne.n	8006c14 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c10:	2301      	movs	r3, #1
 8006c12:	e095      	b.n	8006d40 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d108      	bne.n	8006c2e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c24:	d009      	beq.n	8006c3a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	61da      	str	r2, [r3, #28]
 8006c2c:	e005      	b.n	8006c3a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d106      	bne.n	8006c5a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f7fa fe41 	bl	80018dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2202      	movs	r2, #2
 8006c5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c70:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c7a:	d902      	bls.n	8006c82 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	60fb      	str	r3, [r7, #12]
 8006c80:	e002      	b.n	8006c88 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006c82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c86:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006c90:	d007      	beq.n	8006ca2 <HAL_SPI_Init+0xa0>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c9a:	d002      	beq.n	8006ca2 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006cb2:	431a      	orrs	r2, r3
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	691b      	ldr	r3, [r3, #16]
 8006cb8:	f003 0302 	and.w	r3, r3, #2
 8006cbc:	431a      	orrs	r2, r3
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	695b      	ldr	r3, [r3, #20]
 8006cc2:	f003 0301 	and.w	r3, r3, #1
 8006cc6:	431a      	orrs	r2, r3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	699b      	ldr	r3, [r3, #24]
 8006ccc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cd0:	431a      	orrs	r2, r3
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	69db      	ldr	r3, [r3, #28]
 8006cd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006cda:	431a      	orrs	r2, r3
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6a1b      	ldr	r3, [r3, #32]
 8006ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ce4:	ea42 0103 	orr.w	r1, r2, r3
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	430a      	orrs	r2, r1
 8006cf6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	699b      	ldr	r3, [r3, #24]
 8006cfc:	0c1b      	lsrs	r3, r3, #16
 8006cfe:	f003 0204 	and.w	r2, r3, #4
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d06:	f003 0310 	and.w	r3, r3, #16
 8006d0a:	431a      	orrs	r2, r3
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d10:	f003 0308 	and.w	r3, r3, #8
 8006d14:	431a      	orrs	r2, r3
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006d1e:	ea42 0103 	orr.w	r1, r2, r3
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	430a      	orrs	r2, r1
 8006d2e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2201      	movs	r2, #1
 8006d3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006d3e:	2300      	movs	r3, #0
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3710      	adds	r7, #16
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	60b9      	str	r1, [r7, #8]
 8006d52:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d101      	bne.n	8006d5e <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e038      	b.n	8006dd0 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d106      	bne.n	8006d78 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006d72:	68f8      	ldr	r0, [r7, #12]
 8006d74:	f7fb f804 	bl	8001d80 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	3308      	adds	r3, #8
 8006d80:	4619      	mov	r1, r3
 8006d82:	4610      	mov	r0, r2
 8006d84:	f001 fa66 	bl	8008254 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6818      	ldr	r0, [r3, #0]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	461a      	mov	r2, r3
 8006d92:	68b9      	ldr	r1, [r7, #8]
 8006d94:	f001 faf8 	bl	8008388 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6858      	ldr	r0, [r3, #4]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	689a      	ldr	r2, [r3, #8]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da4:	6879      	ldr	r1, [r7, #4]
 8006da6:	f001 fb41 	bl	800842c <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	68fa      	ldr	r2, [r7, #12]
 8006db0:	6892      	ldr	r2, [r2, #8]
 8006db2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	6892      	ldr	r2, [r2, #8]
 8006dbe:	f041 0101 	orr.w	r1, r1, #1
 8006dc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2201      	movs	r2, #1
 8006dca:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8006dce:	2300      	movs	r3, #0
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3710      	adds	r7, #16
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b082      	sub	sp, #8
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d101      	bne.n	8006dea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	e049      	b.n	8006e7e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d106      	bne.n	8006e04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f7fa fdce 	bl	80019a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2202      	movs	r2, #2
 8006e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	3304      	adds	r3, #4
 8006e14:	4619      	mov	r1, r3
 8006e16:	4610      	mov	r0, r2
 8006e18:	f000 f968 	bl	80070ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3708      	adds	r7, #8
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
	...

08006e88 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b085      	sub	sp, #20
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d001      	beq.n	8006ea0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	e047      	b.n	8006f30 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2202      	movs	r2, #2
 8006ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a23      	ldr	r2, [pc, #140]	; (8006f3c <HAL_TIM_Base_Start+0xb4>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d01d      	beq.n	8006eee <HAL_TIM_Base_Start+0x66>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eba:	d018      	beq.n	8006eee <HAL_TIM_Base_Start+0x66>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a1f      	ldr	r2, [pc, #124]	; (8006f40 <HAL_TIM_Base_Start+0xb8>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d013      	beq.n	8006eee <HAL_TIM_Base_Start+0x66>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a1e      	ldr	r2, [pc, #120]	; (8006f44 <HAL_TIM_Base_Start+0xbc>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d00e      	beq.n	8006eee <HAL_TIM_Base_Start+0x66>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a1c      	ldr	r2, [pc, #112]	; (8006f48 <HAL_TIM_Base_Start+0xc0>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d009      	beq.n	8006eee <HAL_TIM_Base_Start+0x66>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a1b      	ldr	r2, [pc, #108]	; (8006f4c <HAL_TIM_Base_Start+0xc4>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d004      	beq.n	8006eee <HAL_TIM_Base_Start+0x66>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a19      	ldr	r2, [pc, #100]	; (8006f50 <HAL_TIM_Base_Start+0xc8>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d115      	bne.n	8006f1a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	689a      	ldr	r2, [r3, #8]
 8006ef4:	4b17      	ldr	r3, [pc, #92]	; (8006f54 <HAL_TIM_Base_Start+0xcc>)
 8006ef6:	4013      	ands	r3, r2
 8006ef8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2b06      	cmp	r3, #6
 8006efe:	d015      	beq.n	8006f2c <HAL_TIM_Base_Start+0xa4>
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f06:	d011      	beq.n	8006f2c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f042 0201 	orr.w	r2, r2, #1
 8006f16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f18:	e008      	b.n	8006f2c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f042 0201 	orr.w	r2, r2, #1
 8006f28:	601a      	str	r2, [r3, #0]
 8006f2a:	e000      	b.n	8006f2e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f2c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006f2e:	2300      	movs	r3, #0
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3714      	adds	r7, #20
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr
 8006f3c:	40012c00 	.word	0x40012c00
 8006f40:	40000400 	.word	0x40000400
 8006f44:	40000800 	.word	0x40000800
 8006f48:	40000c00 	.word	0x40000c00
 8006f4c:	40013400 	.word	0x40013400
 8006f50:	40014000 	.word	0x40014000
 8006f54:	00010007 	.word	0x00010007

08006f58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b084      	sub	sp, #16
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f62:	2300      	movs	r3, #0
 8006f64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d101      	bne.n	8006f74 <HAL_TIM_ConfigClockSource+0x1c>
 8006f70:	2302      	movs	r3, #2
 8006f72:	e0b6      	b.n	80070e2 <HAL_TIM_ConfigClockSource+0x18a>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2202      	movs	r2, #2
 8006f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006f96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	68ba      	ldr	r2, [r7, #8]
 8006fa6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fb0:	d03e      	beq.n	8007030 <HAL_TIM_ConfigClockSource+0xd8>
 8006fb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fb6:	f200 8087 	bhi.w	80070c8 <HAL_TIM_ConfigClockSource+0x170>
 8006fba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fbe:	f000 8086 	beq.w	80070ce <HAL_TIM_ConfigClockSource+0x176>
 8006fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fc6:	d87f      	bhi.n	80070c8 <HAL_TIM_ConfigClockSource+0x170>
 8006fc8:	2b70      	cmp	r3, #112	; 0x70
 8006fca:	d01a      	beq.n	8007002 <HAL_TIM_ConfigClockSource+0xaa>
 8006fcc:	2b70      	cmp	r3, #112	; 0x70
 8006fce:	d87b      	bhi.n	80070c8 <HAL_TIM_ConfigClockSource+0x170>
 8006fd0:	2b60      	cmp	r3, #96	; 0x60
 8006fd2:	d050      	beq.n	8007076 <HAL_TIM_ConfigClockSource+0x11e>
 8006fd4:	2b60      	cmp	r3, #96	; 0x60
 8006fd6:	d877      	bhi.n	80070c8 <HAL_TIM_ConfigClockSource+0x170>
 8006fd8:	2b50      	cmp	r3, #80	; 0x50
 8006fda:	d03c      	beq.n	8007056 <HAL_TIM_ConfigClockSource+0xfe>
 8006fdc:	2b50      	cmp	r3, #80	; 0x50
 8006fde:	d873      	bhi.n	80070c8 <HAL_TIM_ConfigClockSource+0x170>
 8006fe0:	2b40      	cmp	r3, #64	; 0x40
 8006fe2:	d058      	beq.n	8007096 <HAL_TIM_ConfigClockSource+0x13e>
 8006fe4:	2b40      	cmp	r3, #64	; 0x40
 8006fe6:	d86f      	bhi.n	80070c8 <HAL_TIM_ConfigClockSource+0x170>
 8006fe8:	2b30      	cmp	r3, #48	; 0x30
 8006fea:	d064      	beq.n	80070b6 <HAL_TIM_ConfigClockSource+0x15e>
 8006fec:	2b30      	cmp	r3, #48	; 0x30
 8006fee:	d86b      	bhi.n	80070c8 <HAL_TIM_ConfigClockSource+0x170>
 8006ff0:	2b20      	cmp	r3, #32
 8006ff2:	d060      	beq.n	80070b6 <HAL_TIM_ConfigClockSource+0x15e>
 8006ff4:	2b20      	cmp	r3, #32
 8006ff6:	d867      	bhi.n	80070c8 <HAL_TIM_ConfigClockSource+0x170>
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d05c      	beq.n	80070b6 <HAL_TIM_ConfigClockSource+0x15e>
 8006ffc:	2b10      	cmp	r3, #16
 8006ffe:	d05a      	beq.n	80070b6 <HAL_TIM_ConfigClockSource+0x15e>
 8007000:	e062      	b.n	80070c8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007012:	f000 f97f 	bl	8007314 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007024:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	68ba      	ldr	r2, [r7, #8]
 800702c:	609a      	str	r2, [r3, #8]
      break;
 800702e:	e04f      	b.n	80070d0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007040:	f000 f968 	bl	8007314 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	689a      	ldr	r2, [r3, #8]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007052:	609a      	str	r2, [r3, #8]
      break;
 8007054:	e03c      	b.n	80070d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007062:	461a      	mov	r2, r3
 8007064:	f000 f8dc 	bl	8007220 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	2150      	movs	r1, #80	; 0x50
 800706e:	4618      	mov	r0, r3
 8007070:	f000 f935 	bl	80072de <TIM_ITRx_SetConfig>
      break;
 8007074:	e02c      	b.n	80070d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007082:	461a      	mov	r2, r3
 8007084:	f000 f8fb 	bl	800727e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	2160      	movs	r1, #96	; 0x60
 800708e:	4618      	mov	r0, r3
 8007090:	f000 f925 	bl	80072de <TIM_ITRx_SetConfig>
      break;
 8007094:	e01c      	b.n	80070d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80070a2:	461a      	mov	r2, r3
 80070a4:	f000 f8bc 	bl	8007220 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2140      	movs	r1, #64	; 0x40
 80070ae:	4618      	mov	r0, r3
 80070b0:	f000 f915 	bl	80072de <TIM_ITRx_SetConfig>
      break;
 80070b4:	e00c      	b.n	80070d0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4619      	mov	r1, r3
 80070c0:	4610      	mov	r0, r2
 80070c2:	f000 f90c 	bl	80072de <TIM_ITRx_SetConfig>
      break;
 80070c6:	e003      	b.n	80070d0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80070c8:	2301      	movs	r3, #1
 80070ca:	73fb      	strb	r3, [r7, #15]
      break;
 80070cc:	e000      	b.n	80070d0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80070ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80070e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3710      	adds	r7, #16
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
	...

080070ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b085      	sub	sp, #20
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4a40      	ldr	r2, [pc, #256]	; (8007200 <TIM_Base_SetConfig+0x114>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d013      	beq.n	800712c <TIM_Base_SetConfig+0x40>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800710a:	d00f      	beq.n	800712c <TIM_Base_SetConfig+0x40>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4a3d      	ldr	r2, [pc, #244]	; (8007204 <TIM_Base_SetConfig+0x118>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d00b      	beq.n	800712c <TIM_Base_SetConfig+0x40>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4a3c      	ldr	r2, [pc, #240]	; (8007208 <TIM_Base_SetConfig+0x11c>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d007      	beq.n	800712c <TIM_Base_SetConfig+0x40>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	4a3b      	ldr	r2, [pc, #236]	; (800720c <TIM_Base_SetConfig+0x120>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d003      	beq.n	800712c <TIM_Base_SetConfig+0x40>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4a3a      	ldr	r2, [pc, #232]	; (8007210 <TIM_Base_SetConfig+0x124>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d108      	bne.n	800713e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007132:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	68fa      	ldr	r2, [r7, #12]
 800713a:	4313      	orrs	r3, r2
 800713c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a2f      	ldr	r2, [pc, #188]	; (8007200 <TIM_Base_SetConfig+0x114>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d01f      	beq.n	8007186 <TIM_Base_SetConfig+0x9a>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800714c:	d01b      	beq.n	8007186 <TIM_Base_SetConfig+0x9a>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4a2c      	ldr	r2, [pc, #176]	; (8007204 <TIM_Base_SetConfig+0x118>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d017      	beq.n	8007186 <TIM_Base_SetConfig+0x9a>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	4a2b      	ldr	r2, [pc, #172]	; (8007208 <TIM_Base_SetConfig+0x11c>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d013      	beq.n	8007186 <TIM_Base_SetConfig+0x9a>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a2a      	ldr	r2, [pc, #168]	; (800720c <TIM_Base_SetConfig+0x120>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d00f      	beq.n	8007186 <TIM_Base_SetConfig+0x9a>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4a29      	ldr	r2, [pc, #164]	; (8007210 <TIM_Base_SetConfig+0x124>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d00b      	beq.n	8007186 <TIM_Base_SetConfig+0x9a>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4a28      	ldr	r2, [pc, #160]	; (8007214 <TIM_Base_SetConfig+0x128>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d007      	beq.n	8007186 <TIM_Base_SetConfig+0x9a>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4a27      	ldr	r2, [pc, #156]	; (8007218 <TIM_Base_SetConfig+0x12c>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d003      	beq.n	8007186 <TIM_Base_SetConfig+0x9a>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4a26      	ldr	r2, [pc, #152]	; (800721c <TIM_Base_SetConfig+0x130>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d108      	bne.n	8007198 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800718c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	68fa      	ldr	r2, [r7, #12]
 8007194:	4313      	orrs	r3, r2
 8007196:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	695b      	ldr	r3, [r3, #20]
 80071a2:	4313      	orrs	r3, r2
 80071a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	689a      	ldr	r2, [r3, #8]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	4a10      	ldr	r2, [pc, #64]	; (8007200 <TIM_Base_SetConfig+0x114>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d00f      	beq.n	80071e4 <TIM_Base_SetConfig+0xf8>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4a12      	ldr	r2, [pc, #72]	; (8007210 <TIM_Base_SetConfig+0x124>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d00b      	beq.n	80071e4 <TIM_Base_SetConfig+0xf8>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	4a11      	ldr	r2, [pc, #68]	; (8007214 <TIM_Base_SetConfig+0x128>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d007      	beq.n	80071e4 <TIM_Base_SetConfig+0xf8>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	4a10      	ldr	r2, [pc, #64]	; (8007218 <TIM_Base_SetConfig+0x12c>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d003      	beq.n	80071e4 <TIM_Base_SetConfig+0xf8>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	4a0f      	ldr	r2, [pc, #60]	; (800721c <TIM_Base_SetConfig+0x130>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d103      	bne.n	80071ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	691a      	ldr	r2, [r3, #16]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	615a      	str	r2, [r3, #20]
}
 80071f2:	bf00      	nop
 80071f4:	3714      	adds	r7, #20
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr
 80071fe:	bf00      	nop
 8007200:	40012c00 	.word	0x40012c00
 8007204:	40000400 	.word	0x40000400
 8007208:	40000800 	.word	0x40000800
 800720c:	40000c00 	.word	0x40000c00
 8007210:	40013400 	.word	0x40013400
 8007214:	40014000 	.word	0x40014000
 8007218:	40014400 	.word	0x40014400
 800721c:	40014800 	.word	0x40014800

08007220 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007220:	b480      	push	{r7}
 8007222:	b087      	sub	sp, #28
 8007224:	af00      	add	r7, sp, #0
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	6a1b      	ldr	r3, [r3, #32]
 8007230:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	6a1b      	ldr	r3, [r3, #32]
 8007236:	f023 0201 	bic.w	r2, r3, #1
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	699b      	ldr	r3, [r3, #24]
 8007242:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800724a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	011b      	lsls	r3, r3, #4
 8007250:	693a      	ldr	r2, [r7, #16]
 8007252:	4313      	orrs	r3, r2
 8007254:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	f023 030a 	bic.w	r3, r3, #10
 800725c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800725e:	697a      	ldr	r2, [r7, #20]
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	4313      	orrs	r3, r2
 8007264:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	693a      	ldr	r2, [r7, #16]
 800726a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	697a      	ldr	r2, [r7, #20]
 8007270:	621a      	str	r2, [r3, #32]
}
 8007272:	bf00      	nop
 8007274:	371c      	adds	r7, #28
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr

0800727e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800727e:	b480      	push	{r7}
 8007280:	b087      	sub	sp, #28
 8007282:	af00      	add	r7, sp, #0
 8007284:	60f8      	str	r0, [r7, #12]
 8007286:	60b9      	str	r1, [r7, #8]
 8007288:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6a1b      	ldr	r3, [r3, #32]
 800728e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	6a1b      	ldr	r3, [r3, #32]
 8007294:	f023 0210 	bic.w	r2, r3, #16
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	699b      	ldr	r3, [r3, #24]
 80072a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80072a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	031b      	lsls	r3, r3, #12
 80072ae:	693a      	ldr	r2, [r7, #16]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80072ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	011b      	lsls	r3, r3, #4
 80072c0:	697a      	ldr	r2, [r7, #20]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	693a      	ldr	r2, [r7, #16]
 80072ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	697a      	ldr	r2, [r7, #20]
 80072d0:	621a      	str	r2, [r3, #32]
}
 80072d2:	bf00      	nop
 80072d4:	371c      	adds	r7, #28
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr

080072de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80072de:	b480      	push	{r7}
 80072e0:	b085      	sub	sp, #20
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
 80072e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80072f6:	683a      	ldr	r2, [r7, #0]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	4313      	orrs	r3, r2
 80072fc:	f043 0307 	orr.w	r3, r3, #7
 8007300:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	68fa      	ldr	r2, [r7, #12]
 8007306:	609a      	str	r2, [r3, #8]
}
 8007308:	bf00      	nop
 800730a:	3714      	adds	r7, #20
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr

08007314 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007314:	b480      	push	{r7}
 8007316:	b087      	sub	sp, #28
 8007318:	af00      	add	r7, sp, #0
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	60b9      	str	r1, [r7, #8]
 800731e:	607a      	str	r2, [r7, #4]
 8007320:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800732e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	021a      	lsls	r2, r3, #8
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	431a      	orrs	r2, r3
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	4313      	orrs	r3, r2
 800733c:	697a      	ldr	r2, [r7, #20]
 800733e:	4313      	orrs	r3, r2
 8007340:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	697a      	ldr	r2, [r7, #20]
 8007346:	609a      	str	r2, [r3, #8]
}
 8007348:	bf00      	nop
 800734a:	371c      	adds	r7, #28
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr

08007354 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007354:	b480      	push	{r7}
 8007356:	b085      	sub	sp, #20
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007364:	2b01      	cmp	r3, #1
 8007366:	d101      	bne.n	800736c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007368:	2302      	movs	r3, #2
 800736a:	e068      	b.n	800743e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2201      	movs	r2, #1
 8007370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2202      	movs	r2, #2
 8007378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a2e      	ldr	r2, [pc, #184]	; (800744c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d004      	beq.n	80073a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a2d      	ldr	r2, [pc, #180]	; (8007450 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d108      	bne.n	80073b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80073a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	68fa      	ldr	r2, [r7, #12]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	68fa      	ldr	r2, [r7, #12]
 80073c0:	4313      	orrs	r3, r2
 80073c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a1e      	ldr	r2, [pc, #120]	; (800744c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d01d      	beq.n	8007412 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073de:	d018      	beq.n	8007412 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a1b      	ldr	r2, [pc, #108]	; (8007454 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d013      	beq.n	8007412 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a1a      	ldr	r2, [pc, #104]	; (8007458 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d00e      	beq.n	8007412 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a18      	ldr	r2, [pc, #96]	; (800745c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d009      	beq.n	8007412 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a13      	ldr	r2, [pc, #76]	; (8007450 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d004      	beq.n	8007412 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a14      	ldr	r2, [pc, #80]	; (8007460 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d10c      	bne.n	800742c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007418:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	68ba      	ldr	r2, [r7, #8]
 8007420:	4313      	orrs	r3, r2
 8007422:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	68ba      	ldr	r2, [r7, #8]
 800742a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2201      	movs	r2, #1
 8007430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	3714      	adds	r7, #20
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr
 800744a:	bf00      	nop
 800744c:	40012c00 	.word	0x40012c00
 8007450:	40013400 	.word	0x40013400
 8007454:	40000400 	.word	0x40000400
 8007458:	40000800 	.word	0x40000800
 800745c:	40000c00 	.word	0x40000c00
 8007460:	40014000 	.word	0x40014000

08007464 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d101      	bne.n	8007476 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	e042      	b.n	80074fc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800747c:	2b00      	cmp	r3, #0
 800747e:	d106      	bne.n	800748e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f7fa faa9 	bl	80019e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2224      	movs	r2, #36	; 0x24
 8007492:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f022 0201 	bic.w	r2, r2, #1
 80074a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d002      	beq.n	80074b4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 fbb4 	bl	8007c1c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 f8b5 	bl	8007624 <UART_SetConfig>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d101      	bne.n	80074c4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	e01b      	b.n	80074fc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	685a      	ldr	r2, [r3, #4]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80074d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	689a      	ldr	r2, [r3, #8]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80074e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f042 0201 	orr.w	r2, r2, #1
 80074f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 fc33 	bl	8007d60 <UART_CheckIdleState>
 80074fa:	4603      	mov	r3, r0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3708      	adds	r7, #8
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b08a      	sub	sp, #40	; 0x28
 8007508:	af02      	add	r7, sp, #8
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	603b      	str	r3, [r7, #0]
 8007510:	4613      	mov	r3, r2
 8007512:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800751a:	2b20      	cmp	r3, #32
 800751c:	d17c      	bne.n	8007618 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d002      	beq.n	800752a <HAL_UART_Transmit+0x26>
 8007524:	88fb      	ldrh	r3, [r7, #6]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d101      	bne.n	800752e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	e075      	b.n	800761a <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2200      	movs	r2, #0
 8007532:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2221      	movs	r2, #33	; 0x21
 800753a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800753e:	f7fa fda9 	bl	8002094 <HAL_GetTick>
 8007542:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	88fa      	ldrh	r2, [r7, #6]
 8007548:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	88fa      	ldrh	r2, [r7, #6]
 8007550:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800755c:	d108      	bne.n	8007570 <HAL_UART_Transmit+0x6c>
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	691b      	ldr	r3, [r3, #16]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d104      	bne.n	8007570 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007566:	2300      	movs	r3, #0
 8007568:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	61bb      	str	r3, [r7, #24]
 800756e:	e003      	b.n	8007578 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007574:	2300      	movs	r3, #0
 8007576:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007578:	e031      	b.n	80075de <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	9300      	str	r3, [sp, #0]
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	2200      	movs	r2, #0
 8007582:	2180      	movs	r1, #128	; 0x80
 8007584:	68f8      	ldr	r0, [r7, #12]
 8007586:	f000 fc95 	bl	8007eb4 <UART_WaitOnFlagUntilTimeout>
 800758a:	4603      	mov	r3, r0
 800758c:	2b00      	cmp	r3, #0
 800758e:	d005      	beq.n	800759c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2220      	movs	r2, #32
 8007594:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8007598:	2303      	movs	r3, #3
 800759a:	e03e      	b.n	800761a <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d10b      	bne.n	80075ba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	881a      	ldrh	r2, [r3, #0]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075ae:	b292      	uxth	r2, r2
 80075b0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80075b2:	69bb      	ldr	r3, [r7, #24]
 80075b4:	3302      	adds	r3, #2
 80075b6:	61bb      	str	r3, [r7, #24]
 80075b8:	e008      	b.n	80075cc <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80075ba:	69fb      	ldr	r3, [r7, #28]
 80075bc:	781a      	ldrb	r2, [r3, #0]
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	b292      	uxth	r2, r2
 80075c4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	3301      	adds	r3, #1
 80075ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	3b01      	subs	r3, #1
 80075d6:	b29a      	uxth	r2, r3
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d1c7      	bne.n	800757a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	9300      	str	r3, [sp, #0]
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	2200      	movs	r2, #0
 80075f2:	2140      	movs	r1, #64	; 0x40
 80075f4:	68f8      	ldr	r0, [r7, #12]
 80075f6:	f000 fc5d 	bl	8007eb4 <UART_WaitOnFlagUntilTimeout>
 80075fa:	4603      	mov	r3, r0
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d005      	beq.n	800760c <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2220      	movs	r2, #32
 8007604:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8007608:	2303      	movs	r3, #3
 800760a:	e006      	b.n	800761a <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2220      	movs	r2, #32
 8007610:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007614:	2300      	movs	r3, #0
 8007616:	e000      	b.n	800761a <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 8007618:	2302      	movs	r3, #2
  }
}
 800761a:	4618      	mov	r0, r3
 800761c:	3720      	adds	r7, #32
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
	...

08007624 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007624:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007628:	b08c      	sub	sp, #48	; 0x30
 800762a:	af00      	add	r7, sp, #0
 800762c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800762e:	2300      	movs	r3, #0
 8007630:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	689a      	ldr	r2, [r3, #8]
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	691b      	ldr	r3, [r3, #16]
 800763c:	431a      	orrs	r2, r3
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	695b      	ldr	r3, [r3, #20]
 8007642:	431a      	orrs	r2, r3
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	69db      	ldr	r3, [r3, #28]
 8007648:	4313      	orrs	r3, r2
 800764a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	4baa      	ldr	r3, [pc, #680]	; (80078fc <UART_SetConfig+0x2d8>)
 8007654:	4013      	ands	r3, r2
 8007656:	697a      	ldr	r2, [r7, #20]
 8007658:	6812      	ldr	r2, [r2, #0]
 800765a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800765c:	430b      	orrs	r3, r1
 800765e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	68da      	ldr	r2, [r3, #12]
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	430a      	orrs	r2, r1
 8007674:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	699b      	ldr	r3, [r3, #24]
 800767a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a9f      	ldr	r2, [pc, #636]	; (8007900 <UART_SetConfig+0x2dc>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d004      	beq.n	8007690 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	6a1b      	ldr	r3, [r3, #32]
 800768a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800768c:	4313      	orrs	r3, r2
 800768e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800769a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800769e:	697a      	ldr	r2, [r7, #20]
 80076a0:	6812      	ldr	r2, [r2, #0]
 80076a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076a4:	430b      	orrs	r3, r1
 80076a6:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ae:	f023 010f 	bic.w	r1, r3, #15
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	430a      	orrs	r2, r1
 80076bc:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a90      	ldr	r2, [pc, #576]	; (8007904 <UART_SetConfig+0x2e0>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d125      	bne.n	8007714 <UART_SetConfig+0xf0>
 80076c8:	4b8f      	ldr	r3, [pc, #572]	; (8007908 <UART_SetConfig+0x2e4>)
 80076ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076ce:	f003 0303 	and.w	r3, r3, #3
 80076d2:	2b03      	cmp	r3, #3
 80076d4:	d81a      	bhi.n	800770c <UART_SetConfig+0xe8>
 80076d6:	a201      	add	r2, pc, #4	; (adr r2, 80076dc <UART_SetConfig+0xb8>)
 80076d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076dc:	080076ed 	.word	0x080076ed
 80076e0:	080076fd 	.word	0x080076fd
 80076e4:	080076f5 	.word	0x080076f5
 80076e8:	08007705 	.word	0x08007705
 80076ec:	2301      	movs	r3, #1
 80076ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076f2:	e116      	b.n	8007922 <UART_SetConfig+0x2fe>
 80076f4:	2302      	movs	r3, #2
 80076f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076fa:	e112      	b.n	8007922 <UART_SetConfig+0x2fe>
 80076fc:	2304      	movs	r3, #4
 80076fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007702:	e10e      	b.n	8007922 <UART_SetConfig+0x2fe>
 8007704:	2308      	movs	r3, #8
 8007706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800770a:	e10a      	b.n	8007922 <UART_SetConfig+0x2fe>
 800770c:	2310      	movs	r3, #16
 800770e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007712:	e106      	b.n	8007922 <UART_SetConfig+0x2fe>
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a7c      	ldr	r2, [pc, #496]	; (800790c <UART_SetConfig+0x2e8>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d138      	bne.n	8007790 <UART_SetConfig+0x16c>
 800771e:	4b7a      	ldr	r3, [pc, #488]	; (8007908 <UART_SetConfig+0x2e4>)
 8007720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007724:	f003 030c 	and.w	r3, r3, #12
 8007728:	2b0c      	cmp	r3, #12
 800772a:	d82d      	bhi.n	8007788 <UART_SetConfig+0x164>
 800772c:	a201      	add	r2, pc, #4	; (adr r2, 8007734 <UART_SetConfig+0x110>)
 800772e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007732:	bf00      	nop
 8007734:	08007769 	.word	0x08007769
 8007738:	08007789 	.word	0x08007789
 800773c:	08007789 	.word	0x08007789
 8007740:	08007789 	.word	0x08007789
 8007744:	08007779 	.word	0x08007779
 8007748:	08007789 	.word	0x08007789
 800774c:	08007789 	.word	0x08007789
 8007750:	08007789 	.word	0x08007789
 8007754:	08007771 	.word	0x08007771
 8007758:	08007789 	.word	0x08007789
 800775c:	08007789 	.word	0x08007789
 8007760:	08007789 	.word	0x08007789
 8007764:	08007781 	.word	0x08007781
 8007768:	2300      	movs	r3, #0
 800776a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800776e:	e0d8      	b.n	8007922 <UART_SetConfig+0x2fe>
 8007770:	2302      	movs	r3, #2
 8007772:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007776:	e0d4      	b.n	8007922 <UART_SetConfig+0x2fe>
 8007778:	2304      	movs	r3, #4
 800777a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800777e:	e0d0      	b.n	8007922 <UART_SetConfig+0x2fe>
 8007780:	2308      	movs	r3, #8
 8007782:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007786:	e0cc      	b.n	8007922 <UART_SetConfig+0x2fe>
 8007788:	2310      	movs	r3, #16
 800778a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800778e:	e0c8      	b.n	8007922 <UART_SetConfig+0x2fe>
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a5e      	ldr	r2, [pc, #376]	; (8007910 <UART_SetConfig+0x2ec>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d125      	bne.n	80077e6 <UART_SetConfig+0x1c2>
 800779a:	4b5b      	ldr	r3, [pc, #364]	; (8007908 <UART_SetConfig+0x2e4>)
 800779c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077a0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80077a4:	2b30      	cmp	r3, #48	; 0x30
 80077a6:	d016      	beq.n	80077d6 <UART_SetConfig+0x1b2>
 80077a8:	2b30      	cmp	r3, #48	; 0x30
 80077aa:	d818      	bhi.n	80077de <UART_SetConfig+0x1ba>
 80077ac:	2b20      	cmp	r3, #32
 80077ae:	d00a      	beq.n	80077c6 <UART_SetConfig+0x1a2>
 80077b0:	2b20      	cmp	r3, #32
 80077b2:	d814      	bhi.n	80077de <UART_SetConfig+0x1ba>
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d002      	beq.n	80077be <UART_SetConfig+0x19a>
 80077b8:	2b10      	cmp	r3, #16
 80077ba:	d008      	beq.n	80077ce <UART_SetConfig+0x1aa>
 80077bc:	e00f      	b.n	80077de <UART_SetConfig+0x1ba>
 80077be:	2300      	movs	r3, #0
 80077c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077c4:	e0ad      	b.n	8007922 <UART_SetConfig+0x2fe>
 80077c6:	2302      	movs	r3, #2
 80077c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077cc:	e0a9      	b.n	8007922 <UART_SetConfig+0x2fe>
 80077ce:	2304      	movs	r3, #4
 80077d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077d4:	e0a5      	b.n	8007922 <UART_SetConfig+0x2fe>
 80077d6:	2308      	movs	r3, #8
 80077d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077dc:	e0a1      	b.n	8007922 <UART_SetConfig+0x2fe>
 80077de:	2310      	movs	r3, #16
 80077e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077e4:	e09d      	b.n	8007922 <UART_SetConfig+0x2fe>
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a4a      	ldr	r2, [pc, #296]	; (8007914 <UART_SetConfig+0x2f0>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d125      	bne.n	800783c <UART_SetConfig+0x218>
 80077f0:	4b45      	ldr	r3, [pc, #276]	; (8007908 <UART_SetConfig+0x2e4>)
 80077f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80077fa:	2bc0      	cmp	r3, #192	; 0xc0
 80077fc:	d016      	beq.n	800782c <UART_SetConfig+0x208>
 80077fe:	2bc0      	cmp	r3, #192	; 0xc0
 8007800:	d818      	bhi.n	8007834 <UART_SetConfig+0x210>
 8007802:	2b80      	cmp	r3, #128	; 0x80
 8007804:	d00a      	beq.n	800781c <UART_SetConfig+0x1f8>
 8007806:	2b80      	cmp	r3, #128	; 0x80
 8007808:	d814      	bhi.n	8007834 <UART_SetConfig+0x210>
 800780a:	2b00      	cmp	r3, #0
 800780c:	d002      	beq.n	8007814 <UART_SetConfig+0x1f0>
 800780e:	2b40      	cmp	r3, #64	; 0x40
 8007810:	d008      	beq.n	8007824 <UART_SetConfig+0x200>
 8007812:	e00f      	b.n	8007834 <UART_SetConfig+0x210>
 8007814:	2300      	movs	r3, #0
 8007816:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800781a:	e082      	b.n	8007922 <UART_SetConfig+0x2fe>
 800781c:	2302      	movs	r3, #2
 800781e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007822:	e07e      	b.n	8007922 <UART_SetConfig+0x2fe>
 8007824:	2304      	movs	r3, #4
 8007826:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800782a:	e07a      	b.n	8007922 <UART_SetConfig+0x2fe>
 800782c:	2308      	movs	r3, #8
 800782e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007832:	e076      	b.n	8007922 <UART_SetConfig+0x2fe>
 8007834:	2310      	movs	r3, #16
 8007836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800783a:	e072      	b.n	8007922 <UART_SetConfig+0x2fe>
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a35      	ldr	r2, [pc, #212]	; (8007918 <UART_SetConfig+0x2f4>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d12a      	bne.n	800789c <UART_SetConfig+0x278>
 8007846:	4b30      	ldr	r3, [pc, #192]	; (8007908 <UART_SetConfig+0x2e4>)
 8007848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800784c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007850:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007854:	d01a      	beq.n	800788c <UART_SetConfig+0x268>
 8007856:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800785a:	d81b      	bhi.n	8007894 <UART_SetConfig+0x270>
 800785c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007860:	d00c      	beq.n	800787c <UART_SetConfig+0x258>
 8007862:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007866:	d815      	bhi.n	8007894 <UART_SetConfig+0x270>
 8007868:	2b00      	cmp	r3, #0
 800786a:	d003      	beq.n	8007874 <UART_SetConfig+0x250>
 800786c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007870:	d008      	beq.n	8007884 <UART_SetConfig+0x260>
 8007872:	e00f      	b.n	8007894 <UART_SetConfig+0x270>
 8007874:	2300      	movs	r3, #0
 8007876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800787a:	e052      	b.n	8007922 <UART_SetConfig+0x2fe>
 800787c:	2302      	movs	r3, #2
 800787e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007882:	e04e      	b.n	8007922 <UART_SetConfig+0x2fe>
 8007884:	2304      	movs	r3, #4
 8007886:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800788a:	e04a      	b.n	8007922 <UART_SetConfig+0x2fe>
 800788c:	2308      	movs	r3, #8
 800788e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007892:	e046      	b.n	8007922 <UART_SetConfig+0x2fe>
 8007894:	2310      	movs	r3, #16
 8007896:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800789a:	e042      	b.n	8007922 <UART_SetConfig+0x2fe>
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a17      	ldr	r2, [pc, #92]	; (8007900 <UART_SetConfig+0x2dc>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d13a      	bne.n	800791c <UART_SetConfig+0x2f8>
 80078a6:	4b18      	ldr	r3, [pc, #96]	; (8007908 <UART_SetConfig+0x2e4>)
 80078a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80078b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80078b4:	d01a      	beq.n	80078ec <UART_SetConfig+0x2c8>
 80078b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80078ba:	d81b      	bhi.n	80078f4 <UART_SetConfig+0x2d0>
 80078bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078c0:	d00c      	beq.n	80078dc <UART_SetConfig+0x2b8>
 80078c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078c6:	d815      	bhi.n	80078f4 <UART_SetConfig+0x2d0>
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d003      	beq.n	80078d4 <UART_SetConfig+0x2b0>
 80078cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078d0:	d008      	beq.n	80078e4 <UART_SetConfig+0x2c0>
 80078d2:	e00f      	b.n	80078f4 <UART_SetConfig+0x2d0>
 80078d4:	2300      	movs	r3, #0
 80078d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80078da:	e022      	b.n	8007922 <UART_SetConfig+0x2fe>
 80078dc:	2302      	movs	r3, #2
 80078de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80078e2:	e01e      	b.n	8007922 <UART_SetConfig+0x2fe>
 80078e4:	2304      	movs	r3, #4
 80078e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80078ea:	e01a      	b.n	8007922 <UART_SetConfig+0x2fe>
 80078ec:	2308      	movs	r3, #8
 80078ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80078f2:	e016      	b.n	8007922 <UART_SetConfig+0x2fe>
 80078f4:	2310      	movs	r3, #16
 80078f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80078fa:	e012      	b.n	8007922 <UART_SetConfig+0x2fe>
 80078fc:	cfff69f3 	.word	0xcfff69f3
 8007900:	40008000 	.word	0x40008000
 8007904:	40013800 	.word	0x40013800
 8007908:	40021000 	.word	0x40021000
 800790c:	40004400 	.word	0x40004400
 8007910:	40004800 	.word	0x40004800
 8007914:	40004c00 	.word	0x40004c00
 8007918:	40005000 	.word	0x40005000
 800791c:	2310      	movs	r3, #16
 800791e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4aae      	ldr	r2, [pc, #696]	; (8007be0 <UART_SetConfig+0x5bc>)
 8007928:	4293      	cmp	r3, r2
 800792a:	f040 8097 	bne.w	8007a5c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800792e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007932:	2b08      	cmp	r3, #8
 8007934:	d823      	bhi.n	800797e <UART_SetConfig+0x35a>
 8007936:	a201      	add	r2, pc, #4	; (adr r2, 800793c <UART_SetConfig+0x318>)
 8007938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800793c:	08007961 	.word	0x08007961
 8007940:	0800797f 	.word	0x0800797f
 8007944:	08007969 	.word	0x08007969
 8007948:	0800797f 	.word	0x0800797f
 800794c:	0800796f 	.word	0x0800796f
 8007950:	0800797f 	.word	0x0800797f
 8007954:	0800797f 	.word	0x0800797f
 8007958:	0800797f 	.word	0x0800797f
 800795c:	08007977 	.word	0x08007977
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007960:	f7fb ffb8 	bl	80038d4 <HAL_RCC_GetPCLK1Freq>
 8007964:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007966:	e010      	b.n	800798a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007968:	4b9e      	ldr	r3, [pc, #632]	; (8007be4 <UART_SetConfig+0x5c0>)
 800796a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800796c:	e00d      	b.n	800798a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800796e:	f7fb ff1b 	bl	80037a8 <HAL_RCC_GetSysClockFreq>
 8007972:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007974:	e009      	b.n	800798a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007976:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800797a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800797c:	e005      	b.n	800798a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800797e:	2300      	movs	r3, #0
 8007980:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007982:	2301      	movs	r3, #1
 8007984:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007988:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800798a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798c:	2b00      	cmp	r3, #0
 800798e:	f000 8130 	beq.w	8007bf2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007996:	4a94      	ldr	r2, [pc, #592]	; (8007be8 <UART_SetConfig+0x5c4>)
 8007998:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800799c:	461a      	mov	r2, r3
 800799e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80079a4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	685a      	ldr	r2, [r3, #4]
 80079aa:	4613      	mov	r3, r2
 80079ac:	005b      	lsls	r3, r3, #1
 80079ae:	4413      	add	r3, r2
 80079b0:	69ba      	ldr	r2, [r7, #24]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d305      	bcc.n	80079c2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80079bc:	69ba      	ldr	r2, [r7, #24]
 80079be:	429a      	cmp	r2, r3
 80079c0:	d903      	bls.n	80079ca <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80079c2:	2301      	movs	r3, #1
 80079c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80079c8:	e113      	b.n	8007bf2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079cc:	2200      	movs	r2, #0
 80079ce:	60bb      	str	r3, [r7, #8]
 80079d0:	60fa      	str	r2, [r7, #12]
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d6:	4a84      	ldr	r2, [pc, #528]	; (8007be8 <UART_SetConfig+0x5c4>)
 80079d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079dc:	b29b      	uxth	r3, r3
 80079de:	2200      	movs	r2, #0
 80079e0:	603b      	str	r3, [r7, #0]
 80079e2:	607a      	str	r2, [r7, #4]
 80079e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80079ec:	f7f8 fe1c 	bl	8000628 <__aeabi_uldivmod>
 80079f0:	4602      	mov	r2, r0
 80079f2:	460b      	mov	r3, r1
 80079f4:	4610      	mov	r0, r2
 80079f6:	4619      	mov	r1, r3
 80079f8:	f04f 0200 	mov.w	r2, #0
 80079fc:	f04f 0300 	mov.w	r3, #0
 8007a00:	020b      	lsls	r3, r1, #8
 8007a02:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007a06:	0202      	lsls	r2, r0, #8
 8007a08:	6979      	ldr	r1, [r7, #20]
 8007a0a:	6849      	ldr	r1, [r1, #4]
 8007a0c:	0849      	lsrs	r1, r1, #1
 8007a0e:	2000      	movs	r0, #0
 8007a10:	460c      	mov	r4, r1
 8007a12:	4605      	mov	r5, r0
 8007a14:	eb12 0804 	adds.w	r8, r2, r4
 8007a18:	eb43 0905 	adc.w	r9, r3, r5
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	469a      	mov	sl, r3
 8007a24:	4693      	mov	fp, r2
 8007a26:	4652      	mov	r2, sl
 8007a28:	465b      	mov	r3, fp
 8007a2a:	4640      	mov	r0, r8
 8007a2c:	4649      	mov	r1, r9
 8007a2e:	f7f8 fdfb 	bl	8000628 <__aeabi_uldivmod>
 8007a32:	4602      	mov	r2, r0
 8007a34:	460b      	mov	r3, r1
 8007a36:	4613      	mov	r3, r2
 8007a38:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007a3a:	6a3b      	ldr	r3, [r7, #32]
 8007a3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a40:	d308      	bcc.n	8007a54 <UART_SetConfig+0x430>
 8007a42:	6a3b      	ldr	r3, [r7, #32]
 8007a44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a48:	d204      	bcs.n	8007a54 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	6a3a      	ldr	r2, [r7, #32]
 8007a50:	60da      	str	r2, [r3, #12]
 8007a52:	e0ce      	b.n	8007bf2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007a54:	2301      	movs	r3, #1
 8007a56:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007a5a:	e0ca      	b.n	8007bf2 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	69db      	ldr	r3, [r3, #28]
 8007a60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a64:	d166      	bne.n	8007b34 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007a66:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007a6a:	2b08      	cmp	r3, #8
 8007a6c:	d827      	bhi.n	8007abe <UART_SetConfig+0x49a>
 8007a6e:	a201      	add	r2, pc, #4	; (adr r2, 8007a74 <UART_SetConfig+0x450>)
 8007a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a74:	08007a99 	.word	0x08007a99
 8007a78:	08007aa1 	.word	0x08007aa1
 8007a7c:	08007aa9 	.word	0x08007aa9
 8007a80:	08007abf 	.word	0x08007abf
 8007a84:	08007aaf 	.word	0x08007aaf
 8007a88:	08007abf 	.word	0x08007abf
 8007a8c:	08007abf 	.word	0x08007abf
 8007a90:	08007abf 	.word	0x08007abf
 8007a94:	08007ab7 	.word	0x08007ab7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a98:	f7fb ff1c 	bl	80038d4 <HAL_RCC_GetPCLK1Freq>
 8007a9c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007a9e:	e014      	b.n	8007aca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007aa0:	f7fb ff2e 	bl	8003900 <HAL_RCC_GetPCLK2Freq>
 8007aa4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007aa6:	e010      	b.n	8007aca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007aa8:	4b4e      	ldr	r3, [pc, #312]	; (8007be4 <UART_SetConfig+0x5c0>)
 8007aaa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007aac:	e00d      	b.n	8007aca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007aae:	f7fb fe7b 	bl	80037a8 <HAL_RCC_GetSysClockFreq>
 8007ab2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007ab4:	e009      	b.n	8007aca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ab6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007aba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007abc:	e005      	b.n	8007aca <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007ac8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	f000 8090 	beq.w	8007bf2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad6:	4a44      	ldr	r2, [pc, #272]	; (8007be8 <UART_SetConfig+0x5c4>)
 8007ad8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007adc:	461a      	mov	r2, r3
 8007ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae0:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ae4:	005a      	lsls	r2, r3, #1
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	085b      	lsrs	r3, r3, #1
 8007aec:	441a      	add	r2, r3
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007af6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007af8:	6a3b      	ldr	r3, [r7, #32]
 8007afa:	2b0f      	cmp	r3, #15
 8007afc:	d916      	bls.n	8007b2c <UART_SetConfig+0x508>
 8007afe:	6a3b      	ldr	r3, [r7, #32]
 8007b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b04:	d212      	bcs.n	8007b2c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b06:	6a3b      	ldr	r3, [r7, #32]
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	f023 030f 	bic.w	r3, r3, #15
 8007b0e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b10:	6a3b      	ldr	r3, [r7, #32]
 8007b12:	085b      	lsrs	r3, r3, #1
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	f003 0307 	and.w	r3, r3, #7
 8007b1a:	b29a      	uxth	r2, r3
 8007b1c:	8bfb      	ldrh	r3, [r7, #30]
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	8bfa      	ldrh	r2, [r7, #30]
 8007b28:	60da      	str	r2, [r3, #12]
 8007b2a:	e062      	b.n	8007bf2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007b32:	e05e      	b.n	8007bf2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007b34:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007b38:	2b08      	cmp	r3, #8
 8007b3a:	d828      	bhi.n	8007b8e <UART_SetConfig+0x56a>
 8007b3c:	a201      	add	r2, pc, #4	; (adr r2, 8007b44 <UART_SetConfig+0x520>)
 8007b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b42:	bf00      	nop
 8007b44:	08007b69 	.word	0x08007b69
 8007b48:	08007b71 	.word	0x08007b71
 8007b4c:	08007b79 	.word	0x08007b79
 8007b50:	08007b8f 	.word	0x08007b8f
 8007b54:	08007b7f 	.word	0x08007b7f
 8007b58:	08007b8f 	.word	0x08007b8f
 8007b5c:	08007b8f 	.word	0x08007b8f
 8007b60:	08007b8f 	.word	0x08007b8f
 8007b64:	08007b87 	.word	0x08007b87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b68:	f7fb feb4 	bl	80038d4 <HAL_RCC_GetPCLK1Freq>
 8007b6c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007b6e:	e014      	b.n	8007b9a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b70:	f7fb fec6 	bl	8003900 <HAL_RCC_GetPCLK2Freq>
 8007b74:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007b76:	e010      	b.n	8007b9a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b78:	4b1a      	ldr	r3, [pc, #104]	; (8007be4 <UART_SetConfig+0x5c0>)
 8007b7a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007b7c:	e00d      	b.n	8007b9a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b7e:	f7fb fe13 	bl	80037a8 <HAL_RCC_GetSysClockFreq>
 8007b82:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007b84:	e009      	b.n	8007b9a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007b8c:	e005      	b.n	8007b9a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007b92:	2301      	movs	r3, #1
 8007b94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007b98:	bf00      	nop
    }

    if (pclk != 0U)
 8007b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d028      	beq.n	8007bf2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba4:	4a10      	ldr	r2, [pc, #64]	; (8007be8 <UART_SetConfig+0x5c4>)
 8007ba6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007baa:	461a      	mov	r2, r3
 8007bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bae:	fbb3 f2f2 	udiv	r2, r3, r2
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	085b      	lsrs	r3, r3, #1
 8007bb8:	441a      	add	r2, r3
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bc2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007bc4:	6a3b      	ldr	r3, [r7, #32]
 8007bc6:	2b0f      	cmp	r3, #15
 8007bc8:	d910      	bls.n	8007bec <UART_SetConfig+0x5c8>
 8007bca:	6a3b      	ldr	r3, [r7, #32]
 8007bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bd0:	d20c      	bcs.n	8007bec <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007bd2:	6a3b      	ldr	r3, [r7, #32]
 8007bd4:	b29a      	uxth	r2, r3
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	60da      	str	r2, [r3, #12]
 8007bdc:	e009      	b.n	8007bf2 <UART_SetConfig+0x5ce>
 8007bde:	bf00      	nop
 8007be0:	40008000 	.word	0x40008000
 8007be4:	00f42400 	.word	0x00f42400
 8007be8:	08009df0 	.word	0x08009df0
      }
      else
      {
        ret = HAL_ERROR;
 8007bec:	2301      	movs	r3, #1
 8007bee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	2200      	movs	r2, #0
 8007c06:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007c0e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3730      	adds	r7, #48	; 0x30
 8007c16:	46bd      	mov	sp, r7
 8007c18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007c1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b083      	sub	sp, #12
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c28:	f003 0308 	and.w	r3, r3, #8
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d00a      	beq.n	8007c46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	430a      	orrs	r2, r1
 8007c44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c4a:	f003 0301 	and.w	r3, r3, #1
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d00a      	beq.n	8007c68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	430a      	orrs	r2, r1
 8007c66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c6c:	f003 0302 	and.w	r3, r3, #2
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d00a      	beq.n	8007c8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	430a      	orrs	r2, r1
 8007c88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c8e:	f003 0304 	and.w	r3, r3, #4
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d00a      	beq.n	8007cac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	430a      	orrs	r2, r1
 8007caa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cb0:	f003 0310 	and.w	r3, r3, #16
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d00a      	beq.n	8007cce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	430a      	orrs	r2, r1
 8007ccc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cd2:	f003 0320 	and.w	r3, r3, #32
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d00a      	beq.n	8007cf0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	430a      	orrs	r2, r1
 8007cee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d01a      	beq.n	8007d32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	430a      	orrs	r2, r1
 8007d10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d1a:	d10a      	bne.n	8007d32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	430a      	orrs	r2, r1
 8007d30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d00a      	beq.n	8007d54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	430a      	orrs	r2, r1
 8007d52:	605a      	str	r2, [r3, #4]
  }
}
 8007d54:	bf00      	nop
 8007d56:	370c      	adds	r7, #12
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr

08007d60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b098      	sub	sp, #96	; 0x60
 8007d64:	af02      	add	r7, sp, #8
 8007d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d70:	f7fa f990 	bl	8002094 <HAL_GetTick>
 8007d74:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f003 0308 	and.w	r3, r3, #8
 8007d80:	2b08      	cmp	r3, #8
 8007d82:	d12f      	bne.n	8007de4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d88:	9300      	str	r3, [sp, #0]
 8007d8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f000 f88e 	bl	8007eb4 <UART_WaitOnFlagUntilTimeout>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d022      	beq.n	8007de4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da6:	e853 3f00 	ldrex	r3, [r3]
 8007daa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007db2:	653b      	str	r3, [r7, #80]	; 0x50
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	461a      	mov	r2, r3
 8007dba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007dbc:	647b      	str	r3, [r7, #68]	; 0x44
 8007dbe:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007dc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007dc4:	e841 2300 	strex	r3, r2, [r1]
 8007dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d1e6      	bne.n	8007d9e <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2220      	movs	r2, #32
 8007dd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007de0:	2303      	movs	r3, #3
 8007de2:	e063      	b.n	8007eac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f003 0304 	and.w	r3, r3, #4
 8007dee:	2b04      	cmp	r3, #4
 8007df0:	d149      	bne.n	8007e86 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007df2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007df6:	9300      	str	r3, [sp, #0]
 8007df8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f000 f857 	bl	8007eb4 <UART_WaitOnFlagUntilTimeout>
 8007e06:	4603      	mov	r3, r0
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d03c      	beq.n	8007e86 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e14:	e853 3f00 	ldrex	r3, [r3]
 8007e18:	623b      	str	r3, [r7, #32]
   return(result);
 8007e1a:	6a3b      	ldr	r3, [r7, #32]
 8007e1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	461a      	mov	r2, r3
 8007e28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e2a:	633b      	str	r3, [r7, #48]	; 0x30
 8007e2c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e32:	e841 2300 	strex	r3, r2, [r1]
 8007e36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d1e6      	bne.n	8007e0c <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	3308      	adds	r3, #8
 8007e44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	e853 3f00 	ldrex	r3, [r3]
 8007e4c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f023 0301 	bic.w	r3, r3, #1
 8007e54:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	3308      	adds	r3, #8
 8007e5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e5e:	61fa      	str	r2, [r7, #28]
 8007e60:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e62:	69b9      	ldr	r1, [r7, #24]
 8007e64:	69fa      	ldr	r2, [r7, #28]
 8007e66:	e841 2300 	strex	r3, r2, [r1]
 8007e6a:	617b      	str	r3, [r7, #20]
   return(result);
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d1e5      	bne.n	8007e3e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2220      	movs	r2, #32
 8007e76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e82:	2303      	movs	r3, #3
 8007e84:	e012      	b.n	8007eac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2220      	movs	r2, #32
 8007e8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2220      	movs	r2, #32
 8007e92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007eaa:	2300      	movs	r3, #0
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3758      	adds	r7, #88	; 0x58
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	60f8      	str	r0, [r7, #12]
 8007ebc:	60b9      	str	r1, [r7, #8]
 8007ebe:	603b      	str	r3, [r7, #0]
 8007ec0:	4613      	mov	r3, r2
 8007ec2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ec4:	e049      	b.n	8007f5a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ec6:	69bb      	ldr	r3, [r7, #24]
 8007ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ecc:	d045      	beq.n	8007f5a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ece:	f7fa f8e1 	bl	8002094 <HAL_GetTick>
 8007ed2:	4602      	mov	r2, r0
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	1ad3      	subs	r3, r2, r3
 8007ed8:	69ba      	ldr	r2, [r7, #24]
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d302      	bcc.n	8007ee4 <UART_WaitOnFlagUntilTimeout+0x30>
 8007ede:	69bb      	ldr	r3, [r7, #24]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d101      	bne.n	8007ee8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007ee4:	2303      	movs	r3, #3
 8007ee6:	e048      	b.n	8007f7a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f003 0304 	and.w	r3, r3, #4
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d031      	beq.n	8007f5a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	69db      	ldr	r3, [r3, #28]
 8007efc:	f003 0308 	and.w	r3, r3, #8
 8007f00:	2b08      	cmp	r3, #8
 8007f02:	d110      	bne.n	8007f26 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	2208      	movs	r2, #8
 8007f0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f0c:	68f8      	ldr	r0, [r7, #12]
 8007f0e:	f000 f838 	bl	8007f82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2208      	movs	r2, #8
 8007f16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8007f22:	2301      	movs	r3, #1
 8007f24:	e029      	b.n	8007f7a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	69db      	ldr	r3, [r3, #28]
 8007f2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f34:	d111      	bne.n	8007f5a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	f000 f81e 	bl	8007f82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2220      	movs	r2, #32
 8007f4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2200      	movs	r2, #0
 8007f52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007f56:	2303      	movs	r3, #3
 8007f58:	e00f      	b.n	8007f7a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	69da      	ldr	r2, [r3, #28]
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	4013      	ands	r3, r2
 8007f64:	68ba      	ldr	r2, [r7, #8]
 8007f66:	429a      	cmp	r2, r3
 8007f68:	bf0c      	ite	eq
 8007f6a:	2301      	moveq	r3, #1
 8007f6c:	2300      	movne	r3, #0
 8007f6e:	b2db      	uxtb	r3, r3
 8007f70:	461a      	mov	r2, r3
 8007f72:	79fb      	ldrb	r3, [r7, #7]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d0a6      	beq.n	8007ec6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f78:	2300      	movs	r3, #0
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3710      	adds	r7, #16
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}

08007f82 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f82:	b480      	push	{r7}
 8007f84:	b095      	sub	sp, #84	; 0x54
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f92:	e853 3f00 	ldrex	r3, [r3]
 8007f96:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fa8:	643b      	str	r3, [r7, #64]	; 0x40
 8007faa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007fae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007fb0:	e841 2300 	strex	r3, r2, [r1]
 8007fb4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d1e6      	bne.n	8007f8a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	3308      	adds	r3, #8
 8007fc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc4:	6a3b      	ldr	r3, [r7, #32]
 8007fc6:	e853 3f00 	ldrex	r3, [r3]
 8007fca:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fcc:	69fb      	ldr	r3, [r7, #28]
 8007fce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007fd2:	f023 0301 	bic.w	r3, r3, #1
 8007fd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	3308      	adds	r3, #8
 8007fde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fe0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007fe2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fe6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fe8:	e841 2300 	strex	r3, r2, [r1]
 8007fec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d1e3      	bne.n	8007fbc <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d118      	bne.n	800802e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	e853 3f00 	ldrex	r3, [r3]
 8008008:	60bb      	str	r3, [r7, #8]
   return(result);
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	f023 0310 	bic.w	r3, r3, #16
 8008010:	647b      	str	r3, [r7, #68]	; 0x44
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	461a      	mov	r2, r3
 8008018:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800801a:	61bb      	str	r3, [r7, #24]
 800801c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800801e:	6979      	ldr	r1, [r7, #20]
 8008020:	69ba      	ldr	r2, [r7, #24]
 8008022:	e841 2300 	strex	r3, r2, [r1]
 8008026:	613b      	str	r3, [r7, #16]
   return(result);
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d1e6      	bne.n	8007ffc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2220      	movs	r2, #32
 8008032:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2200      	movs	r2, #0
 8008040:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008042:	bf00      	nop
 8008044:	3754      	adds	r7, #84	; 0x54
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr

0800804e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800804e:	b480      	push	{r7}
 8008050:	b085      	sub	sp, #20
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800805c:	2b01      	cmp	r3, #1
 800805e:	d101      	bne.n	8008064 <HAL_UARTEx_DisableFifoMode+0x16>
 8008060:	2302      	movs	r3, #2
 8008062:	e027      	b.n	80080b4 <HAL_UARTEx_DisableFifoMode+0x66>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2201      	movs	r2, #1
 8008068:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2224      	movs	r2, #36	; 0x24
 8008070:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	681a      	ldr	r2, [r3, #0]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f022 0201 	bic.w	r2, r2, #1
 800808a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008092:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	68fa      	ldr	r2, [r7, #12]
 80080a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2220      	movs	r2, #32
 80080a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2200      	movs	r2, #0
 80080ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80080b2:	2300      	movs	r3, #0
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3714      	adds	r7, #20
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr

080080c0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d101      	bne.n	80080d8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80080d4:	2302      	movs	r3, #2
 80080d6:	e02d      	b.n	8008134 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2201      	movs	r2, #1
 80080dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2224      	movs	r2, #36	; 0x24
 80080e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f022 0201 	bic.w	r2, r2, #1
 80080fe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	689b      	ldr	r3, [r3, #8]
 8008106:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	683a      	ldr	r2, [r7, #0]
 8008110:	430a      	orrs	r2, r1
 8008112:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 f84f 	bl	80081b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	68fa      	ldr	r2, [r7, #12]
 8008120:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2220      	movs	r2, #32
 8008126:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008132:	2300      	movs	r3, #0
}
 8008134:	4618      	mov	r0, r3
 8008136:	3710      	adds	r7, #16
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b084      	sub	sp, #16
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800814c:	2b01      	cmp	r3, #1
 800814e:	d101      	bne.n	8008154 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008150:	2302      	movs	r3, #2
 8008152:	e02d      	b.n	80081b0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2201      	movs	r2, #1
 8008158:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2224      	movs	r2, #36	; 0x24
 8008160:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f022 0201 	bic.w	r2, r2, #1
 800817a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	683a      	ldr	r2, [r7, #0]
 800818c:	430a      	orrs	r2, r1
 800818e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 f811 	bl	80081b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	68fa      	ldr	r2, [r7, #12]
 800819c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2220      	movs	r2, #32
 80081a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80081ae:	2300      	movs	r3, #0
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3710      	adds	r7, #16
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b085      	sub	sp, #20
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d108      	bne.n	80081da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80081d8:	e031      	b.n	800823e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80081da:	2308      	movs	r3, #8
 80081dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80081de:	2308      	movs	r3, #8
 80081e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	0e5b      	lsrs	r3, r3, #25
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	f003 0307 	and.w	r3, r3, #7
 80081f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	689b      	ldr	r3, [r3, #8]
 80081f8:	0f5b      	lsrs	r3, r3, #29
 80081fa:	b2db      	uxtb	r3, r3
 80081fc:	f003 0307 	and.w	r3, r3, #7
 8008200:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008202:	7bbb      	ldrb	r3, [r7, #14]
 8008204:	7b3a      	ldrb	r2, [r7, #12]
 8008206:	4911      	ldr	r1, [pc, #68]	; (800824c <UARTEx_SetNbDataToProcess+0x94>)
 8008208:	5c8a      	ldrb	r2, [r1, r2]
 800820a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800820e:	7b3a      	ldrb	r2, [r7, #12]
 8008210:	490f      	ldr	r1, [pc, #60]	; (8008250 <UARTEx_SetNbDataToProcess+0x98>)
 8008212:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008214:	fb93 f3f2 	sdiv	r3, r3, r2
 8008218:	b29a      	uxth	r2, r3
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008220:	7bfb      	ldrb	r3, [r7, #15]
 8008222:	7b7a      	ldrb	r2, [r7, #13]
 8008224:	4909      	ldr	r1, [pc, #36]	; (800824c <UARTEx_SetNbDataToProcess+0x94>)
 8008226:	5c8a      	ldrb	r2, [r1, r2]
 8008228:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800822c:	7b7a      	ldrb	r2, [r7, #13]
 800822e:	4908      	ldr	r1, [pc, #32]	; (8008250 <UARTEx_SetNbDataToProcess+0x98>)
 8008230:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008232:	fb93 f3f2 	sdiv	r3, r3, r2
 8008236:	b29a      	uxth	r2, r3
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800823e:	bf00      	nop
 8008240:	3714      	adds	r7, #20
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr
 800824a:	bf00      	nop
 800824c:	08009e08 	.word	0x08009e08
 8008250:	08009e10 	.word	0x08009e10

08008254 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8008254:	b480      	push	{r7}
 8008256:	b087      	sub	sp, #28
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	681a      	ldr	r2, [r3, #0]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008268:	683a      	ldr	r2, [r7, #0]
 800826a:	6812      	ldr	r2, [r2, #0]
 800826c:	f023 0101 	bic.w	r1, r3, #1
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	689b      	ldr	r3, [r3, #8]
 800827a:	2b08      	cmp	r3, #8
 800827c:	d102      	bne.n	8008284 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800827e:	2340      	movs	r3, #64	; 0x40
 8008280:	617b      	str	r3, [r7, #20]
 8008282:	e001      	b.n	8008288 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8008284:	2300      	movs	r3, #0
 8008286:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8008294:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800829a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80082a0:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80082a6:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 80082ac:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 80082b2:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 80082b8:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 80082be:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 80082c4:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 80082ca:	4313      	orrs	r3, r2
 80082cc:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d2:	693a      	ldr	r2, [r7, #16]
 80082d4:	4313      	orrs	r3, r2
 80082d6:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082dc:	693a      	ldr	r2, [r7, #16]
 80082de:	4313      	orrs	r3, r2
 80082e0:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082e6:	693a      	ldr	r2, [r7, #16]
 80082e8:	4313      	orrs	r3, r2
 80082ea:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f0:	693a      	ldr	r2, [r7, #16]
 80082f2:	4313      	orrs	r3, r2
 80082f4:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 80082f6:	4b23      	ldr	r3, [pc, #140]	; (8008384 <FMC_NORSRAM_Init+0x130>)
 80082f8:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008300:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008308:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8008310:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8008318:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	681a      	ldr	r2, [r3, #0]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	43db      	mvns	r3, r3
 8008328:	ea02 0103 	and.w	r1, r2, r3
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	681a      	ldr	r2, [r3, #0]
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	4319      	orrs	r1, r3
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800833e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008342:	d10c      	bne.n	800835e <FMC_NORSRAM_Init+0x10a>
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d008      	beq.n	800835e <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008358:	431a      	orrs	r2, r3
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d006      	beq.n	8008374 <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681a      	ldr	r2, [r3, #0]
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800836e:	431a      	orrs	r2, r3
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 8008374:	2300      	movs	r3, #0
}
 8008376:	4618      	mov	r0, r3
 8008378:	371c      	adds	r7, #28
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr
 8008382:	bf00      	nop
 8008384:	0008fb7f 	.word	0x0008fb7f

08008388 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008388:	b480      	push	{r7}
 800838a:	b087      	sub	sp, #28
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
#if defined(FMC_BTRx_DATAHLD)
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	1c5a      	adds	r2, r3, #1
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	011b      	lsls	r3, r3, #4
 80083a8:	431a      	orrs	r2, r3
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	689b      	ldr	r3, [r3, #8]
 80083ae:	021b      	lsls	r3, r3, #8
 80083b0:	431a      	orrs	r2, r3
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	68db      	ldr	r3, [r3, #12]
 80083b6:	079b      	lsls	r3, r3, #30
 80083b8:	431a      	orrs	r2, r3
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	691b      	ldr	r3, [r3, #16]
 80083be:	041b      	lsls	r3, r3, #16
 80083c0:	431a      	orrs	r2, r3
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	695b      	ldr	r3, [r3, #20]
 80083c6:	3b01      	subs	r3, #1
 80083c8:	051b      	lsls	r3, r3, #20
 80083ca:	431a      	orrs	r2, r3
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	699b      	ldr	r3, [r3, #24]
 80083d0:	3b02      	subs	r3, #2
 80083d2:	061b      	lsls	r3, r3, #24
 80083d4:	ea42 0103 	orr.w	r1, r2, r3
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	69db      	ldr	r3, [r3, #28]
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	3201      	adds	r2, #1
 80083e0:	4319      	orrs	r1, r3
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80083f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083f4:	d113      	bne.n	800841e <FMC_NORSRAM_Timing_Init+0x96>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	685b      	ldr	r3, [r3, #4]
 80083fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80083fe:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	695b      	ldr	r3, [r3, #20]
 8008404:	3b01      	subs	r3, #1
 8008406:	051b      	lsls	r3, r3, #20
 8008408:	697a      	ldr	r2, [r7, #20]
 800840a:	4313      	orrs	r3, r2
 800840c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	431a      	orrs	r2, r3
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800841e:	2300      	movs	r3, #0
}
 8008420:	4618      	mov	r0, r3
 8008422:	371c      	adds	r7, #28
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr

0800842c <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800842c:	b480      	push	{r7}
 800842e:	b085      	sub	sp, #20
 8008430:	af00      	add	r7, sp, #0
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	60b9      	str	r1, [r7, #8]
 8008436:	607a      	str	r2, [r7, #4]
 8008438:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008440:	d121      	bne.n	8008486 <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FMC_BTRx_DATAHLD)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	687a      	ldr	r2, [r7, #4]
 8008446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800844a:	f003 627f 	and.w	r2, r3, #267386880	; 0xff00000
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	6819      	ldr	r1, [r3, #0]
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	011b      	lsls	r3, r3, #4
 8008458:	4319      	orrs	r1, r3
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	021b      	lsls	r3, r3, #8
 8008460:	4319      	orrs	r1, r3
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	68db      	ldr	r3, [r3, #12]
 8008466:	079b      	lsls	r3, r3, #30
 8008468:	4319      	orrs	r1, r3
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	69db      	ldr	r3, [r3, #28]
 800846e:	4319      	orrs	r1, r3
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	691b      	ldr	r3, [r3, #16]
 8008474:	041b      	lsls	r3, r3, #16
 8008476:	430b      	orrs	r3, r1
 8008478:	ea42 0103 	orr.w	r1, r2, r3
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	687a      	ldr	r2, [r7, #4]
 8008480:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008484:	e005      	b.n	8008492 <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	687a      	ldr	r2, [r7, #4]
 800848a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800848e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8008492:	2300      	movs	r3, #0
}
 8008494:	4618      	mov	r0, r3
 8008496:	3714      	adds	r7, #20
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr

080084a0 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80084a0:	b084      	sub	sp, #16
 80084a2:	b480      	push	{r7}
 80084a4:	b085      	sub	sp, #20
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
 80084aa:	f107 001c 	add.w	r0, r7, #28
 80084ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80084b2:	2300      	movs	r3, #0
 80084b4:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 80084b6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 80084b8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80084ba:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80084bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 80084be:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80084c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 80084c2:	431a      	orrs	r2, r3
             Init.ClockDiv
 80084c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 80084c6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80084c8:	68fa      	ldr	r2, [r7, #12]
 80084ca:	4313      	orrs	r3, r2
 80084cc:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	685a      	ldr	r2, [r3, #4]
 80084d2:	4b07      	ldr	r3, [pc, #28]	; (80084f0 <SDMMC_Init+0x50>)
 80084d4:	4013      	ands	r3, r2
 80084d6:	68fa      	ldr	r2, [r7, #12]
 80084d8:	431a      	orrs	r2, r3
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80084de:	2300      	movs	r3, #0
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3714      	adds	r7, #20
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	b004      	add	sp, #16
 80084ec:	4770      	bx	lr
 80084ee:	bf00      	nop
 80084f0:	ffc02c00 	.word	0xffc02c00

080084f4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b083      	sub	sp, #12
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008502:	4618      	mov	r0, r3
 8008504:	370c      	adds	r7, #12
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr

0800850e <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800850e:	b580      	push	{r7, lr}
 8008510:	b082      	sub	sp, #8
 8008512:	af00      	add	r7, sp, #0
 8008514:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f043 0203 	orr.w	r2, r3, #3
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8008522:	2002      	movs	r0, #2
 8008524:	f7f9 fdc2 	bl	80020ac <HAL_Delay>

  return HAL_OK;
 8008528:	2300      	movs	r3, #0
}
 800852a:	4618      	mov	r0, r3
 800852c:	3708      	adds	r7, #8
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}

08008532 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8008532:	b480      	push	{r7}
 8008534:	b083      	sub	sp, #12
 8008536:	af00      	add	r7, sp, #0
 8008538:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f003 0303 	and.w	r3, r3, #3
}
 8008542:	4618      	mov	r0, r3
 8008544:	370c      	adds	r7, #12
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr
	...

08008550 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008550:	b480      	push	{r7}
 8008552:	b085      	sub	sp, #20
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800855a:	2300      	movs	r3, #0
 800855c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800856e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008574:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800857a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800857c:	68fa      	ldr	r2, [r7, #12]
 800857e:	4313      	orrs	r3, r2
 8008580:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	68da      	ldr	r2, [r3, #12]
 8008586:	4b06      	ldr	r3, [pc, #24]	; (80085a0 <SDMMC_SendCommand+0x50>)
 8008588:	4013      	ands	r3, r2
 800858a:	68fa      	ldr	r2, [r7, #12]
 800858c:	431a      	orrs	r2, r3
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008592:	2300      	movs	r3, #0
}
 8008594:	4618      	mov	r0, r3
 8008596:	3714      	adds	r7, #20
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr
 80085a0:	fffee0c0 	.word	0xfffee0c0

080085a4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b083      	sub	sp, #12
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	691b      	ldr	r3, [r3, #16]
 80085b0:	b2db      	uxtb	r3, r3
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	370c      	adds	r7, #12
 80085b6:	46bd      	mov	sp, r7
 80085b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085bc:	4770      	bx	lr

080085be <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80085be:	b480      	push	{r7}
 80085c0:	b085      	sub	sp, #20
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
 80085c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	3314      	adds	r3, #20
 80085cc:	461a      	mov	r2, r3
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	4413      	add	r3, r2
 80085d2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3714      	adds	r7, #20
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr

080085e4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b085      	sub	sp, #20
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80085ee:	2300      	movs	r3, #0
 80085f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	681a      	ldr	r2, [r3, #0]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	685a      	ldr	r2, [r3, #4]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800860a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008610:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008616:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008618:	68fa      	ldr	r2, [r7, #12]
 800861a:	4313      	orrs	r3, r2
 800861c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008622:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	431a      	orrs	r2, r3
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800862e:	2300      	movs	r3, #0

}
 8008630:	4618      	mov	r0, r3
 8008632:	3714      	adds	r7, #20
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr

0800863c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b088      	sub	sp, #32
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800864a:	2310      	movs	r3, #16
 800864c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800864e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008652:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008654:	2300      	movs	r3, #0
 8008656:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008658:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800865c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800865e:	f107 0308 	add.w	r3, r7, #8
 8008662:	4619      	mov	r1, r3
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f7ff ff73 	bl	8008550 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800866a:	f241 3288 	movw	r2, #5000	; 0x1388
 800866e:	2110      	movs	r1, #16
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 f9b9 	bl	80089e8 <SDMMC_GetCmdResp1>
 8008676:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008678:	69fb      	ldr	r3, [r7, #28]
}
 800867a:	4618      	mov	r0, r3
 800867c:	3720      	adds	r7, #32
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}

08008682 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8008682:	b580      	push	{r7, lr}
 8008684:	b08a      	sub	sp, #40	; 0x28
 8008686:	af00      	add	r7, sp, #0
 8008688:	60f8      	str	r0, [r7, #12]
 800868a:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008692:	2307      	movs	r3, #7
 8008694:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008696:	f44f 7380 	mov.w	r3, #256	; 0x100
 800869a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800869c:	2300      	movs	r3, #0
 800869e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80086a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80086a4:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80086a6:	f107 0310 	add.w	r3, r7, #16
 80086aa:	4619      	mov	r1, r3
 80086ac:	68f8      	ldr	r0, [r7, #12]
 80086ae:	f7ff ff4f 	bl	8008550 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80086b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80086b6:	2107      	movs	r1, #7
 80086b8:	68f8      	ldr	r0, [r7, #12]
 80086ba:	f000 f995 	bl	80089e8 <SDMMC_GetCmdResp1>
 80086be:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80086c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3728      	adds	r7, #40	; 0x28
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}

080086ca <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80086ca:	b580      	push	{r7, lr}
 80086cc:	b088      	sub	sp, #32
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80086d2:	2300      	movs	r3, #0
 80086d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80086d6:	2300      	movs	r3, #0
 80086d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80086da:	2300      	movs	r3, #0
 80086dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80086de:	2300      	movs	r3, #0
 80086e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80086e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80086e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80086e8:	f107 0308 	add.w	r3, r7, #8
 80086ec:	4619      	mov	r1, r3
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f7ff ff2e 	bl	8008550 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f000 fbb9 	bl	8008e6c <SDMMC_GetCmdError>
 80086fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80086fc:	69fb      	ldr	r3, [r7, #28]
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3720      	adds	r7, #32
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}

08008706 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008706:	b580      	push	{r7, lr}
 8008708:	b088      	sub	sp, #32
 800870a:	af00      	add	r7, sp, #0
 800870c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800870e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008712:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008714:	2308      	movs	r3, #8
 8008716:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008718:	f44f 7380 	mov.w	r3, #256	; 0x100
 800871c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800871e:	2300      	movs	r3, #0
 8008720:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008722:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008726:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008728:	f107 0308 	add.w	r3, r7, #8
 800872c:	4619      	mov	r1, r3
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f7ff ff0e 	bl	8008550 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 fb4b 	bl	8008dd0 <SDMMC_GetCmdResp7>
 800873a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800873c:	69fb      	ldr	r3, [r7, #28]
}
 800873e:	4618      	mov	r0, r3
 8008740:	3720      	adds	r7, #32
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}

08008746 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008746:	b580      	push	{r7, lr}
 8008748:	b088      	sub	sp, #32
 800874a:	af00      	add	r7, sp, #0
 800874c:	6078      	str	r0, [r7, #4]
 800874e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008754:	2337      	movs	r3, #55	; 0x37
 8008756:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008758:	f44f 7380 	mov.w	r3, #256	; 0x100
 800875c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800875e:	2300      	movs	r3, #0
 8008760:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008762:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008766:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008768:	f107 0308 	add.w	r3, r7, #8
 800876c:	4619      	mov	r1, r3
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f7ff feee 	bl	8008550 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8008774:	f241 3288 	movw	r2, #5000	; 0x1388
 8008778:	2137      	movs	r1, #55	; 0x37
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 f934 	bl	80089e8 <SDMMC_GetCmdResp1>
 8008780:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008782:	69fb      	ldr	r3, [r7, #28]
}
 8008784:	4618      	mov	r0, r3
 8008786:	3720      	adds	r7, #32
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b088      	sub	sp, #32
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800879a:	2329      	movs	r3, #41	; 0x29
 800879c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800879e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80087a4:	2300      	movs	r3, #0
 80087a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80087a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80087ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80087ae:	f107 0308 	add.w	r3, r7, #8
 80087b2:	4619      	mov	r1, r3
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f7ff fecb 	bl	8008550 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 fa50 	bl	8008c60 <SDMMC_GetCmdResp3>
 80087c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80087c2:	69fb      	ldr	r3, [r7, #28]
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3720      	adds	r7, #32
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b088      	sub	sp, #32
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80087da:	2306      	movs	r3, #6
 80087dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80087de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80087e4:	2300      	movs	r3, #0
 80087e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80087e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80087ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80087ee:	f107 0308 	add.w	r3, r7, #8
 80087f2:	4619      	mov	r1, r3
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f7ff feab 	bl	8008550 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80087fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80087fe:	2106      	movs	r1, #6
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f000 f8f1 	bl	80089e8 <SDMMC_GetCmdResp1>
 8008806:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008808:	69fb      	ldr	r3, [r7, #28]
}
 800880a:	4618      	mov	r0, r3
 800880c:	3720      	adds	r7, #32
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}

08008812 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8008812:	b580      	push	{r7, lr}
 8008814:	b088      	sub	sp, #32
 8008816:	af00      	add	r7, sp, #0
 8008818:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800881a:	2300      	movs	r3, #0
 800881c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800881e:	2333      	movs	r3, #51	; 0x33
 8008820:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008822:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008826:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008828:	2300      	movs	r3, #0
 800882a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800882c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008830:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008832:	f107 0308 	add.w	r3, r7, #8
 8008836:	4619      	mov	r1, r3
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f7ff fe89 	bl	8008550 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800883e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008842:	2133      	movs	r1, #51	; 0x33
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f000 f8cf 	bl	80089e8 <SDMMC_GetCmdResp1>
 800884a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800884c:	69fb      	ldr	r3, [r7, #28]
}
 800884e:	4618      	mov	r0, r3
 8008850:	3720      	adds	r7, #32
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}

08008856 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8008856:	b580      	push	{r7, lr}
 8008858:	b088      	sub	sp, #32
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800885e:	2300      	movs	r3, #0
 8008860:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008862:	2302      	movs	r3, #2
 8008864:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008866:	f44f 7340 	mov.w	r3, #768	; 0x300
 800886a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800886c:	2300      	movs	r3, #0
 800886e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008870:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008874:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008876:	f107 0308 	add.w	r3, r7, #8
 800887a:	4619      	mov	r1, r3
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f7ff fe67 	bl	8008550 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 f9a2 	bl	8008bcc <SDMMC_GetCmdResp2>
 8008888:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800888a:	69fb      	ldr	r3, [r7, #28]
}
 800888c:	4618      	mov	r0, r3
 800888e:	3720      	adds	r7, #32
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b088      	sub	sp, #32
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80088a2:	2309      	movs	r3, #9
 80088a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80088a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80088aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80088ac:	2300      	movs	r3, #0
 80088ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80088b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80088b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80088b6:	f107 0308 	add.w	r3, r7, #8
 80088ba:	4619      	mov	r1, r3
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f7ff fe47 	bl	8008550 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f000 f982 	bl	8008bcc <SDMMC_GetCmdResp2>
 80088c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80088ca:	69fb      	ldr	r3, [r7, #28]
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3720      	adds	r7, #32
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b088      	sub	sp, #32
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80088de:	2300      	movs	r3, #0
 80088e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80088e2:	2303      	movs	r3, #3
 80088e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80088e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80088ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80088ec:	2300      	movs	r3, #0
 80088ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80088f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80088f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80088f6:	f107 0308 	add.w	r3, r7, #8
 80088fa:	4619      	mov	r1, r3
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f7ff fe27 	bl	8008550 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008902:	683a      	ldr	r2, [r7, #0]
 8008904:	2103      	movs	r1, #3
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f000 f9ea 	bl	8008ce0 <SDMMC_GetCmdResp6>
 800890c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800890e:	69fb      	ldr	r3, [r7, #28]
}
 8008910:	4618      	mov	r0, r3
 8008912:	3720      	adds	r7, #32
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b088      	sub	sp, #32
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008926:	230d      	movs	r3, #13
 8008928:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800892a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800892e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008930:	2300      	movs	r3, #0
 8008932:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008934:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008938:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800893a:	f107 0308 	add.w	r3, r7, #8
 800893e:	4619      	mov	r1, r3
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f7ff fe05 	bl	8008550 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8008946:	f241 3288 	movw	r2, #5000	; 0x1388
 800894a:	210d      	movs	r1, #13
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f000 f84b 	bl	80089e8 <SDMMC_GetCmdResp1>
 8008952:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008954:	69fb      	ldr	r3, [r7, #28]
}
 8008956:	4618      	mov	r0, r3
 8008958:	3720      	adds	r7, #32
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}

0800895e <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800895e:	b580      	push	{r7, lr}
 8008960:	b088      	sub	sp, #32
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008966:	2300      	movs	r3, #0
 8008968:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800896a:	230d      	movs	r3, #13
 800896c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800896e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008972:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008974:	2300      	movs	r3, #0
 8008976:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008978:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800897c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800897e:	f107 0308 	add.w	r3, r7, #8
 8008982:	4619      	mov	r1, r3
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f7ff fde3 	bl	8008550 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800898a:	f241 3288 	movw	r2, #5000	; 0x1388
 800898e:	210d      	movs	r1, #13
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f000 f829 	bl	80089e8 <SDMMC_GetCmdResp1>
 8008996:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008998:	69fb      	ldr	r3, [r7, #28]
}
 800899a:	4618      	mov	r0, r3
 800899c:	3720      	adds	r7, #32
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}

080089a2 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 80089a2:	b580      	push	{r7, lr}
 80089a4:	b088      	sub	sp, #32
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 80089aa:	2300      	movs	r3, #0
 80089ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 80089ae:	230b      	movs	r3, #11
 80089b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80089b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80089b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80089b8:	2300      	movs	r3, #0
 80089ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80089bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80089c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80089c2:	f107 0308 	add.w	r3, r7, #8
 80089c6:	4619      	mov	r1, r3
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f7ff fdc1 	bl	8008550 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 80089ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80089d2:	210b      	movs	r1, #11
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f000 f807 	bl	80089e8 <SDMMC_GetCmdResp1>
 80089da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80089dc:	69fb      	ldr	r3, [r7, #28]
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3720      	adds	r7, #32
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}
	...

080089e8 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b088      	sub	sp, #32
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	60f8      	str	r0, [r7, #12]
 80089f0:	460b      	mov	r3, r1
 80089f2:	607a      	str	r2, [r7, #4]
 80089f4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80089f6:	4b70      	ldr	r3, [pc, #448]	; (8008bb8 <SDMMC_GetCmdResp1+0x1d0>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4a70      	ldr	r2, [pc, #448]	; (8008bbc <SDMMC_GetCmdResp1+0x1d4>)
 80089fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008a00:	0a5a      	lsrs	r2, r3, #9
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	fb02 f303 	mul.w	r3, r2, r3
 8008a08:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8008a0a:	69fb      	ldr	r3, [r7, #28]
 8008a0c:	1e5a      	subs	r2, r3, #1
 8008a0e:	61fa      	str	r2, [r7, #28]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d102      	bne.n	8008a1a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008a14:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008a18:	e0c9      	b.n	8008bae <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a1e:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8008a20:	69ba      	ldr	r2, [r7, #24]
 8008a22:	4b67      	ldr	r3, [pc, #412]	; (8008bc0 <SDMMC_GetCmdResp1+0x1d8>)
 8008a24:	4013      	ands	r3, r2
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d0ef      	beq.n	8008a0a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008a2a:	69bb      	ldr	r3, [r7, #24]
 8008a2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d1ea      	bne.n	8008a0a <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a38:	f003 0304 	and.w	r3, r3, #4
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d004      	beq.n	8008a4a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2204      	movs	r2, #4
 8008a44:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008a46:	2304      	movs	r3, #4
 8008a48:	e0b1      	b.n	8008bae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a4e:	f003 0301 	and.w	r3, r3, #1
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d004      	beq.n	8008a60 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2201      	movs	r2, #1
 8008a5a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	e0a6      	b.n	8008bae <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	4a58      	ldr	r2, [pc, #352]	; (8008bc4 <SDMMC_GetCmdResp1+0x1dc>)
 8008a64:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008a66:	68f8      	ldr	r0, [r7, #12]
 8008a68:	f7ff fd9c 	bl	80085a4 <SDMMC_GetCommandResponse>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	461a      	mov	r2, r3
 8008a70:	7afb      	ldrb	r3, [r7, #11]
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d001      	beq.n	8008a7a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008a76:	2301      	movs	r3, #1
 8008a78:	e099      	b.n	8008bae <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008a7a:	2100      	movs	r1, #0
 8008a7c:	68f8      	ldr	r0, [r7, #12]
 8008a7e:	f7ff fd9e 	bl	80085be <SDMMC_GetResponse>
 8008a82:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008a84:	697a      	ldr	r2, [r7, #20]
 8008a86:	4b50      	ldr	r3, [pc, #320]	; (8008bc8 <SDMMC_GetCmdResp1+0x1e0>)
 8008a88:	4013      	ands	r3, r2
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d101      	bne.n	8008a92 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	e08d      	b.n	8008bae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	da02      	bge.n	8008a9e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008a98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008a9c:	e087      	b.n	8008bae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d001      	beq.n	8008aac <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008aa8:	2340      	movs	r3, #64	; 0x40
 8008aaa:	e080      	b.n	8008bae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d001      	beq.n	8008aba <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008ab6:	2380      	movs	r3, #128	; 0x80
 8008ab8:	e079      	b.n	8008bae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d002      	beq.n	8008aca <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008ac4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ac8:	e071      	b.n	8008bae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d002      	beq.n	8008ada <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008ad4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ad8:	e069      	b.n	8008bae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d002      	beq.n	8008aea <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008ae4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ae8:	e061      	b.n	8008bae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d002      	beq.n	8008afa <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008af4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008af8:	e059      	b.n	8008bae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d002      	beq.n	8008b0a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008b04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b08:	e051      	b.n	8008bae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d002      	beq.n	8008b1a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008b14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008b18:	e049      	b.n	8008bae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d002      	beq.n	8008b2a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008b24:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008b28:	e041      	b.n	8008bae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d002      	beq.n	8008b3a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008b34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b38:	e039      	b.n	8008bae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d002      	beq.n	8008b4a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008b44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008b48:	e031      	b.n	8008bae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d002      	beq.n	8008b5a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008b54:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008b58:	e029      	b.n	8008bae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d002      	beq.n	8008b6a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008b64:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008b68:	e021      	b.n	8008bae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d002      	beq.n	8008b7a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008b74:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008b78:	e019      	b.n	8008bae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d002      	beq.n	8008b8a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008b84:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008b88:	e011      	b.n	8008bae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d002      	beq.n	8008b9a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008b94:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008b98:	e009      	b.n	8008bae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	f003 0308 	and.w	r3, r3, #8
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d002      	beq.n	8008baa <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008ba4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008ba8:	e001      	b.n	8008bae <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008baa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3720      	adds	r7, #32
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	20000000 	.word	0x20000000
 8008bbc:	10624dd3 	.word	0x10624dd3
 8008bc0:	00200045 	.word	0x00200045
 8008bc4:	002000c5 	.word	0x002000c5
 8008bc8:	fdffe008 	.word	0xfdffe008

08008bcc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b085      	sub	sp, #20
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008bd4:	4b1f      	ldr	r3, [pc, #124]	; (8008c54 <SDMMC_GetCmdResp2+0x88>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4a1f      	ldr	r2, [pc, #124]	; (8008c58 <SDMMC_GetCmdResp2+0x8c>)
 8008bda:	fba2 2303 	umull	r2, r3, r2, r3
 8008bde:	0a5b      	lsrs	r3, r3, #9
 8008be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008be4:	fb02 f303 	mul.w	r3, r2, r3
 8008be8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	1e5a      	subs	r2, r3, #1
 8008bee:	60fa      	str	r2, [r7, #12]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d102      	bne.n	8008bfa <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008bf4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008bf8:	e026      	b.n	8008c48 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bfe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d0ef      	beq.n	8008bea <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d1ea      	bne.n	8008bea <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c18:	f003 0304 	and.w	r3, r3, #4
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d004      	beq.n	8008c2a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2204      	movs	r2, #4
 8008c24:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008c26:	2304      	movs	r3, #4
 8008c28:	e00e      	b.n	8008c48 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c2e:	f003 0301 	and.w	r3, r3, #1
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d004      	beq.n	8008c40 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2201      	movs	r2, #1
 8008c3a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	e003      	b.n	8008c48 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	4a06      	ldr	r2, [pc, #24]	; (8008c5c <SDMMC_GetCmdResp2+0x90>)
 8008c44:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008c46:	2300      	movs	r3, #0
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3714      	adds	r7, #20
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr
 8008c54:	20000000 	.word	0x20000000
 8008c58:	10624dd3 	.word	0x10624dd3
 8008c5c:	002000c5 	.word	0x002000c5

08008c60 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b085      	sub	sp, #20
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008c68:	4b1a      	ldr	r3, [pc, #104]	; (8008cd4 <SDMMC_GetCmdResp3+0x74>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a1a      	ldr	r2, [pc, #104]	; (8008cd8 <SDMMC_GetCmdResp3+0x78>)
 8008c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8008c72:	0a5b      	lsrs	r3, r3, #9
 8008c74:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c78:	fb02 f303 	mul.w	r3, r2, r3
 8008c7c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	1e5a      	subs	r2, r3, #1
 8008c82:	60fa      	str	r2, [r7, #12]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d102      	bne.n	8008c8e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008c88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008c8c:	e01b      	b.n	8008cc6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c92:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d0ef      	beq.n	8008c7e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d1ea      	bne.n	8008c7e <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cac:	f003 0304 	and.w	r3, r3, #4
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d004      	beq.n	8008cbe <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2204      	movs	r2, #4
 8008cb8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008cba:	2304      	movs	r3, #4
 8008cbc:	e003      	b.n	8008cc6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	4a06      	ldr	r2, [pc, #24]	; (8008cdc <SDMMC_GetCmdResp3+0x7c>)
 8008cc2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008cc4:	2300      	movs	r3, #0
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3714      	adds	r7, #20
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr
 8008cd2:	bf00      	nop
 8008cd4:	20000000 	.word	0x20000000
 8008cd8:	10624dd3 	.word	0x10624dd3
 8008cdc:	002000c5 	.word	0x002000c5

08008ce0 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b088      	sub	sp, #32
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	60f8      	str	r0, [r7, #12]
 8008ce8:	460b      	mov	r3, r1
 8008cea:	607a      	str	r2, [r7, #4]
 8008cec:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008cee:	4b35      	ldr	r3, [pc, #212]	; (8008dc4 <SDMMC_GetCmdResp6+0xe4>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4a35      	ldr	r2, [pc, #212]	; (8008dc8 <SDMMC_GetCmdResp6+0xe8>)
 8008cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8008cf8:	0a5b      	lsrs	r3, r3, #9
 8008cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cfe:	fb02 f303 	mul.w	r3, r2, r3
 8008d02:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8008d04:	69fb      	ldr	r3, [r7, #28]
 8008d06:	1e5a      	subs	r2, r3, #1
 8008d08:	61fa      	str	r2, [r7, #28]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d102      	bne.n	8008d14 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008d0e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008d12:	e052      	b.n	8008dba <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d18:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008d1a:	69bb      	ldr	r3, [r7, #24]
 8008d1c:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d0ef      	beq.n	8008d04 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008d24:	69bb      	ldr	r3, [r7, #24]
 8008d26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d1ea      	bne.n	8008d04 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d32:	f003 0304 	and.w	r3, r3, #4
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d004      	beq.n	8008d44 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2204      	movs	r2, #4
 8008d3e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008d40:	2304      	movs	r3, #4
 8008d42:	e03a      	b.n	8008dba <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d48:	f003 0301 	and.w	r3, r3, #1
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d004      	beq.n	8008d5a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2201      	movs	r2, #1
 8008d54:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008d56:	2301      	movs	r3, #1
 8008d58:	e02f      	b.n	8008dba <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008d5a:	68f8      	ldr	r0, [r7, #12]
 8008d5c:	f7ff fc22 	bl	80085a4 <SDMMC_GetCommandResponse>
 8008d60:	4603      	mov	r3, r0
 8008d62:	461a      	mov	r2, r3
 8008d64:	7afb      	ldrb	r3, [r7, #11]
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d001      	beq.n	8008d6e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	e025      	b.n	8008dba <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	4a16      	ldr	r2, [pc, #88]	; (8008dcc <SDMMC_GetCmdResp6+0xec>)
 8008d72:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008d74:	2100      	movs	r1, #0
 8008d76:	68f8      	ldr	r0, [r7, #12]
 8008d78:	f7ff fc21 	bl	80085be <SDMMC_GetResponse>
 8008d7c:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d106      	bne.n	8008d96 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	0c1b      	lsrs	r3, r3, #16
 8008d8c:	b29a      	uxth	r2, r3
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8008d92:	2300      	movs	r3, #0
 8008d94:	e011      	b.n	8008dba <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d002      	beq.n	8008da6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008da0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008da4:	e009      	b.n	8008dba <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d002      	beq.n	8008db6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008db0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008db4:	e001      	b.n	8008dba <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008db6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3720      	adds	r7, #32
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
 8008dc2:	bf00      	nop
 8008dc4:	20000000 	.word	0x20000000
 8008dc8:	10624dd3 	.word	0x10624dd3
 8008dcc:	002000c5 	.word	0x002000c5

08008dd0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b085      	sub	sp, #20
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008dd8:	4b22      	ldr	r3, [pc, #136]	; (8008e64 <SDMMC_GetCmdResp7+0x94>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a22      	ldr	r2, [pc, #136]	; (8008e68 <SDMMC_GetCmdResp7+0x98>)
 8008dde:	fba2 2303 	umull	r2, r3, r2, r3
 8008de2:	0a5b      	lsrs	r3, r3, #9
 8008de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008de8:	fb02 f303 	mul.w	r3, r2, r3
 8008dec:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	1e5a      	subs	r2, r3, #1
 8008df2:	60fa      	str	r2, [r7, #12]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d102      	bne.n	8008dfe <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008df8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008dfc:	e02c      	b.n	8008e58 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e02:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d0ef      	beq.n	8008dee <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d1ea      	bne.n	8008dee <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e1c:	f003 0304 	and.w	r3, r3, #4
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d004      	beq.n	8008e2e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2204      	movs	r2, #4
 8008e28:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008e2a:	2304      	movs	r3, #4
 8008e2c:	e014      	b.n	8008e58 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e32:	f003 0301 	and.w	r3, r3, #1
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d004      	beq.n	8008e44 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2201      	movs	r2, #1
 8008e3e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008e40:	2301      	movs	r3, #1
 8008e42:	e009      	b.n	8008e58 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d002      	beq.n	8008e56 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2240      	movs	r2, #64	; 0x40
 8008e54:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008e56:	2300      	movs	r3, #0

}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3714      	adds	r7, #20
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr
 8008e64:	20000000 	.word	0x20000000
 8008e68:	10624dd3 	.word	0x10624dd3

08008e6c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b085      	sub	sp, #20
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008e74:	4b11      	ldr	r3, [pc, #68]	; (8008ebc <SDMMC_GetCmdError+0x50>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a11      	ldr	r2, [pc, #68]	; (8008ec0 <SDMMC_GetCmdError+0x54>)
 8008e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8008e7e:	0a5b      	lsrs	r3, r3, #9
 8008e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e84:	fb02 f303 	mul.w	r3, r2, r3
 8008e88:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	1e5a      	subs	r2, r3, #1
 8008e8e:	60fa      	str	r2, [r7, #12]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d102      	bne.n	8008e9a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008e94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008e98:	e009      	b.n	8008eae <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d0f1      	beq.n	8008e8a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	4a06      	ldr	r2, [pc, #24]	; (8008ec4 <SDMMC_GetCmdError+0x58>)
 8008eaa:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8008eac:	2300      	movs	r3, #0
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3714      	adds	r7, #20
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb8:	4770      	bx	lr
 8008eba:	bf00      	nop
 8008ebc:	20000000 	.word	0x20000000
 8008ec0:	10624dd3 	.word	0x10624dd3
 8008ec4:	002000c5 	.word	0x002000c5

08008ec8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008ec8:	b084      	sub	sp, #16
 8008eca:	b580      	push	{r7, lr}
 8008ecc:	b084      	sub	sp, #16
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	6078      	str	r0, [r7, #4]
 8008ed2:	f107 001c 	add.w	r0, r7, #28
 8008ed6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	68db      	ldr	r3, [r3, #12]
 8008ede:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f000 fa66 	bl	80093b8 <USB_CoreReset>
 8008eec:	4603      	mov	r3, r0
 8008eee:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8008ef0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d106      	bne.n	8008f04 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008efa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	639a      	str	r2, [r3, #56]	; 0x38
 8008f02:	e005      	b.n	8008f10 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8008f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3710      	adds	r7, #16
 8008f16:	46bd      	mov	sp, r7
 8008f18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008f1c:	b004      	add	sp, #16
 8008f1e:	4770      	bx	lr

08008f20 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b083      	sub	sp, #12
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	689b      	ldr	r3, [r3, #8]
 8008f2c:	f023 0201 	bic.w	r2, r3, #1
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008f34:	2300      	movs	r3, #0
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	370c      	adds	r7, #12
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f40:	4770      	bx	lr

08008f42 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8008f42:	b580      	push	{r7, lr}
 8008f44:	b084      	sub	sp, #16
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	68db      	ldr	r3, [r3, #12]
 8008f56:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008f5e:	78fb      	ldrb	r3, [r7, #3]
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d115      	bne.n	8008f90 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	68db      	ldr	r3, [r3, #12]
 8008f68:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008f70:	2001      	movs	r0, #1
 8008f72:	f7f9 f89b 	bl	80020ac <HAL_Delay>
      ms++;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	3301      	adds	r3, #1
 8008f7a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f000 fa0d 	bl	800939c <USB_GetMode>
 8008f82:	4603      	mov	r3, r0
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d01e      	beq.n	8008fc6 <USB_SetCurrentMode+0x84>
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2b31      	cmp	r3, #49	; 0x31
 8008f8c:	d9f0      	bls.n	8008f70 <USB_SetCurrentMode+0x2e>
 8008f8e:	e01a      	b.n	8008fc6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008f90:	78fb      	ldrb	r3, [r7, #3]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d115      	bne.n	8008fc2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	68db      	ldr	r3, [r3, #12]
 8008f9a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008fa2:	2001      	movs	r0, #1
 8008fa4:	f7f9 f882 	bl	80020ac <HAL_Delay>
      ms++;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	3301      	adds	r3, #1
 8008fac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 f9f4 	bl	800939c <USB_GetMode>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d005      	beq.n	8008fc6 <USB_SetCurrentMode+0x84>
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2b31      	cmp	r3, #49	; 0x31
 8008fbe:	d9f0      	bls.n	8008fa2 <USB_SetCurrentMode+0x60>
 8008fc0:	e001      	b.n	8008fc6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	e005      	b.n	8008fd2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2b32      	cmp	r3, #50	; 0x32
 8008fca:	d101      	bne.n	8008fd0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	e000      	b.n	8008fd2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008fd0:	2300      	movs	r3, #0
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3710      	adds	r7, #16
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
	...

08008fdc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008fdc:	b084      	sub	sp, #16
 8008fde:	b580      	push	{r7, lr}
 8008fe0:	b086      	sub	sp, #24
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	6078      	str	r0, [r7, #4]
 8008fe6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008fea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	613b      	str	r3, [r7, #16]
 8008ffa:	e009      	b.n	8009010 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008ffc:	687a      	ldr	r2, [r7, #4]
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	3340      	adds	r3, #64	; 0x40
 8009002:	009b      	lsls	r3, r3, #2
 8009004:	4413      	add	r3, r2
 8009006:	2200      	movs	r2, #0
 8009008:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	3301      	adds	r3, #1
 800900e:	613b      	str	r3, [r7, #16]
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	2b0e      	cmp	r3, #14
 8009014:	d9f2      	bls.n	8008ffc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009018:	2b00      	cmp	r3, #0
 800901a:	d11c      	bne.n	8009056 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	68fa      	ldr	r2, [r7, #12]
 8009026:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800902a:	f043 0302 	orr.w	r3, r3, #2
 800902e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009034:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	601a      	str	r2, [r3, #0]
 8009054:	e005      	b.n	8009062 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800905a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009068:	461a      	mov	r2, r3
 800906a:	2300      	movs	r3, #0
 800906c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800906e:	2103      	movs	r1, #3
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 f959 	bl	8009328 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009076:	2110      	movs	r1, #16
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f000 f8f1 	bl	8009260 <USB_FlushTxFifo>
 800907e:	4603      	mov	r3, r0
 8009080:	2b00      	cmp	r3, #0
 8009082:	d001      	beq.n	8009088 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8009084:	2301      	movs	r3, #1
 8009086:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 f91d 	bl	80092c8 <USB_FlushRxFifo>
 800908e:	4603      	mov	r3, r0
 8009090:	2b00      	cmp	r3, #0
 8009092:	d001      	beq.n	8009098 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8009094:	2301      	movs	r3, #1
 8009096:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800909e:	461a      	mov	r2, r3
 80090a0:	2300      	movs	r3, #0
 80090a2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090aa:	461a      	mov	r2, r3
 80090ac:	2300      	movs	r3, #0
 80090ae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090b6:	461a      	mov	r2, r3
 80090b8:	2300      	movs	r3, #0
 80090ba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80090bc:	2300      	movs	r3, #0
 80090be:	613b      	str	r3, [r7, #16]
 80090c0:	e043      	b.n	800914a <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	015a      	lsls	r2, r3, #5
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	4413      	add	r3, r2
 80090ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80090d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090d8:	d118      	bne.n	800910c <USB_DevInit+0x130>
    {
      if (i == 0U)
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d10a      	bne.n	80090f6 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	015a      	lsls	r2, r3, #5
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	4413      	add	r3, r2
 80090e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090ec:	461a      	mov	r2, r3
 80090ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80090f2:	6013      	str	r3, [r2, #0]
 80090f4:	e013      	b.n	800911e <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	015a      	lsls	r2, r3, #5
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	4413      	add	r3, r2
 80090fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009102:	461a      	mov	r2, r3
 8009104:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009108:	6013      	str	r3, [r2, #0]
 800910a:	e008      	b.n	800911e <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	015a      	lsls	r2, r3, #5
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	4413      	add	r3, r2
 8009114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009118:	461a      	mov	r2, r3
 800911a:	2300      	movs	r3, #0
 800911c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	015a      	lsls	r2, r3, #5
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	4413      	add	r3, r2
 8009126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800912a:	461a      	mov	r2, r3
 800912c:	2300      	movs	r3, #0
 800912e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	015a      	lsls	r2, r3, #5
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	4413      	add	r3, r2
 8009138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800913c:	461a      	mov	r2, r3
 800913e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009142:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009144:	693b      	ldr	r3, [r7, #16]
 8009146:	3301      	adds	r3, #1
 8009148:	613b      	str	r3, [r7, #16]
 800914a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800914c:	693a      	ldr	r2, [r7, #16]
 800914e:	429a      	cmp	r2, r3
 8009150:	d3b7      	bcc.n	80090c2 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009152:	2300      	movs	r3, #0
 8009154:	613b      	str	r3, [r7, #16]
 8009156:	e043      	b.n	80091e0 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	015a      	lsls	r2, r3, #5
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	4413      	add	r3, r2
 8009160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800916a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800916e:	d118      	bne.n	80091a2 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d10a      	bne.n	800918c <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	015a      	lsls	r2, r3, #5
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	4413      	add	r3, r2
 800917e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009182:	461a      	mov	r2, r3
 8009184:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009188:	6013      	str	r3, [r2, #0]
 800918a:	e013      	b.n	80091b4 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	015a      	lsls	r2, r3, #5
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	4413      	add	r3, r2
 8009194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009198:	461a      	mov	r2, r3
 800919a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800919e:	6013      	str	r3, [r2, #0]
 80091a0:	e008      	b.n	80091b4 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	015a      	lsls	r2, r3, #5
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	4413      	add	r3, r2
 80091aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091ae:	461a      	mov	r2, r3
 80091b0:	2300      	movs	r3, #0
 80091b2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	015a      	lsls	r2, r3, #5
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	4413      	add	r3, r2
 80091bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091c0:	461a      	mov	r2, r3
 80091c2:	2300      	movs	r3, #0
 80091c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	015a      	lsls	r2, r3, #5
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	4413      	add	r3, r2
 80091ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091d2:	461a      	mov	r2, r3
 80091d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80091d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	3301      	adds	r3, #1
 80091de:	613b      	str	r3, [r7, #16]
 80091e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e2:	693a      	ldr	r2, [r7, #16]
 80091e4:	429a      	cmp	r2, r3
 80091e6:	d3b7      	bcc.n	8009158 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091ee:	691b      	ldr	r3, [r3, #16]
 80091f0:	68fa      	ldr	r2, [r7, #12]
 80091f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091fa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2200      	movs	r2, #0
 8009200:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009208:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	699b      	ldr	r3, [r3, #24]
 800920e:	f043 0210 	orr.w	r2, r3, #16
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	699a      	ldr	r2, [r3, #24]
 800921a:	4b10      	ldr	r3, [pc, #64]	; (800925c <USB_DevInit+0x280>)
 800921c:	4313      	orrs	r3, r2
 800921e:	687a      	ldr	r2, [r7, #4]
 8009220:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009224:	2b00      	cmp	r3, #0
 8009226:	d005      	beq.n	8009234 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	699b      	ldr	r3, [r3, #24]
 800922c:	f043 0208 	orr.w	r2, r3, #8
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009234:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009236:	2b01      	cmp	r3, #1
 8009238:	d107      	bne.n	800924a <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	699b      	ldr	r3, [r3, #24]
 800923e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009242:	f043 0304 	orr.w	r3, r3, #4
 8009246:	687a      	ldr	r2, [r7, #4]
 8009248:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800924a:	7dfb      	ldrb	r3, [r7, #23]
}
 800924c:	4618      	mov	r0, r3
 800924e:	3718      	adds	r7, #24
 8009250:	46bd      	mov	sp, r7
 8009252:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009256:	b004      	add	sp, #16
 8009258:	4770      	bx	lr
 800925a:	bf00      	nop
 800925c:	803c3800 	.word	0x803c3800

08009260 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009260:	b480      	push	{r7}
 8009262:	b085      	sub	sp, #20
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800926a:	2300      	movs	r3, #0
 800926c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	3301      	adds	r3, #1
 8009272:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	4a13      	ldr	r2, [pc, #76]	; (80092c4 <USB_FlushTxFifo+0x64>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d901      	bls.n	8009280 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800927c:	2303      	movs	r3, #3
 800927e:	e01b      	b.n	80092b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	691b      	ldr	r3, [r3, #16]
 8009284:	2b00      	cmp	r3, #0
 8009286:	daf2      	bge.n	800926e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009288:	2300      	movs	r3, #0
 800928a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	019b      	lsls	r3, r3, #6
 8009290:	f043 0220 	orr.w	r2, r3, #32
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	3301      	adds	r3, #1
 800929c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	4a08      	ldr	r2, [pc, #32]	; (80092c4 <USB_FlushTxFifo+0x64>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d901      	bls.n	80092aa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80092a6:	2303      	movs	r3, #3
 80092a8:	e006      	b.n	80092b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	691b      	ldr	r3, [r3, #16]
 80092ae:	f003 0320 	and.w	r3, r3, #32
 80092b2:	2b20      	cmp	r3, #32
 80092b4:	d0f0      	beq.n	8009298 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80092b6:	2300      	movs	r3, #0
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3714      	adds	r7, #20
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr
 80092c4:	00030d40 	.word	0x00030d40

080092c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b085      	sub	sp, #20
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80092d0:	2300      	movs	r3, #0
 80092d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	3301      	adds	r3, #1
 80092d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	4a11      	ldr	r2, [pc, #68]	; (8009324 <USB_FlushRxFifo+0x5c>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d901      	bls.n	80092e6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80092e2:	2303      	movs	r3, #3
 80092e4:	e018      	b.n	8009318 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	691b      	ldr	r3, [r3, #16]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	daf2      	bge.n	80092d4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80092ee:	2300      	movs	r3, #0
 80092f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2210      	movs	r2, #16
 80092f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	3301      	adds	r3, #1
 80092fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	4a08      	ldr	r2, [pc, #32]	; (8009324 <USB_FlushRxFifo+0x5c>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d901      	bls.n	800930a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009306:	2303      	movs	r3, #3
 8009308:	e006      	b.n	8009318 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	691b      	ldr	r3, [r3, #16]
 800930e:	f003 0310 	and.w	r3, r3, #16
 8009312:	2b10      	cmp	r3, #16
 8009314:	d0f0      	beq.n	80092f8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009316:	2300      	movs	r3, #0
}
 8009318:	4618      	mov	r0, r3
 800931a:	3714      	adds	r7, #20
 800931c:	46bd      	mov	sp, r7
 800931e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009322:	4770      	bx	lr
 8009324:	00030d40 	.word	0x00030d40

08009328 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009328:	b480      	push	{r7}
 800932a:	b085      	sub	sp, #20
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	460b      	mov	r3, r1
 8009332:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800933e:	681a      	ldr	r2, [r3, #0]
 8009340:	78fb      	ldrb	r3, [r7, #3]
 8009342:	68f9      	ldr	r1, [r7, #12]
 8009344:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009348:	4313      	orrs	r3, r2
 800934a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800934c:	2300      	movs	r3, #0
}
 800934e:	4618      	mov	r0, r3
 8009350:	3714      	adds	r7, #20
 8009352:	46bd      	mov	sp, r7
 8009354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009358:	4770      	bx	lr

0800935a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800935a:	b480      	push	{r7}
 800935c:	b085      	sub	sp, #20
 800935e:	af00      	add	r7, sp, #0
 8009360:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	68fa      	ldr	r2, [r7, #12]
 8009370:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009374:	f023 0303 	bic.w	r3, r3, #3
 8009378:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	68fa      	ldr	r2, [r7, #12]
 8009384:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009388:	f043 0302 	orr.w	r3, r3, #2
 800938c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800938e:	2300      	movs	r3, #0
}
 8009390:	4618      	mov	r0, r3
 8009392:	3714      	adds	r7, #20
 8009394:	46bd      	mov	sp, r7
 8009396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939a:	4770      	bx	lr

0800939c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800939c:	b480      	push	{r7}
 800939e:	b083      	sub	sp, #12
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	695b      	ldr	r3, [r3, #20]
 80093a8:	f003 0301 	and.w	r3, r3, #1
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	370c      	adds	r7, #12
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr

080093b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b085      	sub	sp, #20
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80093c0:	2300      	movs	r3, #0
 80093c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	3301      	adds	r3, #1
 80093c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	4a13      	ldr	r2, [pc, #76]	; (800941c <USB_CoreReset+0x64>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d901      	bls.n	80093d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80093d2:	2303      	movs	r3, #3
 80093d4:	e01b      	b.n	800940e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	691b      	ldr	r3, [r3, #16]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	daf2      	bge.n	80093c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80093de:	2300      	movs	r3, #0
 80093e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	691b      	ldr	r3, [r3, #16]
 80093e6:	f043 0201 	orr.w	r2, r3, #1
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	3301      	adds	r3, #1
 80093f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	4a09      	ldr	r2, [pc, #36]	; (800941c <USB_CoreReset+0x64>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d901      	bls.n	8009400 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80093fc:	2303      	movs	r3, #3
 80093fe:	e006      	b.n	800940e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	691b      	ldr	r3, [r3, #16]
 8009404:	f003 0301 	and.w	r3, r3, #1
 8009408:	2b01      	cmp	r3, #1
 800940a:	d0f0      	beq.n	80093ee <USB_CoreReset+0x36>

  return HAL_OK;
 800940c:	2300      	movs	r3, #0
}
 800940e:	4618      	mov	r0, r3
 8009410:	3714      	adds	r7, #20
 8009412:	46bd      	mov	sp, r7
 8009414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009418:	4770      	bx	lr
 800941a:	bf00      	nop
 800941c:	00030d40 	.word	0x00030d40

08009420 <siprintf>:
 8009420:	b40e      	push	{r1, r2, r3}
 8009422:	b500      	push	{lr}
 8009424:	b09c      	sub	sp, #112	; 0x70
 8009426:	ab1d      	add	r3, sp, #116	; 0x74
 8009428:	9002      	str	r0, [sp, #8]
 800942a:	9006      	str	r0, [sp, #24]
 800942c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009430:	4809      	ldr	r0, [pc, #36]	; (8009458 <siprintf+0x38>)
 8009432:	9107      	str	r1, [sp, #28]
 8009434:	9104      	str	r1, [sp, #16]
 8009436:	4909      	ldr	r1, [pc, #36]	; (800945c <siprintf+0x3c>)
 8009438:	f853 2b04 	ldr.w	r2, [r3], #4
 800943c:	9105      	str	r1, [sp, #20]
 800943e:	6800      	ldr	r0, [r0, #0]
 8009440:	9301      	str	r3, [sp, #4]
 8009442:	a902      	add	r1, sp, #8
 8009444:	f000 f992 	bl	800976c <_svfiprintf_r>
 8009448:	9b02      	ldr	r3, [sp, #8]
 800944a:	2200      	movs	r2, #0
 800944c:	701a      	strb	r2, [r3, #0]
 800944e:	b01c      	add	sp, #112	; 0x70
 8009450:	f85d eb04 	ldr.w	lr, [sp], #4
 8009454:	b003      	add	sp, #12
 8009456:	4770      	bx	lr
 8009458:	20000058 	.word	0x20000058
 800945c:	ffff0208 	.word	0xffff0208

08009460 <memset>:
 8009460:	4402      	add	r2, r0
 8009462:	4603      	mov	r3, r0
 8009464:	4293      	cmp	r3, r2
 8009466:	d100      	bne.n	800946a <memset+0xa>
 8009468:	4770      	bx	lr
 800946a:	f803 1b01 	strb.w	r1, [r3], #1
 800946e:	e7f9      	b.n	8009464 <memset+0x4>

08009470 <__errno>:
 8009470:	4b01      	ldr	r3, [pc, #4]	; (8009478 <__errno+0x8>)
 8009472:	6818      	ldr	r0, [r3, #0]
 8009474:	4770      	bx	lr
 8009476:	bf00      	nop
 8009478:	20000058 	.word	0x20000058

0800947c <__libc_init_array>:
 800947c:	b570      	push	{r4, r5, r6, lr}
 800947e:	4d0d      	ldr	r5, [pc, #52]	; (80094b4 <__libc_init_array+0x38>)
 8009480:	4c0d      	ldr	r4, [pc, #52]	; (80094b8 <__libc_init_array+0x3c>)
 8009482:	1b64      	subs	r4, r4, r5
 8009484:	10a4      	asrs	r4, r4, #2
 8009486:	2600      	movs	r6, #0
 8009488:	42a6      	cmp	r6, r4
 800948a:	d109      	bne.n	80094a0 <__libc_init_array+0x24>
 800948c:	4d0b      	ldr	r5, [pc, #44]	; (80094bc <__libc_init_array+0x40>)
 800948e:	4c0c      	ldr	r4, [pc, #48]	; (80094c0 <__libc_init_array+0x44>)
 8009490:	f000 fc6a 	bl	8009d68 <_init>
 8009494:	1b64      	subs	r4, r4, r5
 8009496:	10a4      	asrs	r4, r4, #2
 8009498:	2600      	movs	r6, #0
 800949a:	42a6      	cmp	r6, r4
 800949c:	d105      	bne.n	80094aa <__libc_init_array+0x2e>
 800949e:	bd70      	pop	{r4, r5, r6, pc}
 80094a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80094a4:	4798      	blx	r3
 80094a6:	3601      	adds	r6, #1
 80094a8:	e7ee      	b.n	8009488 <__libc_init_array+0xc>
 80094aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80094ae:	4798      	blx	r3
 80094b0:	3601      	adds	r6, #1
 80094b2:	e7f2      	b.n	800949a <__libc_init_array+0x1e>
 80094b4:	08009e54 	.word	0x08009e54
 80094b8:	08009e54 	.word	0x08009e54
 80094bc:	08009e54 	.word	0x08009e54
 80094c0:	08009e58 	.word	0x08009e58

080094c4 <__retarget_lock_acquire_recursive>:
 80094c4:	4770      	bx	lr

080094c6 <__retarget_lock_release_recursive>:
 80094c6:	4770      	bx	lr

080094c8 <_free_r>:
 80094c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80094ca:	2900      	cmp	r1, #0
 80094cc:	d044      	beq.n	8009558 <_free_r+0x90>
 80094ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094d2:	9001      	str	r0, [sp, #4]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	f1a1 0404 	sub.w	r4, r1, #4
 80094da:	bfb8      	it	lt
 80094dc:	18e4      	addlt	r4, r4, r3
 80094de:	f000 f8df 	bl	80096a0 <__malloc_lock>
 80094e2:	4a1e      	ldr	r2, [pc, #120]	; (800955c <_free_r+0x94>)
 80094e4:	9801      	ldr	r0, [sp, #4]
 80094e6:	6813      	ldr	r3, [r2, #0]
 80094e8:	b933      	cbnz	r3, 80094f8 <_free_r+0x30>
 80094ea:	6063      	str	r3, [r4, #4]
 80094ec:	6014      	str	r4, [r2, #0]
 80094ee:	b003      	add	sp, #12
 80094f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80094f4:	f000 b8da 	b.w	80096ac <__malloc_unlock>
 80094f8:	42a3      	cmp	r3, r4
 80094fa:	d908      	bls.n	800950e <_free_r+0x46>
 80094fc:	6825      	ldr	r5, [r4, #0]
 80094fe:	1961      	adds	r1, r4, r5
 8009500:	428b      	cmp	r3, r1
 8009502:	bf01      	itttt	eq
 8009504:	6819      	ldreq	r1, [r3, #0]
 8009506:	685b      	ldreq	r3, [r3, #4]
 8009508:	1949      	addeq	r1, r1, r5
 800950a:	6021      	streq	r1, [r4, #0]
 800950c:	e7ed      	b.n	80094ea <_free_r+0x22>
 800950e:	461a      	mov	r2, r3
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	b10b      	cbz	r3, 8009518 <_free_r+0x50>
 8009514:	42a3      	cmp	r3, r4
 8009516:	d9fa      	bls.n	800950e <_free_r+0x46>
 8009518:	6811      	ldr	r1, [r2, #0]
 800951a:	1855      	adds	r5, r2, r1
 800951c:	42a5      	cmp	r5, r4
 800951e:	d10b      	bne.n	8009538 <_free_r+0x70>
 8009520:	6824      	ldr	r4, [r4, #0]
 8009522:	4421      	add	r1, r4
 8009524:	1854      	adds	r4, r2, r1
 8009526:	42a3      	cmp	r3, r4
 8009528:	6011      	str	r1, [r2, #0]
 800952a:	d1e0      	bne.n	80094ee <_free_r+0x26>
 800952c:	681c      	ldr	r4, [r3, #0]
 800952e:	685b      	ldr	r3, [r3, #4]
 8009530:	6053      	str	r3, [r2, #4]
 8009532:	440c      	add	r4, r1
 8009534:	6014      	str	r4, [r2, #0]
 8009536:	e7da      	b.n	80094ee <_free_r+0x26>
 8009538:	d902      	bls.n	8009540 <_free_r+0x78>
 800953a:	230c      	movs	r3, #12
 800953c:	6003      	str	r3, [r0, #0]
 800953e:	e7d6      	b.n	80094ee <_free_r+0x26>
 8009540:	6825      	ldr	r5, [r4, #0]
 8009542:	1961      	adds	r1, r4, r5
 8009544:	428b      	cmp	r3, r1
 8009546:	bf04      	itt	eq
 8009548:	6819      	ldreq	r1, [r3, #0]
 800954a:	685b      	ldreq	r3, [r3, #4]
 800954c:	6063      	str	r3, [r4, #4]
 800954e:	bf04      	itt	eq
 8009550:	1949      	addeq	r1, r1, r5
 8009552:	6021      	streq	r1, [r4, #0]
 8009554:	6054      	str	r4, [r2, #4]
 8009556:	e7ca      	b.n	80094ee <_free_r+0x26>
 8009558:	b003      	add	sp, #12
 800955a:	bd30      	pop	{r4, r5, pc}
 800955c:	20000a9c 	.word	0x20000a9c

08009560 <sbrk_aligned>:
 8009560:	b570      	push	{r4, r5, r6, lr}
 8009562:	4e0e      	ldr	r6, [pc, #56]	; (800959c <sbrk_aligned+0x3c>)
 8009564:	460c      	mov	r4, r1
 8009566:	6831      	ldr	r1, [r6, #0]
 8009568:	4605      	mov	r5, r0
 800956a:	b911      	cbnz	r1, 8009572 <sbrk_aligned+0x12>
 800956c:	f000 fba6 	bl	8009cbc <_sbrk_r>
 8009570:	6030      	str	r0, [r6, #0]
 8009572:	4621      	mov	r1, r4
 8009574:	4628      	mov	r0, r5
 8009576:	f000 fba1 	bl	8009cbc <_sbrk_r>
 800957a:	1c43      	adds	r3, r0, #1
 800957c:	d00a      	beq.n	8009594 <sbrk_aligned+0x34>
 800957e:	1cc4      	adds	r4, r0, #3
 8009580:	f024 0403 	bic.w	r4, r4, #3
 8009584:	42a0      	cmp	r0, r4
 8009586:	d007      	beq.n	8009598 <sbrk_aligned+0x38>
 8009588:	1a21      	subs	r1, r4, r0
 800958a:	4628      	mov	r0, r5
 800958c:	f000 fb96 	bl	8009cbc <_sbrk_r>
 8009590:	3001      	adds	r0, #1
 8009592:	d101      	bne.n	8009598 <sbrk_aligned+0x38>
 8009594:	f04f 34ff 	mov.w	r4, #4294967295
 8009598:	4620      	mov	r0, r4
 800959a:	bd70      	pop	{r4, r5, r6, pc}
 800959c:	20000aa0 	.word	0x20000aa0

080095a0 <_malloc_r>:
 80095a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095a4:	1ccd      	adds	r5, r1, #3
 80095a6:	f025 0503 	bic.w	r5, r5, #3
 80095aa:	3508      	adds	r5, #8
 80095ac:	2d0c      	cmp	r5, #12
 80095ae:	bf38      	it	cc
 80095b0:	250c      	movcc	r5, #12
 80095b2:	2d00      	cmp	r5, #0
 80095b4:	4607      	mov	r7, r0
 80095b6:	db01      	blt.n	80095bc <_malloc_r+0x1c>
 80095b8:	42a9      	cmp	r1, r5
 80095ba:	d905      	bls.n	80095c8 <_malloc_r+0x28>
 80095bc:	230c      	movs	r3, #12
 80095be:	603b      	str	r3, [r7, #0]
 80095c0:	2600      	movs	r6, #0
 80095c2:	4630      	mov	r0, r6
 80095c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095c8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800969c <_malloc_r+0xfc>
 80095cc:	f000 f868 	bl	80096a0 <__malloc_lock>
 80095d0:	f8d8 3000 	ldr.w	r3, [r8]
 80095d4:	461c      	mov	r4, r3
 80095d6:	bb5c      	cbnz	r4, 8009630 <_malloc_r+0x90>
 80095d8:	4629      	mov	r1, r5
 80095da:	4638      	mov	r0, r7
 80095dc:	f7ff ffc0 	bl	8009560 <sbrk_aligned>
 80095e0:	1c43      	adds	r3, r0, #1
 80095e2:	4604      	mov	r4, r0
 80095e4:	d155      	bne.n	8009692 <_malloc_r+0xf2>
 80095e6:	f8d8 4000 	ldr.w	r4, [r8]
 80095ea:	4626      	mov	r6, r4
 80095ec:	2e00      	cmp	r6, #0
 80095ee:	d145      	bne.n	800967c <_malloc_r+0xdc>
 80095f0:	2c00      	cmp	r4, #0
 80095f2:	d048      	beq.n	8009686 <_malloc_r+0xe6>
 80095f4:	6823      	ldr	r3, [r4, #0]
 80095f6:	4631      	mov	r1, r6
 80095f8:	4638      	mov	r0, r7
 80095fa:	eb04 0903 	add.w	r9, r4, r3
 80095fe:	f000 fb5d 	bl	8009cbc <_sbrk_r>
 8009602:	4581      	cmp	r9, r0
 8009604:	d13f      	bne.n	8009686 <_malloc_r+0xe6>
 8009606:	6821      	ldr	r1, [r4, #0]
 8009608:	1a6d      	subs	r5, r5, r1
 800960a:	4629      	mov	r1, r5
 800960c:	4638      	mov	r0, r7
 800960e:	f7ff ffa7 	bl	8009560 <sbrk_aligned>
 8009612:	3001      	adds	r0, #1
 8009614:	d037      	beq.n	8009686 <_malloc_r+0xe6>
 8009616:	6823      	ldr	r3, [r4, #0]
 8009618:	442b      	add	r3, r5
 800961a:	6023      	str	r3, [r4, #0]
 800961c:	f8d8 3000 	ldr.w	r3, [r8]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d038      	beq.n	8009696 <_malloc_r+0xf6>
 8009624:	685a      	ldr	r2, [r3, #4]
 8009626:	42a2      	cmp	r2, r4
 8009628:	d12b      	bne.n	8009682 <_malloc_r+0xe2>
 800962a:	2200      	movs	r2, #0
 800962c:	605a      	str	r2, [r3, #4]
 800962e:	e00f      	b.n	8009650 <_malloc_r+0xb0>
 8009630:	6822      	ldr	r2, [r4, #0]
 8009632:	1b52      	subs	r2, r2, r5
 8009634:	d41f      	bmi.n	8009676 <_malloc_r+0xd6>
 8009636:	2a0b      	cmp	r2, #11
 8009638:	d917      	bls.n	800966a <_malloc_r+0xca>
 800963a:	1961      	adds	r1, r4, r5
 800963c:	42a3      	cmp	r3, r4
 800963e:	6025      	str	r5, [r4, #0]
 8009640:	bf18      	it	ne
 8009642:	6059      	strne	r1, [r3, #4]
 8009644:	6863      	ldr	r3, [r4, #4]
 8009646:	bf08      	it	eq
 8009648:	f8c8 1000 	streq.w	r1, [r8]
 800964c:	5162      	str	r2, [r4, r5]
 800964e:	604b      	str	r3, [r1, #4]
 8009650:	4638      	mov	r0, r7
 8009652:	f104 060b 	add.w	r6, r4, #11
 8009656:	f000 f829 	bl	80096ac <__malloc_unlock>
 800965a:	f026 0607 	bic.w	r6, r6, #7
 800965e:	1d23      	adds	r3, r4, #4
 8009660:	1af2      	subs	r2, r6, r3
 8009662:	d0ae      	beq.n	80095c2 <_malloc_r+0x22>
 8009664:	1b9b      	subs	r3, r3, r6
 8009666:	50a3      	str	r3, [r4, r2]
 8009668:	e7ab      	b.n	80095c2 <_malloc_r+0x22>
 800966a:	42a3      	cmp	r3, r4
 800966c:	6862      	ldr	r2, [r4, #4]
 800966e:	d1dd      	bne.n	800962c <_malloc_r+0x8c>
 8009670:	f8c8 2000 	str.w	r2, [r8]
 8009674:	e7ec      	b.n	8009650 <_malloc_r+0xb0>
 8009676:	4623      	mov	r3, r4
 8009678:	6864      	ldr	r4, [r4, #4]
 800967a:	e7ac      	b.n	80095d6 <_malloc_r+0x36>
 800967c:	4634      	mov	r4, r6
 800967e:	6876      	ldr	r6, [r6, #4]
 8009680:	e7b4      	b.n	80095ec <_malloc_r+0x4c>
 8009682:	4613      	mov	r3, r2
 8009684:	e7cc      	b.n	8009620 <_malloc_r+0x80>
 8009686:	230c      	movs	r3, #12
 8009688:	603b      	str	r3, [r7, #0]
 800968a:	4638      	mov	r0, r7
 800968c:	f000 f80e 	bl	80096ac <__malloc_unlock>
 8009690:	e797      	b.n	80095c2 <_malloc_r+0x22>
 8009692:	6025      	str	r5, [r4, #0]
 8009694:	e7dc      	b.n	8009650 <_malloc_r+0xb0>
 8009696:	605b      	str	r3, [r3, #4]
 8009698:	deff      	udf	#255	; 0xff
 800969a:	bf00      	nop
 800969c:	20000a9c 	.word	0x20000a9c

080096a0 <__malloc_lock>:
 80096a0:	4801      	ldr	r0, [pc, #4]	; (80096a8 <__malloc_lock+0x8>)
 80096a2:	f7ff bf0f 	b.w	80094c4 <__retarget_lock_acquire_recursive>
 80096a6:	bf00      	nop
 80096a8:	20000a98 	.word	0x20000a98

080096ac <__malloc_unlock>:
 80096ac:	4801      	ldr	r0, [pc, #4]	; (80096b4 <__malloc_unlock+0x8>)
 80096ae:	f7ff bf0a 	b.w	80094c6 <__retarget_lock_release_recursive>
 80096b2:	bf00      	nop
 80096b4:	20000a98 	.word	0x20000a98

080096b8 <__ssputs_r>:
 80096b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096bc:	688e      	ldr	r6, [r1, #8]
 80096be:	461f      	mov	r7, r3
 80096c0:	42be      	cmp	r6, r7
 80096c2:	680b      	ldr	r3, [r1, #0]
 80096c4:	4682      	mov	sl, r0
 80096c6:	460c      	mov	r4, r1
 80096c8:	4690      	mov	r8, r2
 80096ca:	d82c      	bhi.n	8009726 <__ssputs_r+0x6e>
 80096cc:	898a      	ldrh	r2, [r1, #12]
 80096ce:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80096d2:	d026      	beq.n	8009722 <__ssputs_r+0x6a>
 80096d4:	6965      	ldr	r5, [r4, #20]
 80096d6:	6909      	ldr	r1, [r1, #16]
 80096d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80096dc:	eba3 0901 	sub.w	r9, r3, r1
 80096e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80096e4:	1c7b      	adds	r3, r7, #1
 80096e6:	444b      	add	r3, r9
 80096e8:	106d      	asrs	r5, r5, #1
 80096ea:	429d      	cmp	r5, r3
 80096ec:	bf38      	it	cc
 80096ee:	461d      	movcc	r5, r3
 80096f0:	0553      	lsls	r3, r2, #21
 80096f2:	d527      	bpl.n	8009744 <__ssputs_r+0x8c>
 80096f4:	4629      	mov	r1, r5
 80096f6:	f7ff ff53 	bl	80095a0 <_malloc_r>
 80096fa:	4606      	mov	r6, r0
 80096fc:	b360      	cbz	r0, 8009758 <__ssputs_r+0xa0>
 80096fe:	6921      	ldr	r1, [r4, #16]
 8009700:	464a      	mov	r2, r9
 8009702:	f000 faeb 	bl	8009cdc <memcpy>
 8009706:	89a3      	ldrh	r3, [r4, #12]
 8009708:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800970c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009710:	81a3      	strh	r3, [r4, #12]
 8009712:	6126      	str	r6, [r4, #16]
 8009714:	6165      	str	r5, [r4, #20]
 8009716:	444e      	add	r6, r9
 8009718:	eba5 0509 	sub.w	r5, r5, r9
 800971c:	6026      	str	r6, [r4, #0]
 800971e:	60a5      	str	r5, [r4, #8]
 8009720:	463e      	mov	r6, r7
 8009722:	42be      	cmp	r6, r7
 8009724:	d900      	bls.n	8009728 <__ssputs_r+0x70>
 8009726:	463e      	mov	r6, r7
 8009728:	6820      	ldr	r0, [r4, #0]
 800972a:	4632      	mov	r2, r6
 800972c:	4641      	mov	r1, r8
 800972e:	f000 faab 	bl	8009c88 <memmove>
 8009732:	68a3      	ldr	r3, [r4, #8]
 8009734:	1b9b      	subs	r3, r3, r6
 8009736:	60a3      	str	r3, [r4, #8]
 8009738:	6823      	ldr	r3, [r4, #0]
 800973a:	4433      	add	r3, r6
 800973c:	6023      	str	r3, [r4, #0]
 800973e:	2000      	movs	r0, #0
 8009740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009744:	462a      	mov	r2, r5
 8009746:	f000 fad7 	bl	8009cf8 <_realloc_r>
 800974a:	4606      	mov	r6, r0
 800974c:	2800      	cmp	r0, #0
 800974e:	d1e0      	bne.n	8009712 <__ssputs_r+0x5a>
 8009750:	6921      	ldr	r1, [r4, #16]
 8009752:	4650      	mov	r0, sl
 8009754:	f7ff feb8 	bl	80094c8 <_free_r>
 8009758:	230c      	movs	r3, #12
 800975a:	f8ca 3000 	str.w	r3, [sl]
 800975e:	89a3      	ldrh	r3, [r4, #12]
 8009760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009764:	81a3      	strh	r3, [r4, #12]
 8009766:	f04f 30ff 	mov.w	r0, #4294967295
 800976a:	e7e9      	b.n	8009740 <__ssputs_r+0x88>

0800976c <_svfiprintf_r>:
 800976c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009770:	4698      	mov	r8, r3
 8009772:	898b      	ldrh	r3, [r1, #12]
 8009774:	061b      	lsls	r3, r3, #24
 8009776:	b09d      	sub	sp, #116	; 0x74
 8009778:	4607      	mov	r7, r0
 800977a:	460d      	mov	r5, r1
 800977c:	4614      	mov	r4, r2
 800977e:	d50e      	bpl.n	800979e <_svfiprintf_r+0x32>
 8009780:	690b      	ldr	r3, [r1, #16]
 8009782:	b963      	cbnz	r3, 800979e <_svfiprintf_r+0x32>
 8009784:	2140      	movs	r1, #64	; 0x40
 8009786:	f7ff ff0b 	bl	80095a0 <_malloc_r>
 800978a:	6028      	str	r0, [r5, #0]
 800978c:	6128      	str	r0, [r5, #16]
 800978e:	b920      	cbnz	r0, 800979a <_svfiprintf_r+0x2e>
 8009790:	230c      	movs	r3, #12
 8009792:	603b      	str	r3, [r7, #0]
 8009794:	f04f 30ff 	mov.w	r0, #4294967295
 8009798:	e0d0      	b.n	800993c <_svfiprintf_r+0x1d0>
 800979a:	2340      	movs	r3, #64	; 0x40
 800979c:	616b      	str	r3, [r5, #20]
 800979e:	2300      	movs	r3, #0
 80097a0:	9309      	str	r3, [sp, #36]	; 0x24
 80097a2:	2320      	movs	r3, #32
 80097a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80097ac:	2330      	movs	r3, #48	; 0x30
 80097ae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009954 <_svfiprintf_r+0x1e8>
 80097b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80097b6:	f04f 0901 	mov.w	r9, #1
 80097ba:	4623      	mov	r3, r4
 80097bc:	469a      	mov	sl, r3
 80097be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097c2:	b10a      	cbz	r2, 80097c8 <_svfiprintf_r+0x5c>
 80097c4:	2a25      	cmp	r2, #37	; 0x25
 80097c6:	d1f9      	bne.n	80097bc <_svfiprintf_r+0x50>
 80097c8:	ebba 0b04 	subs.w	fp, sl, r4
 80097cc:	d00b      	beq.n	80097e6 <_svfiprintf_r+0x7a>
 80097ce:	465b      	mov	r3, fp
 80097d0:	4622      	mov	r2, r4
 80097d2:	4629      	mov	r1, r5
 80097d4:	4638      	mov	r0, r7
 80097d6:	f7ff ff6f 	bl	80096b8 <__ssputs_r>
 80097da:	3001      	adds	r0, #1
 80097dc:	f000 80a9 	beq.w	8009932 <_svfiprintf_r+0x1c6>
 80097e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097e2:	445a      	add	r2, fp
 80097e4:	9209      	str	r2, [sp, #36]	; 0x24
 80097e6:	f89a 3000 	ldrb.w	r3, [sl]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	f000 80a1 	beq.w	8009932 <_svfiprintf_r+0x1c6>
 80097f0:	2300      	movs	r3, #0
 80097f2:	f04f 32ff 	mov.w	r2, #4294967295
 80097f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097fa:	f10a 0a01 	add.w	sl, sl, #1
 80097fe:	9304      	str	r3, [sp, #16]
 8009800:	9307      	str	r3, [sp, #28]
 8009802:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009806:	931a      	str	r3, [sp, #104]	; 0x68
 8009808:	4654      	mov	r4, sl
 800980a:	2205      	movs	r2, #5
 800980c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009810:	4850      	ldr	r0, [pc, #320]	; (8009954 <_svfiprintf_r+0x1e8>)
 8009812:	f7f6 fcfd 	bl	8000210 <memchr>
 8009816:	9a04      	ldr	r2, [sp, #16]
 8009818:	b9d8      	cbnz	r0, 8009852 <_svfiprintf_r+0xe6>
 800981a:	06d0      	lsls	r0, r2, #27
 800981c:	bf44      	itt	mi
 800981e:	2320      	movmi	r3, #32
 8009820:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009824:	0711      	lsls	r1, r2, #28
 8009826:	bf44      	itt	mi
 8009828:	232b      	movmi	r3, #43	; 0x2b
 800982a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800982e:	f89a 3000 	ldrb.w	r3, [sl]
 8009832:	2b2a      	cmp	r3, #42	; 0x2a
 8009834:	d015      	beq.n	8009862 <_svfiprintf_r+0xf6>
 8009836:	9a07      	ldr	r2, [sp, #28]
 8009838:	4654      	mov	r4, sl
 800983a:	2000      	movs	r0, #0
 800983c:	f04f 0c0a 	mov.w	ip, #10
 8009840:	4621      	mov	r1, r4
 8009842:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009846:	3b30      	subs	r3, #48	; 0x30
 8009848:	2b09      	cmp	r3, #9
 800984a:	d94d      	bls.n	80098e8 <_svfiprintf_r+0x17c>
 800984c:	b1b0      	cbz	r0, 800987c <_svfiprintf_r+0x110>
 800984e:	9207      	str	r2, [sp, #28]
 8009850:	e014      	b.n	800987c <_svfiprintf_r+0x110>
 8009852:	eba0 0308 	sub.w	r3, r0, r8
 8009856:	fa09 f303 	lsl.w	r3, r9, r3
 800985a:	4313      	orrs	r3, r2
 800985c:	9304      	str	r3, [sp, #16]
 800985e:	46a2      	mov	sl, r4
 8009860:	e7d2      	b.n	8009808 <_svfiprintf_r+0x9c>
 8009862:	9b03      	ldr	r3, [sp, #12]
 8009864:	1d19      	adds	r1, r3, #4
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	9103      	str	r1, [sp, #12]
 800986a:	2b00      	cmp	r3, #0
 800986c:	bfbb      	ittet	lt
 800986e:	425b      	neglt	r3, r3
 8009870:	f042 0202 	orrlt.w	r2, r2, #2
 8009874:	9307      	strge	r3, [sp, #28]
 8009876:	9307      	strlt	r3, [sp, #28]
 8009878:	bfb8      	it	lt
 800987a:	9204      	strlt	r2, [sp, #16]
 800987c:	7823      	ldrb	r3, [r4, #0]
 800987e:	2b2e      	cmp	r3, #46	; 0x2e
 8009880:	d10c      	bne.n	800989c <_svfiprintf_r+0x130>
 8009882:	7863      	ldrb	r3, [r4, #1]
 8009884:	2b2a      	cmp	r3, #42	; 0x2a
 8009886:	d134      	bne.n	80098f2 <_svfiprintf_r+0x186>
 8009888:	9b03      	ldr	r3, [sp, #12]
 800988a:	1d1a      	adds	r2, r3, #4
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	9203      	str	r2, [sp, #12]
 8009890:	2b00      	cmp	r3, #0
 8009892:	bfb8      	it	lt
 8009894:	f04f 33ff 	movlt.w	r3, #4294967295
 8009898:	3402      	adds	r4, #2
 800989a:	9305      	str	r3, [sp, #20]
 800989c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009964 <_svfiprintf_r+0x1f8>
 80098a0:	7821      	ldrb	r1, [r4, #0]
 80098a2:	2203      	movs	r2, #3
 80098a4:	4650      	mov	r0, sl
 80098a6:	f7f6 fcb3 	bl	8000210 <memchr>
 80098aa:	b138      	cbz	r0, 80098bc <_svfiprintf_r+0x150>
 80098ac:	9b04      	ldr	r3, [sp, #16]
 80098ae:	eba0 000a 	sub.w	r0, r0, sl
 80098b2:	2240      	movs	r2, #64	; 0x40
 80098b4:	4082      	lsls	r2, r0
 80098b6:	4313      	orrs	r3, r2
 80098b8:	3401      	adds	r4, #1
 80098ba:	9304      	str	r3, [sp, #16]
 80098bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098c0:	4825      	ldr	r0, [pc, #148]	; (8009958 <_svfiprintf_r+0x1ec>)
 80098c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80098c6:	2206      	movs	r2, #6
 80098c8:	f7f6 fca2 	bl	8000210 <memchr>
 80098cc:	2800      	cmp	r0, #0
 80098ce:	d038      	beq.n	8009942 <_svfiprintf_r+0x1d6>
 80098d0:	4b22      	ldr	r3, [pc, #136]	; (800995c <_svfiprintf_r+0x1f0>)
 80098d2:	bb1b      	cbnz	r3, 800991c <_svfiprintf_r+0x1b0>
 80098d4:	9b03      	ldr	r3, [sp, #12]
 80098d6:	3307      	adds	r3, #7
 80098d8:	f023 0307 	bic.w	r3, r3, #7
 80098dc:	3308      	adds	r3, #8
 80098de:	9303      	str	r3, [sp, #12]
 80098e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098e2:	4433      	add	r3, r6
 80098e4:	9309      	str	r3, [sp, #36]	; 0x24
 80098e6:	e768      	b.n	80097ba <_svfiprintf_r+0x4e>
 80098e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80098ec:	460c      	mov	r4, r1
 80098ee:	2001      	movs	r0, #1
 80098f0:	e7a6      	b.n	8009840 <_svfiprintf_r+0xd4>
 80098f2:	2300      	movs	r3, #0
 80098f4:	3401      	adds	r4, #1
 80098f6:	9305      	str	r3, [sp, #20]
 80098f8:	4619      	mov	r1, r3
 80098fa:	f04f 0c0a 	mov.w	ip, #10
 80098fe:	4620      	mov	r0, r4
 8009900:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009904:	3a30      	subs	r2, #48	; 0x30
 8009906:	2a09      	cmp	r2, #9
 8009908:	d903      	bls.n	8009912 <_svfiprintf_r+0x1a6>
 800990a:	2b00      	cmp	r3, #0
 800990c:	d0c6      	beq.n	800989c <_svfiprintf_r+0x130>
 800990e:	9105      	str	r1, [sp, #20]
 8009910:	e7c4      	b.n	800989c <_svfiprintf_r+0x130>
 8009912:	fb0c 2101 	mla	r1, ip, r1, r2
 8009916:	4604      	mov	r4, r0
 8009918:	2301      	movs	r3, #1
 800991a:	e7f0      	b.n	80098fe <_svfiprintf_r+0x192>
 800991c:	ab03      	add	r3, sp, #12
 800991e:	9300      	str	r3, [sp, #0]
 8009920:	462a      	mov	r2, r5
 8009922:	4b0f      	ldr	r3, [pc, #60]	; (8009960 <_svfiprintf_r+0x1f4>)
 8009924:	a904      	add	r1, sp, #16
 8009926:	4638      	mov	r0, r7
 8009928:	f3af 8000 	nop.w
 800992c:	1c42      	adds	r2, r0, #1
 800992e:	4606      	mov	r6, r0
 8009930:	d1d6      	bne.n	80098e0 <_svfiprintf_r+0x174>
 8009932:	89ab      	ldrh	r3, [r5, #12]
 8009934:	065b      	lsls	r3, r3, #25
 8009936:	f53f af2d 	bmi.w	8009794 <_svfiprintf_r+0x28>
 800993a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800993c:	b01d      	add	sp, #116	; 0x74
 800993e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009942:	ab03      	add	r3, sp, #12
 8009944:	9300      	str	r3, [sp, #0]
 8009946:	462a      	mov	r2, r5
 8009948:	4b05      	ldr	r3, [pc, #20]	; (8009960 <_svfiprintf_r+0x1f4>)
 800994a:	a904      	add	r1, sp, #16
 800994c:	4638      	mov	r0, r7
 800994e:	f000 f879 	bl	8009a44 <_printf_i>
 8009952:	e7eb      	b.n	800992c <_svfiprintf_r+0x1c0>
 8009954:	08009e18 	.word	0x08009e18
 8009958:	08009e22 	.word	0x08009e22
 800995c:	00000000 	.word	0x00000000
 8009960:	080096b9 	.word	0x080096b9
 8009964:	08009e1e 	.word	0x08009e1e

08009968 <_printf_common>:
 8009968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800996c:	4616      	mov	r6, r2
 800996e:	4699      	mov	r9, r3
 8009970:	688a      	ldr	r2, [r1, #8]
 8009972:	690b      	ldr	r3, [r1, #16]
 8009974:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009978:	4293      	cmp	r3, r2
 800997a:	bfb8      	it	lt
 800997c:	4613      	movlt	r3, r2
 800997e:	6033      	str	r3, [r6, #0]
 8009980:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009984:	4607      	mov	r7, r0
 8009986:	460c      	mov	r4, r1
 8009988:	b10a      	cbz	r2, 800998e <_printf_common+0x26>
 800998a:	3301      	adds	r3, #1
 800998c:	6033      	str	r3, [r6, #0]
 800998e:	6823      	ldr	r3, [r4, #0]
 8009990:	0699      	lsls	r1, r3, #26
 8009992:	bf42      	ittt	mi
 8009994:	6833      	ldrmi	r3, [r6, #0]
 8009996:	3302      	addmi	r3, #2
 8009998:	6033      	strmi	r3, [r6, #0]
 800999a:	6825      	ldr	r5, [r4, #0]
 800999c:	f015 0506 	ands.w	r5, r5, #6
 80099a0:	d106      	bne.n	80099b0 <_printf_common+0x48>
 80099a2:	f104 0a19 	add.w	sl, r4, #25
 80099a6:	68e3      	ldr	r3, [r4, #12]
 80099a8:	6832      	ldr	r2, [r6, #0]
 80099aa:	1a9b      	subs	r3, r3, r2
 80099ac:	42ab      	cmp	r3, r5
 80099ae:	dc26      	bgt.n	80099fe <_printf_common+0x96>
 80099b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80099b4:	1e13      	subs	r3, r2, #0
 80099b6:	6822      	ldr	r2, [r4, #0]
 80099b8:	bf18      	it	ne
 80099ba:	2301      	movne	r3, #1
 80099bc:	0692      	lsls	r2, r2, #26
 80099be:	d42b      	bmi.n	8009a18 <_printf_common+0xb0>
 80099c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80099c4:	4649      	mov	r1, r9
 80099c6:	4638      	mov	r0, r7
 80099c8:	47c0      	blx	r8
 80099ca:	3001      	adds	r0, #1
 80099cc:	d01e      	beq.n	8009a0c <_printf_common+0xa4>
 80099ce:	6823      	ldr	r3, [r4, #0]
 80099d0:	6922      	ldr	r2, [r4, #16]
 80099d2:	f003 0306 	and.w	r3, r3, #6
 80099d6:	2b04      	cmp	r3, #4
 80099d8:	bf02      	ittt	eq
 80099da:	68e5      	ldreq	r5, [r4, #12]
 80099dc:	6833      	ldreq	r3, [r6, #0]
 80099de:	1aed      	subeq	r5, r5, r3
 80099e0:	68a3      	ldr	r3, [r4, #8]
 80099e2:	bf0c      	ite	eq
 80099e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80099e8:	2500      	movne	r5, #0
 80099ea:	4293      	cmp	r3, r2
 80099ec:	bfc4      	itt	gt
 80099ee:	1a9b      	subgt	r3, r3, r2
 80099f0:	18ed      	addgt	r5, r5, r3
 80099f2:	2600      	movs	r6, #0
 80099f4:	341a      	adds	r4, #26
 80099f6:	42b5      	cmp	r5, r6
 80099f8:	d11a      	bne.n	8009a30 <_printf_common+0xc8>
 80099fa:	2000      	movs	r0, #0
 80099fc:	e008      	b.n	8009a10 <_printf_common+0xa8>
 80099fe:	2301      	movs	r3, #1
 8009a00:	4652      	mov	r2, sl
 8009a02:	4649      	mov	r1, r9
 8009a04:	4638      	mov	r0, r7
 8009a06:	47c0      	blx	r8
 8009a08:	3001      	adds	r0, #1
 8009a0a:	d103      	bne.n	8009a14 <_printf_common+0xac>
 8009a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a14:	3501      	adds	r5, #1
 8009a16:	e7c6      	b.n	80099a6 <_printf_common+0x3e>
 8009a18:	18e1      	adds	r1, r4, r3
 8009a1a:	1c5a      	adds	r2, r3, #1
 8009a1c:	2030      	movs	r0, #48	; 0x30
 8009a1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009a22:	4422      	add	r2, r4
 8009a24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009a28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009a2c:	3302      	adds	r3, #2
 8009a2e:	e7c7      	b.n	80099c0 <_printf_common+0x58>
 8009a30:	2301      	movs	r3, #1
 8009a32:	4622      	mov	r2, r4
 8009a34:	4649      	mov	r1, r9
 8009a36:	4638      	mov	r0, r7
 8009a38:	47c0      	blx	r8
 8009a3a:	3001      	adds	r0, #1
 8009a3c:	d0e6      	beq.n	8009a0c <_printf_common+0xa4>
 8009a3e:	3601      	adds	r6, #1
 8009a40:	e7d9      	b.n	80099f6 <_printf_common+0x8e>
	...

08009a44 <_printf_i>:
 8009a44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a48:	7e0f      	ldrb	r7, [r1, #24]
 8009a4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009a4c:	2f78      	cmp	r7, #120	; 0x78
 8009a4e:	4691      	mov	r9, r2
 8009a50:	4680      	mov	r8, r0
 8009a52:	460c      	mov	r4, r1
 8009a54:	469a      	mov	sl, r3
 8009a56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009a5a:	d807      	bhi.n	8009a6c <_printf_i+0x28>
 8009a5c:	2f62      	cmp	r7, #98	; 0x62
 8009a5e:	d80a      	bhi.n	8009a76 <_printf_i+0x32>
 8009a60:	2f00      	cmp	r7, #0
 8009a62:	f000 80d4 	beq.w	8009c0e <_printf_i+0x1ca>
 8009a66:	2f58      	cmp	r7, #88	; 0x58
 8009a68:	f000 80c0 	beq.w	8009bec <_printf_i+0x1a8>
 8009a6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009a74:	e03a      	b.n	8009aec <_printf_i+0xa8>
 8009a76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009a7a:	2b15      	cmp	r3, #21
 8009a7c:	d8f6      	bhi.n	8009a6c <_printf_i+0x28>
 8009a7e:	a101      	add	r1, pc, #4	; (adr r1, 8009a84 <_printf_i+0x40>)
 8009a80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009a84:	08009add 	.word	0x08009add
 8009a88:	08009af1 	.word	0x08009af1
 8009a8c:	08009a6d 	.word	0x08009a6d
 8009a90:	08009a6d 	.word	0x08009a6d
 8009a94:	08009a6d 	.word	0x08009a6d
 8009a98:	08009a6d 	.word	0x08009a6d
 8009a9c:	08009af1 	.word	0x08009af1
 8009aa0:	08009a6d 	.word	0x08009a6d
 8009aa4:	08009a6d 	.word	0x08009a6d
 8009aa8:	08009a6d 	.word	0x08009a6d
 8009aac:	08009a6d 	.word	0x08009a6d
 8009ab0:	08009bf5 	.word	0x08009bf5
 8009ab4:	08009b1d 	.word	0x08009b1d
 8009ab8:	08009baf 	.word	0x08009baf
 8009abc:	08009a6d 	.word	0x08009a6d
 8009ac0:	08009a6d 	.word	0x08009a6d
 8009ac4:	08009c17 	.word	0x08009c17
 8009ac8:	08009a6d 	.word	0x08009a6d
 8009acc:	08009b1d 	.word	0x08009b1d
 8009ad0:	08009a6d 	.word	0x08009a6d
 8009ad4:	08009a6d 	.word	0x08009a6d
 8009ad8:	08009bb7 	.word	0x08009bb7
 8009adc:	682b      	ldr	r3, [r5, #0]
 8009ade:	1d1a      	adds	r2, r3, #4
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	602a      	str	r2, [r5, #0]
 8009ae4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ae8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009aec:	2301      	movs	r3, #1
 8009aee:	e09f      	b.n	8009c30 <_printf_i+0x1ec>
 8009af0:	6820      	ldr	r0, [r4, #0]
 8009af2:	682b      	ldr	r3, [r5, #0]
 8009af4:	0607      	lsls	r7, r0, #24
 8009af6:	f103 0104 	add.w	r1, r3, #4
 8009afa:	6029      	str	r1, [r5, #0]
 8009afc:	d501      	bpl.n	8009b02 <_printf_i+0xbe>
 8009afe:	681e      	ldr	r6, [r3, #0]
 8009b00:	e003      	b.n	8009b0a <_printf_i+0xc6>
 8009b02:	0646      	lsls	r6, r0, #25
 8009b04:	d5fb      	bpl.n	8009afe <_printf_i+0xba>
 8009b06:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009b0a:	2e00      	cmp	r6, #0
 8009b0c:	da03      	bge.n	8009b16 <_printf_i+0xd2>
 8009b0e:	232d      	movs	r3, #45	; 0x2d
 8009b10:	4276      	negs	r6, r6
 8009b12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b16:	485a      	ldr	r0, [pc, #360]	; (8009c80 <_printf_i+0x23c>)
 8009b18:	230a      	movs	r3, #10
 8009b1a:	e012      	b.n	8009b42 <_printf_i+0xfe>
 8009b1c:	682b      	ldr	r3, [r5, #0]
 8009b1e:	6820      	ldr	r0, [r4, #0]
 8009b20:	1d19      	adds	r1, r3, #4
 8009b22:	6029      	str	r1, [r5, #0]
 8009b24:	0605      	lsls	r5, r0, #24
 8009b26:	d501      	bpl.n	8009b2c <_printf_i+0xe8>
 8009b28:	681e      	ldr	r6, [r3, #0]
 8009b2a:	e002      	b.n	8009b32 <_printf_i+0xee>
 8009b2c:	0641      	lsls	r1, r0, #25
 8009b2e:	d5fb      	bpl.n	8009b28 <_printf_i+0xe4>
 8009b30:	881e      	ldrh	r6, [r3, #0]
 8009b32:	4853      	ldr	r0, [pc, #332]	; (8009c80 <_printf_i+0x23c>)
 8009b34:	2f6f      	cmp	r7, #111	; 0x6f
 8009b36:	bf0c      	ite	eq
 8009b38:	2308      	moveq	r3, #8
 8009b3a:	230a      	movne	r3, #10
 8009b3c:	2100      	movs	r1, #0
 8009b3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009b42:	6865      	ldr	r5, [r4, #4]
 8009b44:	60a5      	str	r5, [r4, #8]
 8009b46:	2d00      	cmp	r5, #0
 8009b48:	bfa2      	ittt	ge
 8009b4a:	6821      	ldrge	r1, [r4, #0]
 8009b4c:	f021 0104 	bicge.w	r1, r1, #4
 8009b50:	6021      	strge	r1, [r4, #0]
 8009b52:	b90e      	cbnz	r6, 8009b58 <_printf_i+0x114>
 8009b54:	2d00      	cmp	r5, #0
 8009b56:	d04b      	beq.n	8009bf0 <_printf_i+0x1ac>
 8009b58:	4615      	mov	r5, r2
 8009b5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8009b5e:	fb03 6711 	mls	r7, r3, r1, r6
 8009b62:	5dc7      	ldrb	r7, [r0, r7]
 8009b64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009b68:	4637      	mov	r7, r6
 8009b6a:	42bb      	cmp	r3, r7
 8009b6c:	460e      	mov	r6, r1
 8009b6e:	d9f4      	bls.n	8009b5a <_printf_i+0x116>
 8009b70:	2b08      	cmp	r3, #8
 8009b72:	d10b      	bne.n	8009b8c <_printf_i+0x148>
 8009b74:	6823      	ldr	r3, [r4, #0]
 8009b76:	07de      	lsls	r6, r3, #31
 8009b78:	d508      	bpl.n	8009b8c <_printf_i+0x148>
 8009b7a:	6923      	ldr	r3, [r4, #16]
 8009b7c:	6861      	ldr	r1, [r4, #4]
 8009b7e:	4299      	cmp	r1, r3
 8009b80:	bfde      	ittt	le
 8009b82:	2330      	movle	r3, #48	; 0x30
 8009b84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009b88:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009b8c:	1b52      	subs	r2, r2, r5
 8009b8e:	6122      	str	r2, [r4, #16]
 8009b90:	f8cd a000 	str.w	sl, [sp]
 8009b94:	464b      	mov	r3, r9
 8009b96:	aa03      	add	r2, sp, #12
 8009b98:	4621      	mov	r1, r4
 8009b9a:	4640      	mov	r0, r8
 8009b9c:	f7ff fee4 	bl	8009968 <_printf_common>
 8009ba0:	3001      	adds	r0, #1
 8009ba2:	d14a      	bne.n	8009c3a <_printf_i+0x1f6>
 8009ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ba8:	b004      	add	sp, #16
 8009baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bae:	6823      	ldr	r3, [r4, #0]
 8009bb0:	f043 0320 	orr.w	r3, r3, #32
 8009bb4:	6023      	str	r3, [r4, #0]
 8009bb6:	4833      	ldr	r0, [pc, #204]	; (8009c84 <_printf_i+0x240>)
 8009bb8:	2778      	movs	r7, #120	; 0x78
 8009bba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009bbe:	6823      	ldr	r3, [r4, #0]
 8009bc0:	6829      	ldr	r1, [r5, #0]
 8009bc2:	061f      	lsls	r7, r3, #24
 8009bc4:	f851 6b04 	ldr.w	r6, [r1], #4
 8009bc8:	d402      	bmi.n	8009bd0 <_printf_i+0x18c>
 8009bca:	065f      	lsls	r7, r3, #25
 8009bcc:	bf48      	it	mi
 8009bce:	b2b6      	uxthmi	r6, r6
 8009bd0:	07df      	lsls	r7, r3, #31
 8009bd2:	bf48      	it	mi
 8009bd4:	f043 0320 	orrmi.w	r3, r3, #32
 8009bd8:	6029      	str	r1, [r5, #0]
 8009bda:	bf48      	it	mi
 8009bdc:	6023      	strmi	r3, [r4, #0]
 8009bde:	b91e      	cbnz	r6, 8009be8 <_printf_i+0x1a4>
 8009be0:	6823      	ldr	r3, [r4, #0]
 8009be2:	f023 0320 	bic.w	r3, r3, #32
 8009be6:	6023      	str	r3, [r4, #0]
 8009be8:	2310      	movs	r3, #16
 8009bea:	e7a7      	b.n	8009b3c <_printf_i+0xf8>
 8009bec:	4824      	ldr	r0, [pc, #144]	; (8009c80 <_printf_i+0x23c>)
 8009bee:	e7e4      	b.n	8009bba <_printf_i+0x176>
 8009bf0:	4615      	mov	r5, r2
 8009bf2:	e7bd      	b.n	8009b70 <_printf_i+0x12c>
 8009bf4:	682b      	ldr	r3, [r5, #0]
 8009bf6:	6826      	ldr	r6, [r4, #0]
 8009bf8:	6961      	ldr	r1, [r4, #20]
 8009bfa:	1d18      	adds	r0, r3, #4
 8009bfc:	6028      	str	r0, [r5, #0]
 8009bfe:	0635      	lsls	r5, r6, #24
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	d501      	bpl.n	8009c08 <_printf_i+0x1c4>
 8009c04:	6019      	str	r1, [r3, #0]
 8009c06:	e002      	b.n	8009c0e <_printf_i+0x1ca>
 8009c08:	0670      	lsls	r0, r6, #25
 8009c0a:	d5fb      	bpl.n	8009c04 <_printf_i+0x1c0>
 8009c0c:	8019      	strh	r1, [r3, #0]
 8009c0e:	2300      	movs	r3, #0
 8009c10:	6123      	str	r3, [r4, #16]
 8009c12:	4615      	mov	r5, r2
 8009c14:	e7bc      	b.n	8009b90 <_printf_i+0x14c>
 8009c16:	682b      	ldr	r3, [r5, #0]
 8009c18:	1d1a      	adds	r2, r3, #4
 8009c1a:	602a      	str	r2, [r5, #0]
 8009c1c:	681d      	ldr	r5, [r3, #0]
 8009c1e:	6862      	ldr	r2, [r4, #4]
 8009c20:	2100      	movs	r1, #0
 8009c22:	4628      	mov	r0, r5
 8009c24:	f7f6 faf4 	bl	8000210 <memchr>
 8009c28:	b108      	cbz	r0, 8009c2e <_printf_i+0x1ea>
 8009c2a:	1b40      	subs	r0, r0, r5
 8009c2c:	6060      	str	r0, [r4, #4]
 8009c2e:	6863      	ldr	r3, [r4, #4]
 8009c30:	6123      	str	r3, [r4, #16]
 8009c32:	2300      	movs	r3, #0
 8009c34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c38:	e7aa      	b.n	8009b90 <_printf_i+0x14c>
 8009c3a:	6923      	ldr	r3, [r4, #16]
 8009c3c:	462a      	mov	r2, r5
 8009c3e:	4649      	mov	r1, r9
 8009c40:	4640      	mov	r0, r8
 8009c42:	47d0      	blx	sl
 8009c44:	3001      	adds	r0, #1
 8009c46:	d0ad      	beq.n	8009ba4 <_printf_i+0x160>
 8009c48:	6823      	ldr	r3, [r4, #0]
 8009c4a:	079b      	lsls	r3, r3, #30
 8009c4c:	d413      	bmi.n	8009c76 <_printf_i+0x232>
 8009c4e:	68e0      	ldr	r0, [r4, #12]
 8009c50:	9b03      	ldr	r3, [sp, #12]
 8009c52:	4298      	cmp	r0, r3
 8009c54:	bfb8      	it	lt
 8009c56:	4618      	movlt	r0, r3
 8009c58:	e7a6      	b.n	8009ba8 <_printf_i+0x164>
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	4632      	mov	r2, r6
 8009c5e:	4649      	mov	r1, r9
 8009c60:	4640      	mov	r0, r8
 8009c62:	47d0      	blx	sl
 8009c64:	3001      	adds	r0, #1
 8009c66:	d09d      	beq.n	8009ba4 <_printf_i+0x160>
 8009c68:	3501      	adds	r5, #1
 8009c6a:	68e3      	ldr	r3, [r4, #12]
 8009c6c:	9903      	ldr	r1, [sp, #12]
 8009c6e:	1a5b      	subs	r3, r3, r1
 8009c70:	42ab      	cmp	r3, r5
 8009c72:	dcf2      	bgt.n	8009c5a <_printf_i+0x216>
 8009c74:	e7eb      	b.n	8009c4e <_printf_i+0x20a>
 8009c76:	2500      	movs	r5, #0
 8009c78:	f104 0619 	add.w	r6, r4, #25
 8009c7c:	e7f5      	b.n	8009c6a <_printf_i+0x226>
 8009c7e:	bf00      	nop
 8009c80:	08009e29 	.word	0x08009e29
 8009c84:	08009e3a 	.word	0x08009e3a

08009c88 <memmove>:
 8009c88:	4288      	cmp	r0, r1
 8009c8a:	b510      	push	{r4, lr}
 8009c8c:	eb01 0402 	add.w	r4, r1, r2
 8009c90:	d902      	bls.n	8009c98 <memmove+0x10>
 8009c92:	4284      	cmp	r4, r0
 8009c94:	4623      	mov	r3, r4
 8009c96:	d807      	bhi.n	8009ca8 <memmove+0x20>
 8009c98:	1e43      	subs	r3, r0, #1
 8009c9a:	42a1      	cmp	r1, r4
 8009c9c:	d008      	beq.n	8009cb0 <memmove+0x28>
 8009c9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ca2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ca6:	e7f8      	b.n	8009c9a <memmove+0x12>
 8009ca8:	4402      	add	r2, r0
 8009caa:	4601      	mov	r1, r0
 8009cac:	428a      	cmp	r2, r1
 8009cae:	d100      	bne.n	8009cb2 <memmove+0x2a>
 8009cb0:	bd10      	pop	{r4, pc}
 8009cb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009cb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009cba:	e7f7      	b.n	8009cac <memmove+0x24>

08009cbc <_sbrk_r>:
 8009cbc:	b538      	push	{r3, r4, r5, lr}
 8009cbe:	4d06      	ldr	r5, [pc, #24]	; (8009cd8 <_sbrk_r+0x1c>)
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	4604      	mov	r4, r0
 8009cc4:	4608      	mov	r0, r1
 8009cc6:	602b      	str	r3, [r5, #0]
 8009cc8:	f7f8 f90a 	bl	8001ee0 <_sbrk>
 8009ccc:	1c43      	adds	r3, r0, #1
 8009cce:	d102      	bne.n	8009cd6 <_sbrk_r+0x1a>
 8009cd0:	682b      	ldr	r3, [r5, #0]
 8009cd2:	b103      	cbz	r3, 8009cd6 <_sbrk_r+0x1a>
 8009cd4:	6023      	str	r3, [r4, #0]
 8009cd6:	bd38      	pop	{r3, r4, r5, pc}
 8009cd8:	20000a94 	.word	0x20000a94

08009cdc <memcpy>:
 8009cdc:	440a      	add	r2, r1
 8009cde:	4291      	cmp	r1, r2
 8009ce0:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ce4:	d100      	bne.n	8009ce8 <memcpy+0xc>
 8009ce6:	4770      	bx	lr
 8009ce8:	b510      	push	{r4, lr}
 8009cea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009cf2:	4291      	cmp	r1, r2
 8009cf4:	d1f9      	bne.n	8009cea <memcpy+0xe>
 8009cf6:	bd10      	pop	{r4, pc}

08009cf8 <_realloc_r>:
 8009cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cfc:	4680      	mov	r8, r0
 8009cfe:	4614      	mov	r4, r2
 8009d00:	460e      	mov	r6, r1
 8009d02:	b921      	cbnz	r1, 8009d0e <_realloc_r+0x16>
 8009d04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d08:	4611      	mov	r1, r2
 8009d0a:	f7ff bc49 	b.w	80095a0 <_malloc_r>
 8009d0e:	b92a      	cbnz	r2, 8009d1c <_realloc_r+0x24>
 8009d10:	f7ff fbda 	bl	80094c8 <_free_r>
 8009d14:	4625      	mov	r5, r4
 8009d16:	4628      	mov	r0, r5
 8009d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d1c:	f000 f81b 	bl	8009d56 <_malloc_usable_size_r>
 8009d20:	4284      	cmp	r4, r0
 8009d22:	4607      	mov	r7, r0
 8009d24:	d802      	bhi.n	8009d2c <_realloc_r+0x34>
 8009d26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009d2a:	d812      	bhi.n	8009d52 <_realloc_r+0x5a>
 8009d2c:	4621      	mov	r1, r4
 8009d2e:	4640      	mov	r0, r8
 8009d30:	f7ff fc36 	bl	80095a0 <_malloc_r>
 8009d34:	4605      	mov	r5, r0
 8009d36:	2800      	cmp	r0, #0
 8009d38:	d0ed      	beq.n	8009d16 <_realloc_r+0x1e>
 8009d3a:	42bc      	cmp	r4, r7
 8009d3c:	4622      	mov	r2, r4
 8009d3e:	4631      	mov	r1, r6
 8009d40:	bf28      	it	cs
 8009d42:	463a      	movcs	r2, r7
 8009d44:	f7ff ffca 	bl	8009cdc <memcpy>
 8009d48:	4631      	mov	r1, r6
 8009d4a:	4640      	mov	r0, r8
 8009d4c:	f7ff fbbc 	bl	80094c8 <_free_r>
 8009d50:	e7e1      	b.n	8009d16 <_realloc_r+0x1e>
 8009d52:	4635      	mov	r5, r6
 8009d54:	e7df      	b.n	8009d16 <_realloc_r+0x1e>

08009d56 <_malloc_usable_size_r>:
 8009d56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d5a:	1f18      	subs	r0, r3, #4
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	bfbc      	itt	lt
 8009d60:	580b      	ldrlt	r3, [r1, r0]
 8009d62:	18c0      	addlt	r0, r0, r3
 8009d64:	4770      	bx	lr
	...

08009d68 <_init>:
 8009d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d6a:	bf00      	nop
 8009d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d6e:	bc08      	pop	{r3}
 8009d70:	469e      	mov	lr, r3
 8009d72:	4770      	bx	lr

08009d74 <_fini>:
 8009d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d76:	bf00      	nop
 8009d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d7a:	bc08      	pop	{r3}
 8009d7c:	469e      	mov	lr, r3
 8009d7e:	4770      	bx	lr
